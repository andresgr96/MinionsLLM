[
    {
        "layman_task": "Your task find good parts and bring them to the base.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you detect a part then pick up the part, or otherwise then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find scrap parts and bring them to the waste.",
        "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts and bring them to the waste.",
        "technical_task": "if you are holding a good part and if you are in the waste then drop the part, or if you are holding a good part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the waste area then drop the part, or if you are holding a good part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find scrap parts and bring them to the source.",
        "technical_task": "if you are holding a scrap part and if you are in the source then drop the part, or if you are holding a scrap part then go to the source, or if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a scrap part and if you are in the source area then drop the part, or if you are holding a scrap part then seek the source area, or if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_source_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find scrap parts and stop when you find one.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts and stop when you find one.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then stop moving, or otherwise then go to the source.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then freeze movement, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find the base and stop when you reach it.",
        "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_base_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find the source and then come back to the base.",
        "technical_task": "if you are in the source then go to the base, or otherwise then go to the source.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find the waste area and stop when you reach it.",
        "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
        "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_waste_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find any part and pick it up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to maintain the base by bringing good parts to it and taking scrap parts to the waste. If you're holding a scrap part and you're in the waste area, stop moving.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>   \n\n\n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
    },
    {
        "layman_task": "Your task is to go to the construction area if you're at the base.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to drop the part if you are in the base.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to let go of the part you're holding.",
        "technical_task": "drop the part.",
        "spoon_task": "drop the part.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to drop the good part you're holding and then head back to the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head to the source area if you find yourself in the waste area.",
        "technical_task": "if you are in the waste then go to the source.",
        "spoon_task": "if you are in the waste area then seek the source area.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "If you're in the storage area, pick up the part and then stay there. If you're holding a scrap part, just go to the storage.",
        "technical_task": "if you are in the storage then pick up the part and then go to the storage, or otherwise if you are holding a scrap part then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the storage area, or otherwise if you are holding a scrap part then seek the storage area.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to let go of the part.",
        "technical_task": "drop the part.",
        "spoon_task": "drop the part.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up the part if you're in the construction area.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up parts when you're in the construction area and then stay there, or if you're in the waste area, just search around randomly. If you're in the base, drop the part and then head to the waste. If you find a part while moving, pick it up and stop. Lastly, if you don't know what to do, drop the part and keep searching.",
        "technical_task": "if you are in the construction then pick up the part and then go to the construction, or if you are in the waste then search randomly, or if you are in the base then drop the part and then go to the waste, or then go to the waste, or then drop the part and then go to the waste, or then go to the construction, or then drop the part and then search randomly, or then go to the waste, or then pick up the part and then stop moving, or then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the construction area, or if you are in the waste area then walk randomly, or if you are in the base area then drop the part and then seek the waste area, or then seek the waste area, or then drop the part and then seek the waste area, or then seek the construction area, or then drop the part and then walk randomly, or then seek the waste area, or then pick up the part and then freeze movement, or then seek the source area, or otherwise then drop the part.",
        "tree": "<?xml version=\"1.0\" ?>\n<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    }
]