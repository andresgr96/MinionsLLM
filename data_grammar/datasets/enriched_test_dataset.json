[
  {
    "layman_task": "Your task find good parts and bring them to the base.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task find good parts and bring them to the base.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task find good parts and bring them to the waste.",
    "technical_task": "if you are holding a good part and if you are in the waste then drop the part, or if you are holding a good part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the waste area then drop the part, or if you are holding a good part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task find good parts and bring them to the waste.",
    "technical_task": "if you are holding a good part and if you are in the waste then drop the part, or if you are holding a good part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the waste area then drop the part, or if you are holding a good part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the source area.",
    "technical_task": "if you are holding a scrap part and if you are in the source then drop the part, or if you are holding a scrap part then go to the source, or if you detect a part then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the source area then drop the part, or if you are holding a scrap part then seek the source area, or if you detect a part then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_source_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the source area.",
    "technical_task": "if you are holding a scrap part and if you are in the source then drop the part, or if you are holding a scrap part then go to the source, or if you detect a part then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the source area then drop the part, or if you are holding a scrap part then seek the source area, or if you detect a part then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_source_area</StateAction>\n                        </Sequence>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and stop moving.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then stop moving, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and stop moving.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then stop moving, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and stop moving.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and stop moving.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>  \n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>     \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base and stop moving.",
    "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_base_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base and stop moving.",
    "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_base_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the source, and then come back to the base.",
    "technical_task": "if you are in the source then go to the base, or otherwise then go to the source.",
    "spoon_task": "if you are in the source area then seek the base area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the source, and then come back to the base.",
    "technical_task": "if you are in the source then go to the base, or otherwise then go to the source.",
    "spoon_task": "if you are in the source area then seek the base area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_source_area</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste and stop moving.",
    "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_waste_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste and stop moving.",
    "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>        \n\n                        <StateAction>state_seek_waste_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any type of part.",
    "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any type of part.",
    "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_random_walk</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to maintain your base by finding good parts and bring them to the base. If you find scrap parts then go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>   \n\n\n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to maintain your base by finding good parts and bring them to the base. If you find scrap parts then go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n                    <Selector>\n                \n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <Condition>is_agent_in_base_area</Condition>\n                            <ActuatorAction>drop_part</ActuatorAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_good_part</Condition>\n                            <StateAction>state_seek_base_area</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <Condition>is_agent_in_waste_area</Condition>\n                            <StateAction>state_movement_freeze</StateAction>\n                        </Sequence>\n\n\n                        <Sequence>\n                            <Condition>is_agent_holding_scrap_part</Condition>\n                            <StateAction>state_seek_waste_area</StateAction>\n                        </Sequence>   \n\n\n                        <Sequence>\n                            <Condition>is_part_detected</Condition>\n                            <ActuatorAction>pick_up_part</ActuatorAction>\n                        </Sequence>       \n\n                        <StateAction>state_seek_source_area</StateAction>\n                    </Selector>\n                </BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area.",
    "technical_task": "if you are in the source then pick up the part.",
    "spoon_task": "if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts if you find any, and if you do that, then seek the waste area. If you don't find any scrap parts, keep moving around the area.",
    "technical_task": "pick up the part and then go to the waste, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and, if you find one, take it to the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for both scrap parts and good parts. When you find a part, pick it up, and if you find a scrap part, bring it to the waste area. If you are holding a good part, bring it to the base area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the base, or then go to the source, or then pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or then seek the source area, or then pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if the agent is in the base area, and if so, go to the construction area. If you're not in the base area, then pick up a part.",
    "technical_task": "if you are in the base then go to the construction, or otherwise then pick up the part.",
    "spoon_task": "if you are in the base area then seek the construction area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you are holding a good part, and if so, then drop the part in the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then stop moving, or otherwise then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a good part, then take it to the storage area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the storage then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the storage area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you find a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, stop moving, and drop it at the base when you are ready.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a scrap part then stop moving, or then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a scrap part then freeze movement, or then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and move to the storage area if you have one.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then drop it in the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment freely.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part, and if you're in the base area, then drop the good part.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and if you find one, drop it at the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a detected part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to manage scrap parts by picking them up and bringing them to the waste area; if you have one, stay still until you can drop it.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, drop any good part you are holding, and then seek the storage area.",
    "technical_task": "if you are in the base then drop the part and then go to the storage.",
    "spoon_task": "if you are in the base area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area when you are in the source area, and if you are not holding anything, pick up the good part.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to stay in the base area and drop a good part if you have one while also ensuring there are no scrap parts in your possession.",
    "technical_task": "go to the storage, or otherwise if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part.",
    "spoon_task": "seek the storage area, or otherwise if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find any, and if you find scrap parts, head to the waste area to drop them off.",
    "technical_task": "go to the source, or then pick up the part and then go to the base, or then search randomly, or if you are holding a scrap part then drop the part, or then pick up the part, or then go to the waste, or then pick up the part and then go to the storage, or then search randomly, or if you are in the waste then drop the part, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or then pick up the part and then seek the base area, or then walk randomly, or if you are holding a scrap part then drop the part, or then pick up the part, or then seek the waste area, or then pick up the part and then seek the storage area, or then walk randomly, or if you are in the waste area then drop the part, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and bring it to the storage area, and if you encounter a scrap part, seek the waste area.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part then go to the waste, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then seek the waste area, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you are holding a scrap part, and you are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the source and if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then proceed to search for parts.",
    "technical_task": "if you are in the base then search randomly.",
    "spoon_task": "if you are in the base area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, while also stopping and dropping a scrap part if you have one.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then go to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts when you find them, drop them off in the storage area, and if you encounter scrap parts, pick them up and bring them to the waste area.",
    "technical_task": "pick up the part and then go to the storage, or then drop the part, or then pick up the part and then go to the waste, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then drop the part, or then pick up the part and then seek the waste area, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you are not holding any parts, and then move to the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area after finding it, and if you pick up a scrap part, go to the waste area and drop it.",
    "technical_task": "if you are in the base then pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and if you can't pick one up, then check if you're in the waste area and if not, go there.",
    "technical_task": "pick up the part and then go to the waste, or if you are in the waste then stop moving, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are in the waste area then freeze movement, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area and drop a good part if you are holding one.",
    "technical_task": "go to the base, or otherwise then drop the part and then go to the base.",
    "spoon_task": "seek the base area, or otherwise then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and you detect a part.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, and if you pick up a scrap part but are not in the waste area, then navigate towards it.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then pick up the part and then go to the waste, or if you are in the waste then drop the part, or otherwise if you are in the source then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or if you are in the waste area then drop the part, or otherwise if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are in the source area and not already holding anything.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and drop them off in the storage area while scanning for any nearby scrap parts to gather.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base. If you find a scrap part, you should stop moving.",
    "technical_task": "if you are holding a scrap part then stop moving, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good part you are holding when you are in the storage area and then randomly search for parts in the environment.",
    "technical_task": "drop the part and then search randomly, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you encounter scrap parts, drop them at the waste area instead.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or if you are holding a good part and if you are in the base and if you are in the storage then stop moving, or if you detect a part and if you are holding a good part and if you are in the source then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or if you are holding a good part and if you are in the base area and if you are in the storage area then freeze movement, or if you detect a part and if you are holding a good part and if you are in the source area then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then decide where to go next based on whether you are carrying a scrap part.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, carry it, and drop it at the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you see one and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are holding a scrap part, then go ahead and stop moving.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it to the base, and if you find a scrap part, go to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then stop moving, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then freeze movement, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up a good part when you are in the source area, and then move towards the base to drop it off.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and drop them in the storage area, and if you find a scrap part, go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are carrying a scrap part, and if you are, then drop it.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, but only if you are in the source area and holding no good parts.",
    "technical_task": "if you are in the source and if you are holding a good part and if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and drop it at the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up any part if detected, and if you are in the waste area then stop moving. If you are holding a scrap part, you should go to the waste area. If you are in the base area, find a good part.",
    "technical_task": "pick up the part, or if you are in the waste then stop moving, or if you are holding a scrap part then go to the waste, or otherwise if you are in the base and if you detect a part then go to the source.",
    "spoon_task": "pick up the part, or if you are in the waste area then freeze movement, or if you are holding a scrap part then seek the waste area, or otherwise if you are in the base area and if you detect a part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, if you are holding a good part, and if there is enough space to drop the part, then drop it in the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then drop it in the waste area if you are in the waste area.",
    "technical_task": "if you detect a part and if you are in the waste then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the waste area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and then move to the base area afterward.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and move it to the storage area if you are holding it, but if you encounter a scrap part, you should move to the waste area and stop.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving, or if you are holding a good part then go to the storage, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement, or if you are holding a good part then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it to the storage area, and if you encounter a scrap part during this process, just drop it in the waste area if you're there.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then return to the base to drop it off.",
    "technical_task": "pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part and then stop moving.",
    "spoon_task": "pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if detected, and then drop it off in the storage area. If you find a scrap part, you should drop it off in the waste area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head towards the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts, bring them to the waste area, and stop moving once you drop them off.",
    "technical_task": "pick up the part, or then drop the part and then go to the waste, or then drop the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then drop the part and then seek the waste area, or then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any parts in the environment, pick up scrap parts and drop them in the waste area, and if you find a good part, bring it to the base.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you are holding a good part then go to the base, or if you detect a part and if you are holding a good part then drop the part, or if you detect a part then search randomly, or if you detect a part and if you are holding a scrap part then drop the part, or if you are holding a good part then go to the storage, or if you detect a part and if you are in the source then pick up the part, or if you are in the source then stop moving, or if you detect a part and if you are in the base then pick up the part, or if you are in the base then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you are holding a good part then seek the base area, or if you detect a part and if you are holding a good part then drop the part, or if you detect a part then walk randomly, or if you detect a part and if you are holding a scrap part then drop the part, or if you are holding a good part then seek the storage area, or if you detect a part and if you are in the source area then pick up the part, or if you are in the source area then freeze movement, or if you detect a part and if you are in the base area then pick up the part, or if you are in the base area then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts and bring them to the waste area. If you find a good part, you should stop moving.",
    "technical_task": "if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area while ensuring you're in the right zones.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and are detecting a good part.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area before attempting to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area.",
    "technical_task": "if you are in the waste then drop the part.",
    "spoon_task": "if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before you stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and if you can't pick it up, then move towards the source area.",
    "technical_task": "pick up the part, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you have one, otherwise pick up a scrap part if you find one.",
    "technical_task": "drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any scrap part you are currently holding.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and, if you detect any parts, then move towards the source area.",
    "technical_task": "search randomly, or otherwise if you detect a part then go to the source.",
    "spoon_task": "walk randomly, or otherwise if you detect a part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, and if you detect one, move towards the source area.",
    "technical_task": "if you detect a part then go to the source.",
    "spoon_task": "if you detect a part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area. If you find a scrap part, pick it up, and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area while stopping if you already are in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to storage to drop it off. If you find a scrap part, pick it up, and go to the waste area to drop it off. If neither happens, keep searching.",
    "technical_task": "if you detect a part and if you are holding a good part then go to the storage, or if you detect a part and if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the base then search randomly.",
    "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the base area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you find a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any detected scrap part and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect it and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area if you are holding a scrap part, and if you reach the waste area and are not holding any parts, then stop moving.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you are in the waste and if you are holding a scrap part and if you are in the base then stop moving.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you are in the waste area and if you are holding a scrap part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but only if you are in the source area and you are not holding any part.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are holding a scrap part then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are holding a scrap part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to deliver a good part to the storage area.",
    "technical_task": "drop the part, or otherwise then go to the storage.",
    "spoon_task": "drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a nearby good part and then proceed to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and drop them in the storage area. If you find a scrap part, pick it up and then move to the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part and if you are in the source then pick up the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part and if you are in the source area then pick up the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area if you are holding one, only after verifying that you are in the base area and not holding any scrap parts.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, but if you are holding a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you detect a part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then move towards it.",
    "technical_task": "if you are in the waste then go to the waste.",
    "spoon_task": "if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and then move back to the base area.",
    "technical_task": "if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then freeze your movement.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you encounter one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, look for parts to pick up. If you are not in the base area, then move towards it.",
    "technical_task": "if you are in the base then search randomly, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then walk randomly, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to consistently move towards the waste area, and whenever you detect a scrap part, pick it up and go back to the waste area to drop it.",
    "technical_task": "go to the waste, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "seek the waste area, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then decide to seek either the storage area or do nothing.",
    "technical_task": "if you are in the base then go to the storage, or otherwise then stop moving.",
    "spoon_task": "if you are in the base area then seek the storage area, or otherwise then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base. If you find a scrap part, then go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then stop moving, or if you are holding a scrap part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then freeze movement, or if you are holding a scrap part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area, then drop it. If you are holding a scrap part and are in the waste area, then stop moving. If you detect any part, pick it up.",
    "technical_task": "if you are holding a good part then go to the storage, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area to drop it.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a detected scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up, and if you encounter scrap parts, go to the waste area to drop them off.",
    "technical_task": "pick up the part, or then drop the part, or then go to the waste, or then pick up the part, or then drop the part, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then drop the part, or then seek the waste area, or then pick up the part, or then drop the part, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts while managing your actions effectively, including dropping them off in the waste area if you are carrying any.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then go to the source, or if you are in the waste and if you are holding a scrap part and if you detect a part then drop the part and then stop moving, or if you are in the source then search randomly, or if you are in the base and if you detect a part and if you are holding a good part then pick up the part and then go to the storage, or if you are in the storage then stop moving, or if you are in the construction and if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste, or if you are holding a good part then stop moving, or if you are in the waste and if you are holding a good part and if you detect a part then drop the part and then search randomly, or otherwise if you are in the source then go to the construction.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then seek the source area, or if you are in the waste area and if you are holding a scrap part and if you detect a part then drop the part and then freeze movement, or if you are in the source area then walk randomly, or if you are in the base area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area, or if you are in the storage area then freeze movement, or if you are in the construction area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area, or if you are holding a good part then freeze movement, or if you are in the waste area and if you are holding a good part and if you detect a part then drop the part and then walk randomly, or otherwise if you are in the source area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a random area to explore.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area, and if you are, then prepare to gather parts by moving towards the source area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the source.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to reach the base area and check if you are holding a good part, and if so, stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and you are not already holding a part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are holding one.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to head towards the source area to look for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and if you are holding a scrap part, then go to the waste area and stop moving.",
    "technical_task": "pick up the part, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part once you have detected one in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when one is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while ensuring that if you are holding a scrap part, you drop it in the waste.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you detect a part then go to the waste, or then pick up the part, or then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part then seek the waste area, or then pick up the part, or then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you detect one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find them, and bring them to the storage area. If you find scrap parts, drop them in the waste area. Additionally, if you end up in the base area or the storage area, stop moving.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or if you are holding a good part then drop the part and then go to the storage, or if you are in the base and if you are in the storage and if you are in the construction then stop moving, or if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part then pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the base area and if you are in the storage area and if you are in the construction area then freeze movement, or if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and if you find it, then stop moving in the base area.",
    "technical_task": "if you detect a part and if you are in the base then stop moving.",
    "spoon_task": "if you detect a part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then move towards it.",
    "technical_task": "if you are in the waste then go to the waste.",
    "spoon_task": "if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then go back to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part, but only if you are in the source area, and then drop it in the storage area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, drop it if you do, and then seek the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then stay still.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the construction area, and if you are in the construction area, then stop moving.",
    "technical_task": "if you are in the construction then stop moving.",
    "spoon_task": "if you are in the construction area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and if you pick one up, then navigate to the storage area to drop it off. If you can't find a good part, just keep looking around.",
    "technical_task": "if you detect a part and if you are holding a good part then go to the storage, or if you are in the storage then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area, or if you are in the storage area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you don't find one, you should search for good parts in the source area and stop moving if you're holding one.",
    "technical_task": "drop the part, or otherwise if you detect a part and if you are holding a good part then stop moving.",
    "spoon_task": "drop the part, or otherwise if you detect a part and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then go to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage, but if you find scrap parts, you should bring them to the waste area. You should stop moving if you have collected a part.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part and if you are in the storage then stop moving, or then go to the source, or then pick up the part and then go to the waste, or if you are holding a scrap part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part and if you are in the storage area then freeze movement, or then seek the source area, or then pick up the part and then seek the waste area, or if you are holding a scrap part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts when you find them, and if you're already holding a good part, then bring it to the storage area. If you can't find any parts, just move randomly.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part, go to the waste area and drop it there.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or otherwise if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are holding one.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and ensure you are in the waste area before dropping it.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area and holding a good part before freezing your movement.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if so, drop it at the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part when you're in the base area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and then seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part, bring it to the storage area if you are in the base area, and stop moving.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part, or otherwise then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base only if you are in the source area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, and if you find one and are at the waste area, drop it. If you find a good part, then stop moving.",
    "technical_task": "if you are in the waste then stop moving, or if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the source area, pick it up, then bring it to the base. If you are not holding a part, seek out a good part, and if you find scrap parts, bring them to the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or if you are in the waste then drop the part and then stop moving, or then go to the source, or if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are in the waste area then drop the part and then freeze movement, or then seek the source area, or if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the base if you're already holding it, otherwise, if you detect a part, pick it up and seek the base.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving, or otherwise if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement, or otherwise if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for any part. If you find a good part, pick it up and head to the storage area. If you find a scrap part, pick it up and then head to the waste area. If neither are found, just move around randomly.",
    "technical_task": "if you are in the source then search randomly, or if you detect a part then pick up the part and then go to the storage, or then pick up the part, or if you are holding a scrap part then pick up the part, or if you are holding a good part then go to the waste, or otherwise then drop the part and then stop moving.",
    "spoon_task": "if you are in the source area then walk randomly, or if you detect a part then pick up the part and then seek the storage area, or then pick up the part, or if you are holding a scrap part then pick up the part, or if you are holding a good part then seek the waste area, or otherwise then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one, drop it in the storage area. If you can't find a part, then pick up a scrap part if detected.",
    "technical_task": "if you are in the storage then stop moving, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "if you are in the storage area then freeze movement, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area. If you find a good part, just bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and then move towards the source area.",
    "technical_task": "if you are in the storage then go to the source.",
    "spoon_task": "if you are in the storage area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, bring it to the waste area, and stop moving when you reach the waste.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you are holding a scrap part and if you are in the source and if you are holding a good part then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you are holding a scrap part and if you are in the source area and if you are holding a good part then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base, but if you find a scrap part, then drop it immediately.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate the environment and if you find a good part, bring it to the storage area. If you find a scrap part, go to the waste area. If you're in the base area, stop moving.",
    "technical_task": "if you are in the base then stop moving, or if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and, if so, go to the waste area. If you are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area with good parts before stopping.",
    "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts from the environment, drop off scrap parts in the waste area, and ensure you keep searching for more scrap parts until all are collected.",
    "technical_task": "if you are in the waste then drop the part and then stop moving, or then go to the waste, or if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then go to the waste, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the base then drop the part and then stop moving, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then go to the source, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you are in the waste area then drop the part and then freeze movement, or then seek the waste area, or if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then seek the waste area, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the base area then drop the part and then freeze movement, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then seek the source area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area only if you are currently in the source area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then stop moving once you get there.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up good parts and bring them to the storage area while stopping if you run into a scrap part.",
    "technical_task": "pick up the part and then go to the storage, or then pick up the part, or then pick up the part and then go to the source, or otherwise then pick up the part and then stop moving.",
    "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or then pick up the part and then seek the source area, or otherwise then pick up the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are in the source area and not holding any parts.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part if you find one, and if you are holding a scrap part, make sure to drop it.",
    "technical_task": "pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment, drop any scrap parts in the waste area, and then return to the base.",
    "technical_task": "go to the source, or if you detect a part then go to the waste, or then go to the base, or if you are holding a scrap part then drop the part and then stop moving, or if you are holding a good part then drop the part and then stop moving, or then pick up the part, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then seek the waste area, or then seek the base area, or if you are holding a scrap part then drop the part and then freeze movement, or if you are holding a good part then drop the part and then freeze movement, or then pick up the part, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you find one, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part once you find it.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if you are in the source area and you are not already holding a part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you are carrying a scrap part, then go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving, or then go to the storage, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement, or then seek the storage area, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and organize parts in the environment. First, seek good parts and bring them to the base. If you find scrap parts, take them to the waste area. If you are in the storage area, stop.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or if you are holding a scrap part then go to the waste, or if you are in the base then drop the part, or if you are holding a good part and if you are in the storage and if you are in the source then stop moving, or if you are holding a good part then drop the part, or if you detect a part and if you are in the waste and if you are holding a scrap part then stop moving, or if you are in the source then pick up the part, or if you are in the storage and if you detect a part and if you are holding a good part then stop moving, or otherwise if you are in the waste then drop the part.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or if you are holding a scrap part then seek the waste area, or if you are in the base area then drop the part, or if you are holding a good part and if you are in the storage area and if you are in the source area then freeze movement, or if you are holding a good part then drop the part, or if you detect a part and if you are in the waste area and if you are holding a scrap part then freeze movement, or if you are in the source area then pick up the part, or if you are in the storage area and if you detect a part and if you are holding a good part then freeze movement, or otherwise if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, then search for any parts. If you find a part, pick it up and then continue searching for parts in the environment.",
    "technical_task": "if you are in the base then search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you are in the base area then walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment, pick up scrap parts if found, and then bring them to the waste area. If you encounter a good part, simply drop it in the storage area.",
    "technical_task": "drop the part, or then pick up the part, or if you detect a part then go to the waste, or if you are in the waste then stop moving, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or then pick up the part, or if you detect a part then seek the waste area, or if you are in the waste area then freeze movement, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you encounter a scrap part, stop and drop it in the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the base area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, drop any good parts you are holding.",
    "technical_task": "if you are in the storage then drop the part.",
    "spoon_task": "if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected and then move to the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, drop it in the storage area, and then seek the source area for more parts.",
    "technical_task": "if you are holding a good part then drop the part and then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move towards the waste area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part and then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment, look for good parts, pick them up if you find any, and then return to the base area.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or if you are holding a good part then go to the base, or then search randomly, or then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or if you are holding a good part then seek the base area, or then walk randomly, or then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and if you're holding one, bring it to the storage area. If you don't find any good parts, check for scrap parts and pick them up instead.",
    "technical_task": "if you detect a part and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you detect a part and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and drop them in the waste area only if you are holding a scrap part and are in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, prepare to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you are in the source then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are in the source area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then stop moving if you are in the base area.",
    "technical_task": "if you detect a part and if you are in the base then stop moving.",
    "spoon_task": "if you detect a part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and if you find it, drop it in the storage area.",
    "technical_task": "if you are in the storage then stop moving, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the storage area then freeze movement, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up good parts when you find them and then head back to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area; if not, check if you are holding a scrap part and then go to the waste area.",
    "technical_task": "drop the part and then go to the storage, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify and gather all scrap parts in the environment, drop them off in the waste area, and search for good parts to bring back to the base. If you encounter an area with good parts, pick them up; if you detect scrap parts, take them to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then search randomly, or then pick up the part, or if you detect a part and if you are in the source and if you are holding a good part then drop the part and then go to the base, or then pick up the part, or if you detect a part and if you are in the source and if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or if you detect a part and if you are in the storage and if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then walk randomly, or then pick up the part, or if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then seek the base area, or then pick up the part, or if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or if you detect a part and if you are in the storage area and if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a detected part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are not holding any scrap parts, then move to the source area.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then go to the source.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, pick them up if detected, and if you're not holding any parts, seek to the waste area to dispose of any scrap parts you may find.",
    "technical_task": "pick up the part, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "pick up the part, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for scrap parts, pick them up, and if you find a good part, bring it to the storage area, otherwise return to the waste area if you're carrying scrap.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or then go to the source, or if you detect a part then pick up the part and then search randomly, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or then seek the source area, or if you detect a part then pick up the part and then walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then search randomly.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if so, stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for a good part and pick it up when you find it.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather as many parts as possible: first, look for scrap parts, then good parts, and bring them to the appropriate areas, while navigating the environment.",
    "technical_task": "go to the waste, or then go to the storage, or then go to the source, or then pick up the part and then go to the waste, or then search randomly, or then stop moving, or then go to the base, or then go to the construction, or then drop the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "seek the waste area, or then seek the storage area, or then seek the source area, or then pick up the part and then seek the waste area, or then walk randomly, or then freeze movement, or then seek the base area, or then seek the construction area, or then drop the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to verify if you're in the base area, and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts in the environment, pick them up, then head to the storage area to drop them off. If you find yourself in the storage area, stop moving.",
    "technical_task": "if you are in the storage then drop the part and then stop moving, or then pick up the part, or then go to the storage, or then pick up the part and then go to the source, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are in the storage area then drop the part and then freeze movement, or then pick up the part, or then seek the storage area, or then pick up the part and then seek the source area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts and bring them to the waste area, while stopping to drop them if you are holding any scrap part.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or then pick up the part and then go to the waste, or if you detect a part then go to the waste, or otherwise if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or then pick up the part and then seek the waste area, or if you detect a part then seek the waste area, or otherwise if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you have the space, and then go to the base area. If you don\u2019t find a good part, look for a scrap part and pick it up.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base, or otherwise if you detect a part and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area, or otherwise if you detect a part and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area and then stop moving, or if you find a good part, pick it up and search for the source area.",
    "technical_task": "drop the part and then stop moving, or if you detect a part then go to the source, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then freeze movement, or if you detect a part then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure the agent is in the base area before changing its internal state to seek the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and if you are holding a good part, then drop it in the storage area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part while in the source area, then stop moving if you're holding a scrap part and drop it in the waste area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the waste area and drop any scrap part you are holding.",
    "technical_task": "go to the waste, or otherwise then drop the part and then stop moving.",
    "spoon_task": "seek the waste area, or otherwise then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one and then move to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then stop moving once you are in the base area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then pick up the part and then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then pick up the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate the environment, check if you are in a specific area, pick up a part if detected, and then decide where to take it based on its type.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or if you are in the waste and if you are holding a scrap part then stop moving, or otherwise if you are in the storage and if you are holding a good part then drop the part and then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or if you are in the waste area and if you are holding a scrap part then freeze movement, or otherwise if you are in the storage area and if you are holding a good part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, stop moving. If you are not in the base area, then search for it.",
    "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and drop it in the waste area.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area when you have one, and if you find a scrap part while moving, pick it up and then start seeking the waste area.",
    "technical_task": "drop the part, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "drop the part, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are, then drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area if you are holding it. If you find a scrap part, pick it up instead.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are carrying a good part and if so, go to the base area. If you find a scrap part, then pick it up.",
    "technical_task": "if you are holding a good part then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then head to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part when you are in the waste area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it back to the base area if you are in the source area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check whether you are in the base area and, if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate towards the waste area, and if you detect a scrap part, then pick it up and continue moving towards the waste area.",
    "technical_task": "go to the waste, or if you detect a part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "seek the waste area, or if you detect a part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area. If you find a scrap part, check if you're in the waste area and drop it there. If you are holding a scrap part, go to the waste area. If not, keep searching for parts.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part and if you are holding a scrap part then go to the waste, or then pick up the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part and if you are holding a scrap part then seek the waste area, or then pick up the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and drop them in the storage area while managing scrap parts by dropping them in the waste area.",
    "technical_task": "pick up the part and then go to the storage, or then pick up the part and then go to the waste, or if you are holding a good part and if you are in the storage and if you are in the base then drop the part and then stop moving, or then drop the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or then pick up the part and then go to the source, or if you detect a part and if you are holding a good part and if you are in the source then drop the part and then go to the storage, or then pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the storage area, or then pick up the part and then seek the waste area, or if you are holding a good part and if you are in the storage area and if you are in the base area then drop the part and then freeze movement, or then drop the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or then pick up the part and then seek the source area, or if you detect a part and if you are holding a good part and if you are in the source area then drop the part and then seek the storage area, or then pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before seeking the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you have one, otherwise, check if you are holding a good part and if you are in the base area to drop it, then stop moving.",
    "technical_task": "drop the part, or if you are holding a good part and if you are in the base then drop the part and then stop moving, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "drop the part, or if you are holding a good part and if you are in the base area then drop the part and then freeze movement, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have found a good part, and if you have, then move towards the base area.",
    "technical_task": "if you are holding a good part then go to the base.",
    "spoon_task": "if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to make sure you are in the base area, holding a good part, and then move to the storage area to drop the part off.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, bring them to the waste area, and stop moving if you have a scrap part.",
    "technical_task": "if you are holding a scrap part then stop moving, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find your way to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and, if you find one, go to the storage area. If you don't find any, keep moving around.",
    "technical_task": "if you detect a part then go to the storage, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then seek the storage area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage area while also managing scrap parts by dropping them in the waste area.",
    "technical_task": "pick up the part, or if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or if you are in the source then drop the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or if you are in the source area then drop the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area and then move towards it.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you are in the source area and then move to the waste area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area if you are in the base.",
    "technical_task": "if you detect a part and if you are in the base then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the base area then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and take them to the storage area while also stopping if you encounter a scrap part.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or then go to the source, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts when you detect them, and if you are holding a part, then move to the storage area.",
    "technical_task": "pick up the part, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "pick up the part, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate toward the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are close enough to it.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up if you see them, and move to the storage area to drop them. If you find a scrap part, bring it to the waste area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move back to the base area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any detected part, and after that, go to the waste area if it's a scrap part.",
    "technical_task": "pick up the part and then go to the waste, or otherwise if you detect a part then pick up the part and then go to the source.",
    "spoon_task": "pick up the part and then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up, and bring them to the base. If you find scrap parts, drop them in the waste area.",
    "technical_task": "pick up the part, or then drop the part, or if you are holding a good part and if you are in the base then stop moving, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then drop the part, or if you are holding a good part and if you are in the base area then freeze movement, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then proceed to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area, and if you find a scrap part while moving, then pick it up and continue towards the waste area.",
    "technical_task": "go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if so, drop it in the waste area. If you are in the waste area, drop a good part if you are holding one.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you are in the waste then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area to find good parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the storage area and then if you are in the base area, move to the construction area.",
    "technical_task": "go to the storage, or otherwise if you are in the base then go to the construction.",
    "spoon_task": "seek the storage area, or otherwise if you are in the base area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one and then go to the waste area. If you are in the waste area, then drop any scrap part you are holding.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a good part, pick it up and then search for the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or if you are holding a good part and if you are in the base then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or if you are holding a good part and if you are in the base area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and holding no parts.",
    "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the base area, and if you encounter a good part along the way, pick it up and continue to the base.",
    "technical_task": "go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you find one and then move towards the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, drop it at the storage area before seeking the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you have one, go to the waste area to drop it.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste area and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the storage area before you can start seeking out any good parts.",
    "technical_task": "if you are in the storage then go to the source.",
    "spoon_task": "if you are in the storage area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and then move towards the base area.",
    "technical_task": "if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, drop it in the waste area if you are there, and stop moving if you are holding a good part.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part and if you are in the waste and if you are holding a scrap part then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part and if you are in the waste area and if you are holding a scrap part then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if one is detected, then bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and drop any good parts you may be holding.",
    "technical_task": "if you are in the storage then drop the part.",
    "spoon_task": "if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you don't find a good part, then go to the construction area and stop moving.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the source then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the source area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area if you are in the base.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part, or if you are holding a good part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part, or if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the base area if you are currently in the waste area.",
    "technical_task": "if you are in the waste then go to the base.",
    "spoon_task": "if you are in the waste area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the environment; if you find one, pick it up and then search for the base area to drop it off. If you don't, you should look around randomly.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and move towards the storage area to drop it off.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move toward the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop off a good part at the storage area, and if you cannot find it, then seek the waste area.",
    "technical_task": "drop the part and then go to the storage, or otherwise then go to the waste.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, avoid holding them, drop off any good parts at the storage, and make your way to the source area to collect more good parts.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then go to the base, or then pick up the part and then go to the storage, or if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or then pick up the part and then go to the source, or if you detect a part and if you are in the source and if you are holding a good part then drop the part and then stop moving, or then pick up the part and then search randomly, or if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving, or then pick up the part and then go to the waste, or if you detect a part and if you are in the storage and if you are holding a good part then drop the part and then go to the source, or then pick up the part and then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then seek the base area, or then pick up the part and then seek the storage area, or if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or then pick up the part and then seek the source area, or if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then freeze movement, or then pick up the part and then walk randomly, or if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement, or then pick up the part and then seek the waste area, or if you detect a part and if you are in the storage area and if you are holding a good part then drop the part and then seek the source area, or then pick up the part and then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding any part and then decide whether to keep moving or drop a part if you find one.",
    "technical_task": "if you are holding a good part then go to the storage, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts from the environment, bring them to the waste area, and make sure you stop moving if you are carrying a scrap part.",
    "technical_task": "pick up the part and then go to the waste, or then drop the part, or then go to the source, or then search randomly, or if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then drop the part, or then seek the source area, or then walk randomly, or if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to storage, and if you find scrap parts, then go to the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part and if you are in the storage area, then stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the storage area before checking for any conditions.",
    "technical_task": "if you are in the storage then stop moving.",
    "spoon_task": "if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek and explore the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to locate a good part, ensure you are in the source area, and pick it up.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, determine if you are in the waste area to drop it, and also check if you are in the base area before searching for more parts.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you are in the base then stop moving, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you are in the base area then freeze movement, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area once you are there.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if they are found, and if you don't find any, then head towards the source area to look for more.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a good part then pick up the part, or otherwise then search randomly.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the storage area, check for good parts, and if you are successful, pick up the part.",
    "technical_task": "if you are in the storage and if you detect a part then search randomly, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "if you are in the storage area and if you detect a part then walk randomly, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you see one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts if you find them, go to the waste area to drop them off, and if you are not holding any parts, search for good parts.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are in the waste then stop moving, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are in the waste area then freeze movement, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you are in the source area and then move to the waste area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, while also scanning for scrap parts during the search.",
    "technical_task": "if you are in the source then pick up the part and then go to the storage, or if you detect a part then pick up the part and then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area to drop it.",
    "technical_task": "if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect and drop scrap parts into the waste area while ensuring that you keep moving around in the environment.",
    "technical_task": "pick up the part, or then drop the part and then go to the waste, or if you detect a part then pick up the part and then go to the waste, or then drop the part and then go to the base, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or then drop the part and then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or then drop the part and then seek the base area, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, bring it to the waste area, and stop moving if you have a scrap part.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or then pick up the part, or otherwise then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or then pick up the part, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it in the storage area if you are holding it, and if you find a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then stop moving, or then drop the part and then go to the waste, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then freeze movement, or then drop the part and then seek the waste area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any good part and bring it to the base, if you are holding a good part and in the base, drop it there; otherwise, if you find a scrap part, stop moving.",
    "technical_task": "pick up the part and then go to the base, or if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part and then stop moving, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and if you are in the base area, then drop it and stop moving.",
    "technical_task": "if you detect a part and if you are in the base then pick up the part and then stop moving.",
    "spoon_task": "if you detect a part and if you are in the base area then pick up the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off. If you can't find a part, just move around randomly.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part when you are in the waste area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected, and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are holding a scrap part.",
    "technical_task": "if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, drop it if you are, and then move towards the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather good parts and drop them at the storage area while also ensuring that if you detect a scrap part, you need to drop it off at the waste area after collecting it.",
    "technical_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part; if you do, drop it off in the waste area, and if you find a good part, pick it up and then seek the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area first, and if you see a good part while moving, then go to the storage area to drop it off.",
    "technical_task": "go to the base, or otherwise if you detect a part and if you are in the source then go to the storage.",
    "spoon_task": "seek the base area, or otherwise if you detect a part and if you are in the source area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move toward the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the storage area, have a good part, and then drop the part.",
    "technical_task": "if you are in the storage and if you are holding a good part and if you detect a part then drop the part.",
    "spoon_task": "if you are in the storage area and if you are holding a good part and if you detect a part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it back to the base, but only if you are in the source area and are not holding any part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to continuously seek parts in the environment, and if you find any part, handle it accordingly.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or if you are in the source then search randomly, or if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or if you are in the waste then stop moving, or if you are in the storage then stop moving, or if you are in the base then stop moving, or if you are in the construction then search randomly, or if you are holding a good part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or if you are in the source area then walk randomly, or if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or if you are in the waste area then freeze movement, or if you are in the storage area then freeze movement, or if you are in the base area then freeze movement, or if you are in the construction area then walk randomly, or if you are holding a good part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before checking for scrap parts.",
    "technical_task": "if you are in the base then search randomly.",
    "spoon_task": "if you are in the base area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, but if you find scrap parts, bring them to the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then take it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or then go to the source, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move back to the base.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then freeze your movement once you arrive.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it to the storage area, and if you find a scrap part during this process, bring it to the waste area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and search for good parts.",
    "technical_task": "go to the source, or otherwise then search randomly.",
    "spoon_task": "seek the source area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts and if you find one, pick it up. If you're not holding a part, then seek a random area to explore.",
    "technical_task": "pick up the part, or if you detect a part then pick up the part, or if you are in the source then go to the waste, or then search randomly, or otherwise then go to the source.",
    "spoon_task": "pick up the part, or if you detect a part then pick up the part, or if you are in the source area then seek the waste area, or then walk randomly, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that has been detected in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area and have good parts before you freeze your movement.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up, and bring them to the base. If you find a scrap part, go to the waste area.",
    "technical_task": "if you are in the source then go to the base, or then pick up the part and then go to the base, or then search randomly, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or otherwise then drop the part.",
    "spoon_task": "if you are in the source area then seek the base area, or then pick up the part and then seek the base area, or then walk randomly, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment, and if you find parts, then go towards the waste area to drop any scrap parts you find.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part when you find one and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before performing any other actions.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if so, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area. If you pick up a scrap part, then seek the waste area to drop it.",
    "technical_task": "pick up the part and then go to the waste, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather good parts from the source area and drop them in the storage area. If you find any scrap parts along the way, pick them up and then go to the waste area to drop them off.",
    "technical_task": "go to the source, or if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, and if you find one then take it to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you are in the source area, and then return to the base area to drop it. If you cannot find a part, then just move randomly.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you are holding no parts, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area. If you have a scrap part and you are in the waste area, then drop the part.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, pick them up, and bring them to the waste area. Additionally, if you find a good part, you should drop it in the storage area. If you are already in the waste area, stop moving.",
    "technical_task": "pick up the part and then go to the waste, or then drop the part, or then pick up the part and then go to the waste, or if you are in the waste and if you are holding a good part and if you are in the storage then drop the part, or then drop the part and then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then pick up the part and then go to the waste, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or then pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then drop the part, or then pick up the part and then seek the waste area, or if you are in the waste area and if you are holding a good part and if you are in the storage area then drop the part, or then drop the part and then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then pick up the part and then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts and bring them back to the storage area, and if you find a scrap part, you need to drop it in the waste area.",
    "technical_task": "go to the source, or then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and if so, prepare to drop any good parts you may be holding.",
    "technical_task": "if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and scrap parts, and depending on what you find, either pick them up or go to the appropriate area.",
    "technical_task": "if you detect a part then go to the waste, or if you are holding a scrap part and if you are in the source then go to the waste, or if you are holding a good part and if you are in the base then stop moving, or if you are holding a good part and if you are in the storage then stop moving, or if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part and if you are in the source then go to the base, or if you are holding a good part and if you are in the storage then stop moving, or if you are holding a scrap part and if you are in the base then go to the waste, or if you detect a part and if you are in the construction then go to the source, or if you detect a part and if you are in the storage then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then seek the waste area, or if you are holding a scrap part and if you are in the source area then seek the waste area, or if you are holding a good part and if you are in the base area then freeze movement, or if you are holding a good part and if you are in the storage area then freeze movement, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part and if you are in the source area then seek the base area, or if you are holding a good part and if you are in the storage area then freeze movement, or if you are holding a scrap part and if you are in the base area then seek the waste area, or if you detect a part and if you are in the construction area then seek the source area, or if you detect a part and if you are in the storage area then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off. If you can't find a good part, but you do find a scrap part, head to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you detect a part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you detect a part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then prepare to drop any good part you might be holding.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area, or if you find a scrap part, then pick it up.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are at the source area and then move to the base.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you find a scrap part, then stop moving.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part then drop the part and then stop moving.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, and if both conditions are met, then move to the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a detected part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you find a scrap part, drop it and stop moving.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then drop it in the storage area after reaching the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part in the waste area if you are holding one, and if you are in the base area, then you should seek the source area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and bring it to the waste area if you are holding it and in the waste area; if not, find the waste area.",
    "technical_task": "pick up the part, or otherwise if you are holding a scrap part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving.",
    "spoon_task": "pick up the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then proceed to seek the storage area to drop off any parts.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if one is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the storage area, and once you are there, stop moving.",
    "technical_task": "if you are in the storage then stop moving.",
    "spoon_task": "if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and if you find one then bring it to the storage area. If you don't find a part, keep moving until you detect one.",
    "technical_task": "if you detect a part and if you are holding a good part then go to the storage, or if you detect a part and if you are in the source then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area, or if you detect a part and if you are in the source area then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, and if you do, move to the waste area. If you don't have a scrap part, then pick up any good parts you find.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if you find one, and if you're holding a scrap part, then check if you're in the waste area and drop it there, otherwise seek the waste area.",
    "technical_task": "pick up the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you have a good part while you are in the base area, and then prepare to move to the storage area.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and stop moving if you are already in the waste area, otherwise, search for the waste area.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, then move to the waste area, and stop once you reach the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find scrap parts, drop them in the waste area and then stop moving.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part at the waste area if you are currently holding one.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area if you are there, otherwise check if you are holding a scrap part and then move to the waste area.",
    "technical_task": "drop the part, or if you are holding a scrap part and if you are in the waste then go to the waste, or otherwise then drop the part.",
    "spoon_task": "drop the part, or if you are holding a scrap part and if you are in the waste area then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one, and then move back to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then drop it in the storage area after ensuring you are holding it and are in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are in the source area and you are not currently holding any part.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to locate a scrap part, pick it up if you find one, and then seek the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area before stopping movement.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base, but if you find a scrap part, drop it immediately.",
    "technical_task": "if you detect a part then pick up the part, or then go to the base, or if you are holding a scrap part then drop the part and then stop moving, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or then seek the base area, or if you are holding a scrap part then drop the part and then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are carrying a good part, if you are in the base area, and if a part is detected before you start seeking the storage area to drop the good part.",
    "technical_task": "if you are holding a good part and if you are in the base and if you detect a part then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you detect a part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then head to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts from the environment and deliver them to the storage area. If you find a scrap part, pick it up, and bring it to the waste area instead.",
    "technical_task": "if you are holding a good part then go to the storage, or if you detect a part then pick up the part, or if you are holding a scrap part then go to the waste, or then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part then pick up the part, or if you are holding a scrap part then seek the waste area, or then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area. If you do not have a scrap part, then search for scrap parts.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then decide to stay still.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, bring them to the waste area if you find them, and stop moving once you are holding a scrap part.",
    "technical_task": "if you are holding a scrap part then stop moving, or then drop the part and then go to the waste, or if you detect a part and if you are in the waste then pick up the part, or then go to the source, or then drop the part and then go to the base, or then search randomly, or if you are in the source then go to the waste, or otherwise then stop moving.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or then drop the part and then seek the waste area, or if you detect a part and if you are in the waste area then pick up the part, or then seek the source area, or then drop the part and then seek the base area, or then walk randomly, or if you are in the source area then seek the waste area, or otherwise then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and, if you are, drop any scrap parts you are holding and then stop moving.",
    "technical_task": "if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then head towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts, bring any scrap parts to the waste area, and ensure that you hold onto any good parts you find while returning to the base.",
    "technical_task": "pick up the part and then go to the base, or if you are holding a scrap part then go to the waste, or if you detect a part then search randomly, or then go to the source, or if you are holding a good part and if you are in the base and if you are holding a scrap part then stop moving, or then go to the storage, or if you are in the construction and if you are holding a good part and if you detect a part then stop moving, or then go to the construction, or if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the base area, or if you are holding a scrap part then seek the waste area, or if you detect a part then walk randomly, or then seek the source area, or if you are holding a good part and if you are in the base area and if you are holding a scrap part then freeze movement, or then seek the storage area, or if you are in the construction area and if you are holding a good part and if you detect a part then freeze movement, or then seek the construction area, or if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and bring it to the waste area, but if you already have a scrap part, you should drop it there and stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and move to the storage area.",
    "technical_task": "if you are in the waste then go to the storage.",
    "spoon_task": "if you are in the waste area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area and then seek out the source area for more good parts.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the source.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the base area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the base then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts while avoiding scrap parts, and if you find a good part, retrieve it and head straight to the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area to drop any good parts you might have.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and drop them in the waste area if you are holding one, or move towards the waste area otherwise.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you are in the waste then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you are in the waste area then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts, drop them at the waste area if you are holding one, and if no scrap parts are found, keep searching for good parts while moving between areas.",
    "technical_task": "pick up the part, or then drop the part, or if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then search randomly, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "pick up the part, or then drop the part, or if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then walk randomly, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it at the storage area, and if you encounter a scrap part, go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or if you are holding a scrap part then go to the waste, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or if you are holding a scrap part then seek the waste area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it back to the base area, and if you are holding a good part but not in the base area, then stop moving.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving, or then pick up the part, or otherwise then drop the part and then go to the base.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement, or then pick up the part, or otherwise then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, then drop it and go to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and scrap parts, bring good parts to the base, and bring scrap parts to the waste area. If you can't find any parts, keep moving around randomly.",
    "technical_task": "if you are holding a good part then go to the base, or if you are holding a scrap part then go to the waste, or if you detect a part and if you are holding a good part and if you are in the base then stop moving, or if you detect a part then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part then go to the source, or if you are in the source and if you are holding a good part and if you are in the base then stop moving, or if you are in the waste then stop moving, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part then search randomly.",
    "spoon_task": "if you are holding a good part then seek the base area, or if you are holding a scrap part then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the base area then freeze movement, or if you detect a part then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part then seek the source area, or if you are in the source area and if you are holding a good part and if you are in the base area then freeze movement, or if you are in the waste area then freeze movement, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part and then seek the waste area.",
    "technical_task": "drop the part and then go to the waste.",
    "spoon_task": "drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you have one then go to the storage area and drop it there.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up. If you cannot find a part, then just move around.",
    "technical_task": "pick up the part, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then either go to the waste area or stop moving if you find a good part.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or if you are holding a good part then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or if you are holding a good part then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one and are in the base area, then drop it and stop moving.",
    "technical_task": "if you detect a part and if you are in the base then drop the part and then stop moving, or otherwise if you detect a part then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the base area then drop the part and then freeze movement, or otherwise if you detect a part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while ensuring you stop moving when holding a scrap part.",
    "technical_task": "if you are holding a scrap part then stop moving, or if you detect a part then pick up the part and then go to the waste, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or if you detect a part then pick up the part and then seek the waste area, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and then pick it up if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part once you detect it in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you are holding it, go to the waste area to drop it.",
    "technical_task": "pick up the part, or otherwise if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then go to the waste.",
    "spoon_task": "pick up the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and then seek the storage area to drop it.",
    "technical_task": "if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any scrap part in the waste area, and if you are not holding any parts, then pick up a good part if you find one.",
    "technical_task": "drop the part and then go to the waste, or if you are holding a good part and if you are in the storage then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the waste area, or if you are holding a good part and if you are in the storage area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for any parts, pick them up if you find them, and if you hold a scrap part, bring it to the waste area. If you find a good part, bring it to the storage area, and if you're not doing anything else, keep moving randomly.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then pick up the part and then search randomly, or then pick up the part and then go to the storage, or then search randomly, or if you detect a part then pick up the part, or then go to the source, or then drop the part and then go to the storage, or then drop the part and then go to the waste, or then stop moving, or if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then pick up the part and then walk randomly, or then pick up the part and then seek the storage area, or then walk randomly, or if you detect a part then pick up the part, or then seek the source area, or then drop the part and then seek the storage area, or then drop the part and then seek the waste area, or then freeze movement, or if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to fetch any good part and if you find it, bring it to the storage area and then stop moving.",
    "technical_task": "pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then head towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect any good or scrap parts you find. If you have a good part, drop it in the storage area, but if you have a scrap part, drop it in the waste area. If you don't find parts, walk around randomly until you do.",
    "technical_task": "pick up the part, or then drop the part, or then pick up the part, or if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or then pick up the part, or then drop the part, or then pick up the part, or if you detect a part then search randomly, or if you are in the waste then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then drop the part, or then pick up the part, or if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or then pick up the part, or then drop the part, or then pick up the part, or if you detect a part then walk randomly, or if you are in the waste area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and if you find one, pick it up and then head to the storage area.",
    "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage area, while also ensuring that if you find any scrap parts, you stop moving.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part and if you are in the storage and if you detect a part then stop moving, or then drop the part and then go to the source, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part and if you are in the storage area and if you detect a part then freeze movement, or then drop the part and then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if it's detected, then bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and bring it to the waste area if you are in the source area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts, and if you detect one, bring it to the waste area, otherwise continue moving in search of good parts.",
    "technical_task": "pick up the part and then go to the waste, or then pick up the part and then go to the source, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the waste area, or then pick up the part and then seek the source area, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area after picking it up.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and holding no parts.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts. If you find one, pick it up and then move towards the waste area. If you are already in the waste area, drop the scrap part.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part and if you are in the waste then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part and if you are in the waste area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, hold it, and then move to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you have a scrap part and are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then go to the waste, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then seek the waste area, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move back to the base. If you find a scrap part, stop moving and drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you detect a part and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you detect a part and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect it.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area and pick up a scrap part if you find one, otherwise keep searching.",
    "technical_task": "if you are in the source then search randomly, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area then walk randomly, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area; if you have a good part and you're in the storage area, then drop it there. If you find a scrap part, make sure to go to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving, or then go to the storage, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then go to the waste.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement, or then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any good part you find, then move to the storage area and drop it there.",
    "technical_task": "pick up the part, or otherwise then drop the part and then go to the storage.",
    "spoon_task": "pick up the part, or otherwise then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, ensure you are holding a good part, and then drop it.",
    "technical_task": "if you are in the storage and if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are in the storage area and if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area, but if you are already holding a scrap part and are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part then stop moving, or if you detect a part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or if you detect a part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if you find one, and if you find a scrap part, pick it up and then move towards the waste area.",
    "technical_task": "pick up the part, or if you detect a part then pick up the part, or then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "pick up the part, or if you detect a part then pick up the part, or then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate towards the base area and if you encounter a good part, pick it up and then seek the storage area to drop it off.",
    "technical_task": "go to the base, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "seek the base area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and if you find a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a good part then go to the storage, or if you detect a part and if you are in the source then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part and if you are in the source area then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, drop them in the waste area if you find any, and then return to collect more parts.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste then pick up the part and then go to the source, or then pick up the part, or then drop the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste area then pick up the part and then seek the source area, or then pick up the part, or then drop the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have picked up a scrap part, and if so, move towards the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area. If you are already in the waste area and holding a scrap part, drop it there.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it in the storage area. If you are not holding a good part, then seek the base area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise then go to the base.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area to drop it.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it and then move towards the base area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the base.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the base area, and if you can't drop it, then look for a scrap part to pick up.",
    "technical_task": "drop the part and then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "drop the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you're holding one, and if not, move to search for more parts.",
    "technical_task": "drop the part, or if you are holding a scrap part then go to the source, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or if you are holding a scrap part then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and if you are holding one, seek the waste area. If you don't detect a part, then move randomly.",
    "technical_task": "pick up the part, or then go to the waste, or then search randomly, or then drop the part and then go to the base, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "pick up the part, or then seek the waste area, or then walk randomly, or then drop the part and then seek the base area, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check for a good part, pick it up if you find one, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area before seeking parts.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, drop them in the waste area when you find them, if you are holding a good part then drop it in the storage area, and if you are not in any important area then move towards the source area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part and then go to the storage, or then go to the source, or otherwise if you detect a part then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part and then seek the storage area, or then seek the source area, or otherwise if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and holding a good part, and if so, drop it there. If not, seek the source area to find good parts.",
    "technical_task": "if you are in the base and if you are holding a good part then drop the part, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, then if you are done, drop it in the storage area before stopping.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area to drop off any good parts.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area and check for good parts. If you find a good part, then pick it up.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if you find one, and if you do, then go to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, then go to the base. If you encounter a scrap part, check where you should drop it.",
    "technical_task": "pick up the part and then go to the base, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then go to the source.",
    "spoon_task": "pick up the part and then seek the base area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the base only if you are holding a good part and are currently in the storage area.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, make sure you are not holding any parts, and then go to the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the source and if you detect a part then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the source area and if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then seek the waste area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you don't find any scrap parts, then seek out the source area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then pick up the part and then go to the waste, or then drop the part, or otherwise if you are in the source then search randomly.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then pick up the part and then seek the waste area, or then drop the part, or otherwise if you are in the source area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then take it back to the base area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment, and if you detect a good part, pick it up and then go to the storage area.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then seek the storage area.",
    "technical_task": "if you are in the waste then go to the storage.",
    "spoon_task": "if you are in the waste area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, ensure you are not holding anything else, and drop them at the waste area if you are in that location.",
    "technical_task": "if you are in the waste and if you are holding a scrap part and if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part and if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before performing any other actions.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the environment, pick it up, and then head to the storage area.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are currently holding one.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and stop moving if you are in the storage area. If you find a scrap part, drop it in the waste area.",
    "technical_task": "pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or if you are in the storage then stop moving, or otherwise if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or if you are in the storage area then freeze movement, or otherwise if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you are not holding any parts, and if both conditions are met, then stay still.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if detected, and if not, check if you are in the source area or the construction area to decide where to go next.",
    "technical_task": "pick up the part, or if you are in the source then go to the waste, or otherwise if you are in the construction then go to the source.",
    "spoon_task": "pick up the part, or if you are in the source area then seek the waste area, or otherwise if you are in the construction area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and if you find one, pick it up and head back to the storage area.",
    "technical_task": "pick up the part, or if you detect a part then pick up the part and then go to the storage, or then drop the part and then go to the storage, or then drop the part, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or if you detect a part then pick up the part and then seek the storage area, or then drop the part and then seek the storage area, or then drop the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect both good and scrap parts, drop the good parts at the base, and bring the scrap parts to the waste area.",
    "technical_task": "pick up the part, or then drop the part and then go to the storage, or if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part, or then drop the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part, or then pick up the part and then go to the source, or if you detect a part and if you are in the source and if you are holding a good part then pick up the part, or then pick up the part and then search randomly, or if you are holding a good part and if you are holding a scrap part and if you are in the storage then drop the part, or otherwise then pick up the part and then go to the waste.",
    "spoon_task": "pick up the part, or then drop the part and then seek the storage area, or if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part, or then drop the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part, or then pick up the part and then seek the source area, or if you detect a part and if you are in the source area and if you are holding a good part then pick up the part, or then pick up the part and then walk randomly, or if you are holding a good part and if you are holding a scrap part and if you are in the storage area then drop the part, or otherwise then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area, and if you encounter a scrap part, pick it up to avoid leaving it behind.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area after picking it up.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts and bring them to the storage area.",
    "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the source, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the source area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and drop it off at the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you are holding a scrap part, bring it to the waste area. Additionally, if you find a good part, just drop it at the storage area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you detect a part then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you detect a part then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up to bring it back.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move the robot to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, stop moving if you have one, or move to the waste area if you find a scrap part and are not holding any parts, else randomly search the environment.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving, or then go to the waste, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement, or then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to look for the base area and move towards it.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and drop it in the waste area, but if you find a good part then pick it up.",
    "technical_task": "if you are in the waste then drop the part and then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are in the waste area then drop the part and then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and drop them off at the storage area when you find one, or if you find a scrap part, then pick it up.",
    "technical_task": "if you are in the storage then stop moving, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the storage area then freeze movement, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the environment. If you find one, pick it up.",
    "technical_task": "search randomly, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are currently holding one.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring scrap parts to the waste area only if you are not holding any good parts and you are in the source area.",
    "technical_task": "if you are in the source and if you are holding a scrap part and if you are holding a good part then go to the waste.",
    "spoon_task": "if you are in the source area and if you are holding a scrap part and if you are holding a good part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move randomly within the environment.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and then move towards the base.",
    "technical_task": "if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you find one and are holding it, then drop it in the waste area. Move to the waste area if you are holding it, or search for more scrap parts if you are not.",
    "technical_task": "if you detect a part and if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part and then go to the waste, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part and then seek the waste area, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you do not find one, then seek the source area and stop once you've found one.",
    "technical_task": "search randomly, or if you detect a part and if you are holding a good part and if you are in the source then stop moving, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or if you detect a part and if you are holding a good part and if you are in the source area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then freeze movement.",
    "technical_task": "if you detect a part then pick up the part and then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, but only if you are in the source area and you can detect it.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the waste area and, if you find a scrap part along the way, pick it up and then proceed to the waste area to drop it.",
    "technical_task": "go to the waste, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you can't find any good parts, then just look for scrap parts.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you detect a part then search randomly.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it in the storage area and then seek the construction area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the construction, or otherwise then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the construction area, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and if you are holding a scrap part, then go to the waste area and drop it.",
    "technical_task": "pick up the part, or if you are holding a scrap part and if you are in the waste then drop the part, or if you detect a part then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or if you are holding a scrap part and if you are in the waste area then drop the part, or if you detect a part then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part only when you are in the source area, and after picking it up, return to the base area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are holding one. If you are in the storage area, pick up a part and then go back to the base.",
    "technical_task": "drop the part, or otherwise if you are in the storage then pick up the part and then go to the base.",
    "spoon_task": "drop the part, or otherwise if you are in the storage area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the waste area and, if you find a scrap part along the way, pick it up and hold it.",
    "technical_task": "if you are in the waste then stop moving, or otherwise if you detect a part and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise if you detect a part and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area. If not possible, just find a random area to search.",
    "technical_task": "pick up the part and then go to the waste, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then stop moving; otherwise, just seek the base area.",
    "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather good parts and bring them to the storage area while discarding any scrap parts you find.",
    "technical_task": "pick up the part and then go to the storage, or then go to the source, or if you detect a part then pick up the part, or if you are in the waste then stop moving, or if you are holding a scrap part then drop the part, or if you are in the source and if you are holding a good part then go to the storage, or if you are holding a good part then drop the part, or if you detect a part and if you are in the waste then stop moving, or if you are in the storage then drop the part, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then seek the source area, or if you detect a part then pick up the part, or if you are in the waste area then freeze movement, or if you are holding a scrap part then drop the part, or if you are in the source area and if you are holding a good part then seek the storage area, or if you are holding a good part then drop the part, or if you detect a part and if you are in the waste area then freeze movement, or if you are in the storage area then drop the part, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop off any good parts at the storage area if you are holding one, and if you are not holding a part, then pick up any detected part.",
    "technical_task": "drop the part, or otherwise if you are holding a good part then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, and if you don't have any good parts, search around.",
    "technical_task": "pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one, then bring it to the base.",
    "technical_task": "if you are holding a good part then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and if you are holding a good part, then stop moving.",
    "technical_task": "if you are in the storage and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the storage area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part only when you are in the source area and holding nothing.",
    "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part when you are in the source area, and if you don't find one, then start seeking the waste area.",
    "technical_task": "if you are in the source then go to the source, or otherwise if you are in the base then go to the waste.",
    "spoon_task": "if you are in the source area then seek the source area, or otherwise if you are in the base area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if the agent is in the waste area, and if it is, then stop moving. If not in the waste area, make your way there.",
    "technical_task": "if you are in the waste then stop moving, or otherwise if you are in the construction then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise if you are in the construction area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the base. If you pick up a scrap part, you should head to the waste area.",
    "technical_task": "if you are in the source then go to the base, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are in the source area then seek the base area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you can't find any good parts, then stop moving. If you do find a bad part, then take it to the waste area.",
    "technical_task": "if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and stop moving if you are in the storage area; if you are not in the storage area, seek the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then stop moving, or if you detect a part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then freeze movement, or if you detect a part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part only if you are in the source area, and then move towards the waste area.",
    "technical_task": "if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it to the storage area if you are currently in the source area.",
    "technical_task": "if you are in the source and if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area. If you find a good part, pick it up and move towards the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you find scrap parts, you should drop them in the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you are holding a scrap part, go to the waste area and drop it.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part, or otherwise then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to stay still in your current location.",
    "technical_task": "stop moving.",
    "spoon_task": "freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then freeze movement.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and then bring them to the base, while also checking if you have scrap parts to bring to the waste area if needed.",
    "technical_task": "if you are in the source then go to the storage, or if you detect a part then pick up the part, or then drop the part, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "if you are in the source area then seek the storage area, or if you detect a part then pick up the part, or then drop the part, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then go to the waste area. If you're already holding a scrap part and in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you detect a part and if you are in the waste and if you are holding a scrap part then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part and if you are in the waste area and if you are holding a scrap part then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area.",
    "technical_task": "if you are in the source then pick up the part.",
    "spoon_task": "if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area, then drop the part. If you don't have a good part or are not in the base area, move to the storage area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then stop moving, or then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then freeze movement, or then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to locate any scrap part, pick it up if found, and then move to the waste area to drop it off.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then pick up the part and then search randomly, or then search randomly, or otherwise if you detect a part then search randomly.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then pick up the part and then walk randomly, or then walk randomly, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good part you are holding, and if you can't drop it, then seek the base area.",
    "technical_task": "drop the part and then go to the storage, or if you are holding a good part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you are holding a good part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate the environment to the source area, pick up a scrap part if you encounter one, and then continue to seek the waste area.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the base, while avoiding scrap parts. If you detect scrap parts, you should go to the waste area.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a good part then drop the part, or then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then go to the waste, or if you detect a part and if you are holding a good part and if you are in the base then drop the part, or then go to the construction, or if you detect a part and if you are holding a scrap part and if you are in the source then drop the part, or then search randomly, or if you detect a part and if you are in the source and if you are holding a good part then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then drop the part, or then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or then seek the construction area, or if you detect a part and if you are holding a scrap part and if you are in the source area then drop the part, or then walk randomly, or if you detect a part and if you are in the source area and if you are holding a good part then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any scrap parts you find and take them to the waste area, making sure to stop moving if you are in the waste area.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part then stop moving, or then drop the part and then go to the base, or then pick up the part and then go to the source, or otherwise if you are in the waste then stop moving.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part then freeze movement, or then drop the part and then seek the base area, or then pick up the part and then seek the source area, or otherwise if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area and stop moving once you get there.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and drop them at the storage area while managing the collection of scrap parts and ensuring you stop moving if you find any.",
    "technical_task": "pick up the part, or if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part, or then pick up the part, or if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part, or then pick up the part, or if you detect a part and if you are in the source and if you are holding a good part then drop the part, or then pick up the part, or if you are in the base and if you are holding a good part and if you are in the waste then drop the part, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are holding a good part then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part, or then pick up the part, or if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part, or then pick up the part, or if you detect a part and if you are in the source area and if you are holding a good part then drop the part, or then pick up the part, or if you are in the base area and if you are holding a good part and if you are in the waste area then drop the part, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when one is detected, then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and stop moving. If you cannot find a good part, just move randomly.",
    "technical_task": "if you detect a part then stop moving, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then freeze movement, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part and bring it to the storage area if you find a good part, but if you are holding a scrap part, drop it at the waste area.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part and if you are in the storage then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part and if you are in the storage area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then go to the storage area. If you are in the waste area, then go to the base area.",
    "technical_task": "if you are in the base then go to the storage, or otherwise if you are in the waste then go to the base.",
    "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you are in the waste area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area and then move to it.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for a good part, and if you find one, you need to head towards the storage area. If you are holding a good part and are in the base area, then stop moving.",
    "technical_task": "if you are holding a good part then stop moving, or otherwise if you detect a part and if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are holding a good part then freeze movement, or otherwise if you detect a part and if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you find one, then go to the waste area. If you are already in the waste area, stop moving.",
    "technical_task": "if you detect a part then go to the waste, or if you are in the waste then stop moving, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "if you detect a part then seek the waste area, or if you are in the waste area then freeze movement, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts in the environment and bring them to the storage area. If you find a scrap part, pick it up and then seek the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a scrap part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while also seeking good parts to bring them to the storage area if you find any.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or if you are holding a good part then go to the storage, or then go to the source, or then pick up the part, or if you detect a part then pick up the part and then search randomly, or then drop the part, or if you are in the waste then stop moving, or then go to the construction, or then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or if you are holding a good part then seek the storage area, or then seek the source area, or then pick up the part, or if you detect a part then pick up the part and then walk randomly, or then drop the part, or if you are in the waste area then freeze movement, or then seek the construction area, or then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you have one, then go to the waste area to drop it.",
    "technical_task": "if you detect a part and if you are holding a scrap part then drop the part, or then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then drop the part, or then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part from the source area and bring it back to the base, ensuring that you are not carrying any scrap parts while in the process.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and stop moving if you are.",
    "technical_task": "if you are in the storage then stop moving.",
    "spoon_task": "if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts, and if you find one, drop it at the storage area. If you're in the construction area, then randomly walk around.",
    "technical_task": "if you are in the construction then search randomly, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you are in the construction area then walk randomly, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you find a scrap part, put it down and search for the waste area to drop it.",
    "technical_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then if you have a good part, head towards the base area.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify a location in the base where you can drop a good part, and if you have a good part, then drop it there.",
    "technical_task": "if you are in the storage then stop moving, or if you are holding a good part and if you are in the base and if you are in the storage then drop the part, or otherwise then go to the storage.",
    "spoon_task": "if you are in the storage area then freeze movement, or if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off at the storage area only when you are holding it and in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it back to the base, and stop moving if you are holding a scrap part.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the base then drop the part and then stop moving, or if you are holding a good part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the base area then drop the part and then freeze movement, or if you are holding a good part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you are holding a good part, and then proceed to drop it off at the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area, or if not, pick up any detected scrap parts.",
    "technical_task": "drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area, holding a good part, and then prepare to move to the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head towards the base. If you don\u2019t find a good part, then just seek the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are in the waste then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area only if you have found a good part and you are currently in the base area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, move to the storage area; otherwise, if you find a good part, pick it up and then go to the construction area.",
    "technical_task": "if you are in the base then go to the storage, or otherwise if you detect a part then pick up the part and then go to the construction.",
    "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area. If at any point you detect a scrap part, you should stop moving.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when it is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste, but if you are already holding a scrap part then drop it at the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage area, while ensuring you stop if you're already holding a scrap part in the waste area.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part and if you are in the storage then stop moving, or if you are holding a scrap part then stop moving, or if you detect a part and if you are in the source and if you are holding a good part then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part and if you are in the storage area then freeze movement, or if you are holding a scrap part then freeze movement, or if you detect a part and if you are in the source area and if you are holding a good part then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, but if you detect a good part, then pick it up, and if you are already in the waste area, stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then pick up the part and then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then pick up the part and then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if one is detected, drop it in the storage area if you are in that area, and if not, move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you're in the base area and, if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are holding a good part and then move towards the base area.",
    "technical_task": "if you are holding a good part and if you are in the storage then go to the base.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment, pick up any scrap parts you find, and if you have one, take it to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or if you detect a part then pick up the part and then go to the waste, or if you are in the waste then drop the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or if you are in the waste area then drop the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are within the base area, holding a good part, then proceed to freeze your movement.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to keep searching for good parts. If you find one, head towards the storage area to drop it off.",
    "technical_task": "go to the source, or if you detect a part then go to the storage, or otherwise if you are in the storage then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then seek the storage area, or otherwise if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and bring them to the storage area while ensuring that you avoid scrap parts.",
    "technical_task": "pick up the part, or then go to the storage, or if you detect a part then pick up the part and then go to the storage, or then drop the part and then go to the storage, or then go to the source, or then pick up the part, or then go to the storage, or if you are holding a good part then drop the part and then go to the storage, or then drop the part and then go to the source, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or then drop the part and then seek the storage area, or then seek the source area, or then pick up the part, or then seek the storage area, or if you are holding a good part then drop the part and then seek the storage area, or then drop the part and then seek the source area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part whenever you find one, and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the storage area, and if you reach it, stop moving.",
    "technical_task": "if you are in the storage and if you are in the base then stop moving.",
    "spoon_task": "if you are in the storage area and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you find a scrap part, pick it up and then go to the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area, and if you find a good part along the way, pick it up.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and bring it to the waste area. If you are in the waste area, then drop the scrap part.",
    "technical_task": "if you detect a part and if you are holding a scrap part then drop the part, or if you are holding a scrap part then pick up the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then drop the part, or if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have found in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up a scrap part, then bring it to the waste area. If you are in the waste area, stop moving.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or then go to the waste, or otherwise then drop the part and then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or then seek the waste area, or otherwise then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you encounter a scrap part, then drop it immediately.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any parts, pick them up if detected, and if you are holding a scrap part, then head to the waste area to drop it.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part then pick up the part, or then pick up the part and then go to the source, or if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then pick up the part, or then pick up the part and then seek the source area, or if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, drop it if you are at the storage area, and if not, search for scrap parts.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and then move towards the base area.",
    "technical_task": "if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and confirm that you are not holding any scrap parts before moving around.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then search randomly.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, if you find one, then stop moving once you've dropped it.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for both good and scrap parts, pick them up if found, and bring good parts to the base while discarding scrap parts in the waste area.",
    "technical_task": "pick up the part and then go to the base, or then pick up the part and then go to the waste, or then drop the part and then go to the storage, or then drop the part and then go to the waste, or then pick up the part, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the base area, or then pick up the part and then seek the waste area, or then drop the part and then seek the storage area, or then drop the part and then seek the waste area, or then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head to the storage area to drop it off. If you encounter a scrap part while moving to the storage area, pick it up instead and then proceed to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage and if you are holding a good part and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area and if you are holding a good part and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base, but if you find a scrap part, then drop it at the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the base and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the base area and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part, then pick it up and go to the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area. If you find a scrap part, then stop moving once you are in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and drop it in the storage area. If not, check if you are holding a scrap part and drop it in the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction> <!-- dropping in the storage will be implicitly understood -->\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction> <!-- dropping in the waste will be implicitly understood -->\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the base area. If you can't find a good part, then just move randomly.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area.",
    "technical_task": "if you are in the source then pick up the part.",
    "spoon_task": "if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up good parts and then seek the base area to drop them off.",
    "technical_task": "pick up the part and then go to the base, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the base area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it at the base, and if you detect a scrap part, pick it up and then seek waste area.",
    "technical_task": "if you are in the base then stop moving, or if you detect a part and if you are holding a scrap part and if you are in the waste then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are in the base area then freeze movement, or if you detect a part and if you are holding a scrap part and if you are in the waste area then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then prepare to look for parts.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, and if you do, then drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find them, bring them to storage, and stop moving if you're already at the storage area.",
    "technical_task": "go to the storage, or if you detect a part then pick up the part and then go to the storage, or then go to the source, or then drop the part and then go to the storage, or if you are in the storage then stop moving, or if you are holding a good part then go to the storage, or if you detect a part and if you are holding a good part and if you are in the storage then stop moving, or otherwise then pick up the part.",
    "spoon_task": "seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or then seek the source area, or then drop the part and then seek the storage area, or if you are in the storage area then freeze movement, or if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a good part and if you are in the storage area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area before dropping it. If you don't have a good part, you should look for one. If at any time you find a scrap part, you should pick it up.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving, or then pick up the part and then go to the source, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement, or then pick up the part and then seek the source area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are holding one, and if not, check if you're in the base area and then seek the waste area to explore.",
    "technical_task": "drop the part, or if you are in the base then go to the waste, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "drop the part, or if you are in the base area then seek the waste area, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment, bring scrap parts to the waste area, and stop moving when you have a good part.",
    "technical_task": "if you are holding a good part then stop moving, or if you are holding a scrap part then go to the waste, or then pick up the part, or otherwise if you detect a part and if you are in the source and if you are holding a scrap part then search randomly.",
    "spoon_task": "if you are holding a good part then freeze movement, or if you are holding a scrap part then seek the waste area, or then pick up the part, or otherwise if you detect a part and if you are in the source area and if you are holding a scrap part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part once you detect it.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts and, upon finding one, drop it in the waste area. If you are not holding a scrap part, keep looking for good parts. When you find a good part, bring it to the base.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or then search randomly, or otherwise then go to the source.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or then walk randomly, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the source area, pick up any good parts you find, and stop moving if you reach the waste area.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or otherwise then go to the waste.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment. If you find a part, go to the base area.",
    "technical_task": "search randomly, or if you detect a part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or if you detect a part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part instead, go to the waste area and stop moving.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then stop moving, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then freeze movement, or then pick up the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you find one and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the waste area, then stop moving. If you are holding a good part, then move to the storage area. Otherwise, drop any part you might be holding.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, make sure that you are not holding any parts, and then head towards the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the source then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the source area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you find a good part, pick it up and then go to the base area.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then go to the storage area; if you are not in the base area, check if you detect a good part, pick it up, and then head to the base.",
    "technical_task": "if you are in the base then go to the storage, or otherwise if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and bring them to the storage area. If you encounter scrap parts, those should be dropped off in the waste area. You should always be prepared to stop moving once certain conditions are met.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part and then go to the source, or if you are in the base then drop the part, or if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you detect a part then pick up the part, or if you are in the source and if you are holding a scrap part then drop the part and then go to the waste, or if you are in the storage then drop the part, or if you are holding a good part and if you are in the storage then drop the part and then stop moving, or if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part and then seek the source area, or if you are in the base area then drop the part, or if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you detect a part then pick up the part, or if you are in the source area and if you are holding a scrap part then drop the part and then seek the waste area, or if you are in the storage area then drop the part, or if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and bring it to the storage area if you're in the base area.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and, if you are, move towards the base area. If you detect a part, pick it up.",
    "technical_task": "if you are holding a good part then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you encounter in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the base area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and search for parts to pick up, while ensuring that you move towards the source area if you are not holding any parts.",
    "technical_task": "go to the source, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, while also ensuring that if you hold a scrap part, you will drop it at the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then pick up the part and then go to the waste, or otherwise if you are in the waste and if you are holding a scrap part and if you detect a part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then pick up the part and then seek the waste area, or otherwise if you are in the waste area and if you are holding a scrap part and if you detect a part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part when you are in the waste area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move randomly around the environment.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and, if you find one, drop it in the waste area and then seek the source area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area, then seek to the base area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts in the environment, pick them up if you find any, drop them at the storage area, and if you find scrap parts, bring them to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or then go to the source, or then drop the part and then go to the storage, or then go to the waste, or then drop the part, or if you detect a part then pick up the part and then go to the waste, or then stop moving, or then pick up the part and then go to the base, or then search randomly, or then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then seek the source area, or then drop the part and then seek the storage area, or then seek the waste area, or then drop the part, or if you detect a part then pick up the part and then seek the waste area, or then freeze movement, or then pick up the part and then seek the base area, or then walk randomly, or then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, hold it, and then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and drop them in the waste area while also being ready to stop if you find a good part.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or then pick up the part and then search randomly, or otherwise if you detect a part and if you are holding a good part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or then pick up the part and then walk randomly, or otherwise if you detect a part and if you are holding a good part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it at the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area, and if you do not have a good part, just pick up any part you find.",
    "technical_task": "drop the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, then head to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it in the storage area, and if you have a scrap part, go to the waste area to drop it.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and drop it in the waste area, but first, if you are in the waste area, stop moving.",
    "technical_task": "if you are in the waste then stop moving, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find parts and drop them off in the storage area if you are in the base, or if you encounter a scrap part, go to the waste area.",
    "technical_task": "if you are in the base then go to the storage, or if you detect a part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, and if you find one then drop it off in the storage area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and, if you are, then take no action and stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but only if you are in the source area and holding a good part.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, if you are holding a good part, and if you have space to carry it, then move to the storage area to drop it off.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the base only if you are not already holding a scrap part.",
    "technical_task": "if you are holding a good part and if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a good part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part, pick it up, and then head to the storage area to drop it. If you cannot find a good part, keep searching for scrap parts.",
    "technical_task": "if you detect a part then go to the storage, or then pick up the part and then go to the storage, or then drop the part, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then seek the storage area, or then pick up the part and then seek the storage area, or then drop the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and if you find one then bring it to the waste area, and if you are holding a scrap part while also in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and if you find one, go to the storage area to drop it off.",
    "technical_task": "if you detect a part then go to the storage, or then go to the source, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then seek the storage area, or then seek the source area, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the storage area and if you are in the storage area, then drop any good parts you are holding.",
    "technical_task": "go to the storage, or otherwise then drop the part and then stop moving.",
    "spoon_task": "seek the storage area, or otherwise then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are at the base, and if not at the base then move towards the base area.",
    "technical_task": "drop the part, or if you are in the base then go to the base, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or if you are in the base area then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and drop them in the storage area if found, otherwise, just move around.",
    "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, deliver them to the waste area when holding, and keep searching for good parts in the source area while ensuring to manage your movement effectively.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or then go to the waste, or if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the base, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then search randomly, or if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base, or then go to the waste, or if you are holding a good part and if you detect a part and if you are in the storage then drop the part and then stop moving, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or then seek the waste area, or if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the base area, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then walk randomly, or if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area, or then seek the waste area, or if you are holding a good part and if you detect a part and if you are in the storage area then drop the part and then freeze movement, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, but if you hold a good part, you should go drop it in the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or otherwise if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or otherwise if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the storage area, check if you are holding a good part, and if so, stop moving.",
    "technical_task": "if you are in the storage and if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "if you are in the storage area and if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you encounter.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area if holding one, and if you find a good part then bring it to the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move towards the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and drop it if you are.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, and if both conditions are met, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and pick them up; if you do not find any, then go to the source area.",
    "technical_task": "pick up the part, or otherwise if you are in the source then go to the source.",
    "spoon_task": "pick up the part, or otherwise if you are in the source area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them back to the storage area, and if you find scrap parts, then drop them in the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and if you are in the waste area, then stop moving.",
    "technical_task": "if you detect a part then pick up the part, or if you are in the waste then stop moving, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or if you are in the waste area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part when you are in the waste area.",
    "technical_task": "if you are in the waste then drop the part.",
    "spoon_task": "if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area and once you are there, if you find a good part, pick it up and then move to the construction area.",
    "technical_task": "go to the base, or otherwise if you are in the base then pick up the part and then go to the construction.",
    "spoon_task": "seek the base area, or otherwise if you are in the base area then pick up the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area while also ensuring that you avoid picking up any scrap parts.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then stop moving, or then go to the storage, or if you detect a part and if you are holding a good part and if you are in the source then stop moving, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or then go to the waste, or if you detect a part and if you are holding a good part and if you are in the source then stop moving, or then search randomly, or if you are in the base and if you are holding a good part and if you detect a part then stop moving, or then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then freeze movement, or then seek the storage area, or if you detect a part and if you are holding a good part and if you are in the source area then freeze movement, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the source area then freeze movement, or then walk randomly, or if you are in the base area and if you are holding a good part and if you detect a part then freeze movement, or then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the waste area, and if you detect a scrap part, then pick it up and move to the source area.",
    "technical_task": "go to the waste, or if you detect a part then pick up the part and then go to the source, or otherwise then drop the part.",
    "spoon_task": "seek the waste area, or if you detect a part then pick up the part and then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then start searching for good parts in the source area.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and if not in the source area, then seek it.",
    "technical_task": "go to the source, or otherwise if you detect a part then search randomly.",
    "spoon_task": "seek the source area, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, collect any scrap parts you find along the way, and ensure you don't hold any scrap parts while in the base area.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part then go to the storage, or if you detect a part and if you are holding a scrap part then pick up the part, or if you are in the base then drop the part, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then seek the storage area, or if you detect a part and if you are holding a scrap part then pick up the part, or if you are in the base area then drop the part, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts while avoiding scrap parts. If you find a good part, bring it to the base. If you find a scrap part, bring it to the waste area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base, or if you detect a part and if you are in the waste and if you are holding a scrap part then stop moving, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area, or if you detect a part and if you are in the waste area and if you are holding a scrap part then freeze movement, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, and if you have a good part, drop it at the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part and if you are in the storage and if you are holding a good part then stop moving, or otherwise if you detect a part then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part and if you are in the storage area and if you are holding a good part then freeze movement, or otherwise if you detect a part then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, bring them to the storage area, and if you find scrap parts in the process, then drop them in the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part, or then drop the part, or otherwise if you are holding a good part and if you are in the base and if you are in the waste then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part, or then drop the part, or otherwise if you are holding a good part and if you are in the base area and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, and if you are already in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part and if you are in the waste then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to start moving towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off at the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if it is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you find in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check for a good part and pick it up if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area. If you find a scrap part, then you should go to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you detect a part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you detect a part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and drop them in the storage area, while also ensuring that you seek the source area if needed.",
    "technical_task": "pick up the part, or then go to the storage, or then drop the part and then go to the source, or then drop the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then seek the storage area, or then drop the part and then seek the source area, or then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area. If you are holding a scrap part and you reach the waste area, stop moving.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you are holding a scrap part, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you detect a part then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area and stop moving once you arrive.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and then move to the waste area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and, if you have one, drop it in the storage area after you reach the base.",
    "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, and if you find one, pick it up and then bring it to the storage area.",
    "technical_task": "if you are in the source then go to the storage, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the source area then seek the storage area, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you find a scrap part, drop it in the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and if you find yourself holding a scrap part, then seek the waste area.",
    "technical_task": "pick up the part, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "pick up the part, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the waste area before executing any other actions.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, stop moving if you have found one, or if you have a scrap part, drop it in the waste area and then search for a good part.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a scrap part then stop moving, or then drop the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a scrap part then freeze movement, or then drop the part, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are, then drop it.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the base only if you are holding a good part and you are in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then find the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather scrap parts and bring them to the waste area. If you find a good part, drop it if you are in the base area.",
    "technical_task": "pick up the part, or then drop the part, or if you are holding a good part and if you are in the base then go to the storage, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part, or then drop the part, or if you are holding a good part and if you are in the base area then seek the storage area, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected, and if you're not in the base area, find your way back to the base.",
    "technical_task": "pick up the part and then go to the base, or otherwise if you are holding a good part and if you are in the base and if you detect a part then stop moving.",
    "spoon_task": "pick up the part and then seek the base area, or otherwise if you are holding a good part and if you are in the base area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area if you are there, otherwise, move towards the storage area.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are in the storage then drop the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area to drop good parts.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to look for good parts and move towards the storage area if you find one, or else just seek the source area.",
    "technical_task": "go to the storage, or otherwise if you detect a part and if you are in the source then go to the source.",
    "spoon_task": "seek the storage area, or otherwise if you detect a part and if you are in the source area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you see one, or pick up a scrap part if you encounter it instead.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, and if you find one, pick it up and then move to the waste area to drop it off. If you are already in the waste area, stop moving.",
    "technical_task": "stop moving, or if you detect a part and if you are in the waste then drop the part and then stop moving, or otherwise then go to the waste.",
    "spoon_task": "freeze movement, or if you detect a part and if you are in the waste area then drop the part and then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up if you have found one, and then take it to the waste area to drop it there if you are holding it and are in the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, collect them, and then seek to drop them off at the storage area. Additionally, if you come across scrap parts, you should seek to go to the waste area and stop moving.",
    "technical_task": "pick up the part, or then drop the part, or then pick up the part and then go to the storage, or then go to the waste, or then go to the source, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or then drop the part, or then pick up the part and then seek the storage area, or then seek the waste area, or then seek the source area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to look for good parts and if you find one, bring it back to the storage area.",
    "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part from the environment and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for a good part, and if you find one, then drop it in the storage area.",
    "technical_task": "pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, drop them off in the waste area if you find one, and keep looking for more parts.",
    "technical_task": "if you are holding a scrap part then drop the part, or then pick up the part and then go to the waste, or then search randomly, or then pick up the part and then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or then pick up the part and then seek the waste area, or then walk randomly, or then pick up the part and then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part, and if you find a scrap part, bring it to the waste area while stopping at the base to drop off good parts when necessary.",
    "technical_task": "pick up the part, or if you are in the base then go to the storage, or if you are holding a scrap part then go to the waste, or if you are holding a good part then drop the part and then stop moving, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "pick up the part, or if you are in the base area then seek the storage area, or if you are holding a scrap part then seek the waste area, or if you are holding a good part then drop the part and then freeze movement, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, and if you hold a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you are holding a good part and if you are in the storage and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you are holding a good part and if you are in the storage area and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but only if you're not holding a part, you're in the source area, and the part is detected.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part, check if you are in the waste area, and if so, drop it. If you are in the source area, stay there and check for other parts.",
    "technical_task": "pick up the part and then go to the waste, or if you are in the waste then stop moving, or if you are in the source then stop moving, or if you detect a part and if you are holding a scrap part and if you are in the storage then go to the waste, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are in the waste area then freeze movement, or if you are in the source area then freeze movement, or if you detect a part and if you are holding a scrap part and if you are in the storage area then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, ensure you are in the storage area, and then stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you find one then take it to the waste area. If you are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you detect a part then go to the waste, or then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part then seek the waste area, or then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts and good parts in the environment, and depending on what you find, either hold the parts or move to the appropriate area for dropping them off.",
    "technical_task": "search randomly, or if you detect a part then search randomly, or if you detect a part and if you are holding a good part and if you are in the base then stop moving, or if you detect a part then go to the waste, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a good part then go to the storage, or if you are holding a scrap part and if you are in the waste and if you are in the base then go to the waste, or if you are holding a good part then go to the base, or if you are holding a scrap part and if you are in the construction and if you detect a part then go to the waste, or if you are in the base then go to the source, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or if you detect a part then walk randomly, or if you detect a part and if you are holding a good part and if you are in the base area then freeze movement, or if you detect a part then seek the waste area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a good part then seek the storage area, or if you are holding a scrap part and if you are in the waste area and if you are in the base area then seek the waste area, or if you are holding a good part then seek the base area, or if you are holding a scrap part and if you are in the construction area and if you detect a part then seek the waste area, or if you are in the base area then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring good parts to the base, and if you find scrap parts, then go to the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the base, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up scrap parts, and if you are holding a scrap part, then bring it to the waste area. If you find a good part, you should stop moving, and otherwise, you should seek a random direction.",
    "technical_task": "if you are holding a scrap part then drop the part, or then pick up the part and then go to the waste, or if you detect a part and if you are holding a good part then drop the part, or then search randomly, or otherwise then go to the source.",
    "spoon_task": "if you are holding a scrap part then drop the part, or then pick up the part and then seek the waste area, or if you detect a part and if you are holding a good part then drop the part, or then walk randomly, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to deliver good parts to the base, and if you find a scrap part, then pick it up.",
    "technical_task": "if you are holding a good part then drop the part and then go to the base, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area, and if you are carrying a scrap part, then go to the waste area.",
    "technical_task": "drop the part, or otherwise then drop the part and then go to the waste.",
    "spoon_task": "drop the part, or otherwise then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area and then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, and if you find a scrap part, drop it in the waste area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you find in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, if you are holding a good part, and then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, find a place to move.",
    "technical_task": "if you are in the base then search randomly.",
    "spoon_task": "if you are in the base area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then go to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area; if you are not in the storage area, then just seek the storage area.",
    "technical_task": "drop the part, or then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you find one and are in the base area, then drop it.",
    "technical_task": "if you detect a part and if you are in the base then drop the part, or otherwise if you detect a part then go to the base.",
    "spoon_task": "if you detect a part and if you are in the base area then drop the part, or otherwise if you detect a part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area if you are currently holding one.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the waste area and then stop moving.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to start searching for parts, and if you detect a good part, pick it up and then seek the base area.",
    "technical_task": "search randomly, or otherwise then pick up the part and then go to the base.",
    "spoon_task": "walk randomly, or otherwise then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the storage area and stop moving once you arrive.",
    "technical_task": "if you are in the storage then stop moving.",
    "spoon_task": "if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any kind of part, if you find a scrap part then drop it in the waste area, if you are holding a good part then drop it in the storage area, and keep moving until you find a part.",
    "technical_task": "if you are in the waste then stop moving, or then drop the part and then go to the storage, or if you detect a part then pick up the part, or then drop the part, or if you are holding a good part then go to the storage, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or then drop the part and then seek the storage area, or if you detect a part then pick up the part, or then drop the part, or if you are holding a good part then seek the storage area, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the storage area to drop good parts if you are holding one, and if you are in the base area and holding a scrap part, then stop moving.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are in the base and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are in the base area and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area, check for scrap parts, and if you find one, pick it up. If you do not find a scrap part, continue wandering until you find one.",
    "technical_task": "go to the source, or if you detect a part then pick up the part, or if you are holding a scrap part then go to the waste, or if you are in the source then search randomly, or otherwise then go to the source.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you are holding a scrap part then seek the waste area, or if you are in the source area then walk randomly, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move freely around the environment.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part from the source area and bring it to the storage area.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts and bring them to the storage area, while also ensuring that you do not hold scrap parts.",
    "technical_task": "go to the source, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then go to the storage.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you have a scrap part, check if you are in the waste area, and then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area after confirming you are in the base area and holding the part.",
    "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you're in the base area, and if you are, begin to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it in the storage area if you have one, and if there are no good parts, pick up any scrap part you find.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect as many good parts as possible. If you have a good part, bring it to the base. If you find a scrap part, go to the waste area and drop it.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part then pick up the part and then go to the base, or if you detect a part then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then pick up the part and then seek the base area, or if you detect a part then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part after confirming you're in the source area and that you're not holding any scrap parts.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part only when you are in the source area and carrying no other parts.",
    "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, but only if you are in the source area and not holding any scrap parts. After picking it up, move to the base area.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area to drop it off. If you can't find a good part, randomly move around the environment.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, prepare to stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and if you don\u2019t find any, then go to the waste area.",
    "technical_task": "if you detect a part then go to the storage, or otherwise if you are in the source then go to the waste.",
    "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are in the source area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have found.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area. If you find a scrap part, then go to the waste area and stop moving. If not, just move around to search for them.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and, if you hold it, bring it to the waste area while ensuring you are in the correct state for that action.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you are in the base then stop moving, or then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you are in the base area then freeze movement, or then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, look for good parts.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and go to the base, while also being prepared to seek the source area if you fail to pick up any parts.",
    "technical_task": "pick up the part and then go to the base, or then pick up the part, or then drop the part, or then search randomly, or otherwise if you are in the source then go to the waste.",
    "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or then drop the part, or then walk randomly, or otherwise if you are in the source area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a scrap part, stop moving before proceeding to drop it.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek out the base area to drop the part there. If you find a scrap part, pick it up and seek out the waste area to drop it off.",
    "technical_task": "pick up the part and then go to the base, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the base area, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, prepare to move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when it is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you encounter a scrap part, drop it at the waste area.",
    "technical_task": "pick up the part and then go to the storage, or then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, then move to the storage area to drop it off. If you don't find a good part, just seek the source area.",
    "technical_task": "pick up the part and then go to the storage, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and if so, proceed to move randomly.",
    "technical_task": "if you are in the storage then search randomly.",
    "spoon_task": "if you are in the storage area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area, and if you find a part, pick it up.",
    "technical_task": "go to the source, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and, if you find one, bring it to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area if you are carrying one; if you find a good part, drop it at the storage area; otherwise, keep searching.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area. If you find a scrap part, then pick it up and bring it to the waste area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then navigate to the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you find a scrap part, go to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then stop moving, or then drop the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then freeze movement, or then drop the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it there.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you find one, and then bring it to the storage area. If you find a scrap part, you should take it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it to the storage area, and then stop moving when you are in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then stop moving, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then freeze movement, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part when you are in the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then seek to the storage area. If you are not in the base area, then check if you are in the waste area and if so, then seek to the base area. If you are not in either of these areas, pick up any part you find.",
    "technical_task": "if you are in the base then go to the storage, or if you are in the waste then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are in the base area then seek the storage area, or if you are in the waste area then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then go to the waste area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, pick up parts to take back to the base.",
    "technical_task": "if you are in the storage then go to the base.",
    "spoon_task": "if you are in the storage area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it back to the base area; if you are not in the source area, you should seek the source area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, then move to the construction area.",
    "technical_task": "if you are in the storage then go to the construction.",
    "spoon_task": "if you are in the storage area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and, if so, seek the storage area to drop off parts.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to return to the base area, drop any good parts you are holding, and if you detect a scrap part, stop moving.",
    "technical_task": "go to the base, or then drop the part, or if you detect a part then stop moving, or otherwise then search randomly.",
    "spoon_task": "seek the base area, or then drop the part, or if you detect a part then freeze movement, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a good part, then drop it in storage and then seek the source area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the waste area before stopping movement.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, if you are in the waste area, and then stop moving when you reach the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, but if you find any scrap parts, you should bring them to the waste area instead.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then stop moving, or if you are holding a good part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then freeze movement, or if you are holding a good part then drop the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you have one, and if you detect a part, then pick it up if you are in the source area.",
    "technical_task": "drop the part, or otherwise if you detect a part and if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you detect a part and if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, drop them in the waste area, and ensure you have good parts to take back to the base.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part then drop the part, or then pick up the part and then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part then drop the part, or then pick up the part and then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if the agent is in the waste area and if the agent is holding a scrap part. If you have a good part, then move towards the storage area to drop it.",
    "technical_task": "drop the part and then go to the storage, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the storage area, and if you find a good part, pick it up and then finish the task.",
    "technical_task": "go to the storage, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "seek the storage area, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected and then seek the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part, then go to the waste area and drop it there.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then drop it in the waste area if you reach there.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if it is detected, otherwise, if you find yourself in the base area, prepare to stop moving.",
    "technical_task": "pick up the part, or otherwise if you are in the base then stop moving.",
    "spoon_task": "pick up the part, or otherwise if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if you find one, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the base. However, if you are holding a scrap part, you need to go to the waste area and drop it there.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, go to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, and if you are already holding a scrap part, then drop it in the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, but if you encounter a scrap part, then head to the waste area.",
    "technical_task": "if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you have detected one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, and if you pick one up, bring it to the waste area. If you are in the waste area and are holding a scrap part, then drop it there.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base, and if you don't find it, then search the waste area for scrap parts.",
    "technical_task": "if you detect a part then go to the base, or if you are in the waste then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then seek the base area, or if you are in the waste area then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and scrap parts, drop scrap parts in the waste area, and manage to do this while ensuring you are in the correct locations.",
    "technical_task": "if you are in the base then go to the source, or if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a good part and if you are in the storage then stop moving, or if you detect a part and if you are holding a good part then go to the storage, or if you are holding a scrap part and if you are in the base then go to the waste, or if you detect a part and if you are in the source then stop moving, or if you detect a part and if you are in the storage then stop moving, or if you are in the source and if you are holding a scrap part then go to the waste, or if you are holding a good part and if you are in the source then go to the storage, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are in the base area then seek the source area, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a good part and if you are in the storage area then freeze movement, or if you detect a part and if you are holding a good part then seek the storage area, or if you are holding a scrap part and if you are in the base area then seek the waste area, or if you detect a part and if you are in the source area then freeze movement, or if you detect a part and if you are in the storage area then freeze movement, or if you are in the source area and if you are holding a scrap part then seek the waste area, or if you are holding a good part and if you are in the source area then seek the storage area, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, and if you find one, then bring it to the storage area.",
    "technical_task": "if you detect a part then go to the storage, or otherwise if you are holding a good part then drop the part and then stop moving.",
    "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are holding a good part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, and if you are holding a good part, then stop moving.",
    "technical_task": "drop the part and then go to the storage, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you are in the waste area, drop it there.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part and if you are in the waste area and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area and that you are not holding any scrap parts, and then freeze movement.",
    "technical_task": "if you are in the base and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and if you find one then drop it in the storage area. If you cannot find any good parts, move around randomly until you do.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you have a scrap part then go to the waste area and drop it there.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste and if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste area and if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area and pick up a good part if you are holding no parts.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are holding a scrap part then go to the source.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are holding a scrap part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while also searching for good parts to bring to the storage area when possible.",
    "technical_task": "pick up the part and then go to the waste, or if you are in the waste then stop moving, or if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the source then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are in the waste area then freeze movement, or if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the source area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area, otherwise find a good part and keep moving in a random direction.",
    "technical_task": "drop the part and then stop moving, or if you detect a part and if you are holding a good part then search randomly, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then freeze movement, or if you detect a part and if you are holding a good part then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area, but only if you are holding a good part and you are currently in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the waste area, then if you are in the base area, you should stop moving. If you are not in the base area, you must move to the waste area, and if you find a scrap part, you should pick it up.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you are in the base then stop moving, or then pick up the part, or otherwise if you are holding a scrap part and if you are in the base and if you detect a part then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you are in the base area then freeze movement, or then pick up the part, or otherwise if you are holding a scrap part and if you are in the base area and if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have detected in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, and then freeze your movement.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, and if you do, drop it in the waste area, then seek the source area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the source.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it to the storage area while ensuring that you stop moving if you find a scrap part.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then stop moving, or then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find both good and scrap parts in the environment, pick them up, and bring them to the respective areas (good parts to storage, and scrap parts to waste) while ensuring you stop if you successfully pick up a part.",
    "technical_task": "if you are in the source then search randomly, or then pick up the part, or then drop the part and then go to the storage, or if you are holding a scrap part then go to the waste, or then drop the part, or if you are holding a good part then go to the storage, or then pick up the part, or then pick up the part and then go to the waste, or if you detect a part then search randomly, or otherwise then drop the part.",
    "spoon_task": "if you are in the source area then walk randomly, or then pick up the part, or then drop the part and then seek the storage area, or if you are holding a scrap part then seek the waste area, or then drop the part, or if you are holding a good part then seek the storage area, or then pick up the part, or then pick up the part and then seek the waste area, or if you detect a part then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, prepare to drop any good part you might be holding.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the storage area and that you have a good part before you stop moving.",
    "technical_task": "if you are in the storage and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the storage area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area or stop moving if you are already there.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when it is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part if it is detected, and then return to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any scrap parts you are holding at the waste area, and if you are not in the waste area, move there. If you detect a good part, go to the source area.",
    "technical_task": "drop the part, or then drop the part and then go to the waste, or if you detect a part then go to the source, or otherwise then search randomly.",
    "spoon_task": "drop the part, or then drop the part and then seek the waste area, or if you detect a part then seek the source area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then go seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, ensure you are in the source area, and then pick it up.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and if you have one, bring it to the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area if you are holding one.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you find one, then head towards the waste area. If you are holding a scrap part and in the waste area, stop moving.",
    "technical_task": "if you detect a part and if you are holding a scrap part then go to the waste, or if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then seek the waste area, or if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while ensuring you also look for good parts, but if you find one, you should go to the storage area instead.",
    "technical_task": "pick up the part, or then drop the part and then go to the waste, or if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part, or then pick up the part and then go to the source, or if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part, or then pick up the part and then go to the base, or if you are in the source and if you detect a part and if you are holding a scrap part then drop the part, or then pick up the part and then go to the construction, or if you are in the base and if you are holding a good part and if you detect a part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part, or then drop the part and then seek the waste area, or if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part, or then pick up the part and then seek the source area, or if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part, or then pick up the part and then seek the base area, or if you are in the source area and if you detect a part and if you are holding a scrap part then drop the part, or then pick up the part and then seek the construction area, or if you are in the base area and if you are holding a good part and if you detect a part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment, and if you find a scrap part, pick it up. If you are not holding any parts, move to the source area.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a scrap part then pick up the part, or otherwise if you are holding a good part then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a scrap part then pick up the part, or otherwise if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off at the storage area if you are in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stay still.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and if you are holding one then take it to the waste area and stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part from the environment and if you hold one, then take it to the waste area and drop it there.",
    "technical_task": "go to the waste, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "seek the waste area, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have picked up a good part, and if so, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, or go to the storage area if you are in the base.",
    "technical_task": "pick up the part, or if you are in the base then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, and if you are holding a scrap part, then go to the waste area and stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the source and if you are holding a good part then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the source area and if you are holding a good part then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, drop it if you are in the storage area, and then stop moving.",
    "technical_task": "if you are holding a good part then drop the part and then stop moving, or otherwise then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then freeze movement, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a scrap part and are in the waste area, then drop it.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and then head towards it.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good parts you are holding if you are in the storage area, and if you find a scrap part while you are moving, then pick it up and go to the waste area.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and drop them into the waste area whenever you encounter them, while also making sure to drop any good parts in the storage area if you find them.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part and if you are in the storage and if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part and if you are in the storage area and if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and bring it to the storage area, and if you are holding a scrap part, then go to the waste area and stop moving.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and if you are holding a good part, move towards the storage area, provided you are not already in the storage area.",
    "technical_task": "pick up the part, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then go to the storage.",
    "spoon_task": "pick up the part, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you encounter a scrap part, you should drop it in the waste area instead.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then stop moving, or if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then freeze movement, or if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and if you do not find any, then go to the storage area.",
    "technical_task": "pick up the part, or then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and if you find one, bring it to the waste area. If you encounter good parts while searching, drop them in the storage area instead.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then drop the part and then go to the storage, or if you detect a part then search randomly, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then drop the part and then seek the storage area, or if you detect a part then walk randomly, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up if you see one, and if you are not holding a part, then move towards the source area.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the source.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good parts at the storage area, and if you cannot drop them, check for scrap parts and drop them in the waste area.",
    "technical_task": "drop the part and then go to the storage, or if you are holding a good part then drop the part and then go to the storage, or otherwise then drop the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if so, then move towards the storage area. If you find a scrap part, pick it up and then move towards the waste area.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and if you find a scrap part while doing so, go to the waste area and drop it.",
    "technical_task": "pick up the part, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "pick up the part, or otherwise if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and stop moving when you get there.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, but only if you are carrying one and are currently in the base area.",
    "technical_task": "if you are holding a scrap part and if you are in the base then drop the part and then stop moving, or if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the base area then drop the part and then freeze movement, or if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that has been detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, while also responding to good parts if detected along the way.",
    "technical_task": "if you are holding a scrap part then go to the waste, or if you are in the waste and if you are holding a scrap part then stop moving, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or if you are in the waste area and if you are holding a scrap part then freeze movement, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are, stop moving.",
    "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the storage area and drop off any good parts you may have picked up.",
    "technical_task": "go to the storage, or otherwise then drop the part.",
    "spoon_task": "seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area, then stop moving. If you are in the waste area, drop any scrap parts you may have and go back to the base area.",
    "technical_task": "if you are holding a good part then stop moving, or otherwise if you are in the waste then drop the part and then go to the base.",
    "spoon_task": "if you are holding a good part then freeze movement, or otherwise if you are in the waste area then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, and if both conditions are true, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find both good and scrap parts in the environment, pick them up if detected, and drop them in the appropriate areas, while making sure to stop moving at certain conditions.",
    "technical_task": "if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or if you are in the base and if you are holding a good part and if you are in the storage then stop moving, or if you are in the waste then drop the part, or if you are in the source and if you detect a part and if you are holding a scrap part then go to the waste, or if you are in the source then drop the part, or if you are holding a scrap part and if you are in the base and if you are in the construction then stop moving, or if you are in the construction then drop the part, or if you are in the storage and if you detect a part and if you are holding a good part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or if you are in the base area and if you are holding a good part and if you are in the storage area then freeze movement, or if you are in the waste area then drop the part, or if you are in the source area and if you detect a part and if you are holding a scrap part then seek the waste area, or if you are in the source area then drop the part, or if you are holding a scrap part and if you are in the base area and if you are in the construction area then freeze movement, or if you are in the construction area then drop the part, or if you are in the storage area and if you detect a part and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it in the storage area if you are holding it, and if not, search for scrap parts and drop them in the waste area if you find any.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area if you are in the source area and holding a good part.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, and if you find one, bring it to the waste area. If you are in the waste area, then stop moving.",
    "technical_task": "if you are in the waste then stop moving, or if you detect a part and if you are holding a scrap part then drop the part and then go to the waste, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any scrap parts and bring them to the waste area, while also checking your surroundings for good parts and bringing them to the storage area if found.",
    "technical_task": "if you are holding a scrap part then go to the waste, or if you are in the waste and if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or if you detect a part and if you are in the storage then drop the part, or if you detect a part then go to the storage, or if you detect a part and if you are in the source then pick up the part, or if you are holding a good part then go to the storage, or if you are holding a scrap part and if you are in the base then drop the part, or if you are holding a good part then go to the base, or otherwise if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or if you are in the waste area and if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or if you detect a part and if you are in the storage area then drop the part, or if you detect a part then seek the storage area, or if you detect a part and if you are in the source area then pick up the part, or if you are holding a good part then seek the storage area, or if you are holding a scrap part and if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or otherwise if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base, but if you find a scrap part, then stop moving.",
    "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the base, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the base area, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and if you don't find any parts, then seek the source area.",
    "technical_task": "pick up the part, or otherwise if you detect a part and if you are in the source then go to the source.",
    "spoon_task": "pick up the part, or otherwise if you detect a part and if you are in the source area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area for keeping.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if so, seek the storage area to store any good parts.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, if you are not holding any part, and if you detect a good part. If all these conditions are met, then pick up that good part.",
    "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are at the base area and then seek another area if you are.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, if the action is successful then seek the storage area, or if not, just pick up any other part.",
    "technical_task": "pick up the part and then go to the storage, or then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area if you are currently holding it; otherwise, explore the environment to search for scrap parts.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one, then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, if you find one, then go to the waste area and stop moving.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts and bring them to the storage area, while handling any scrap parts by bringing them to the waste area.",
    "technical_task": "if you are holding a good part then go to the storage, or then go to the source, or if you detect a part then pick up the part and then go to the storage, or if you are holding a scrap part then drop the part, or then pick up the part and then go to the waste, or then search randomly, or then search randomly, or if you detect a part then pick up the part and then go to the waste, or if you are in the waste then drop the part, or then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or then seek the source area, or if you detect a part then pick up the part and then seek the storage area, or if you are holding a scrap part then drop the part, or then pick up the part and then seek the waste area, or then walk randomly, or then walk randomly, or if you detect a part then pick up the part and then seek the waste area, or if you are in the waste area then drop the part, or then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part if you find one, and if you are holding one, then head to the waste area and drop it.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when it is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and if so, then stop moving.",
    "technical_task": "if you are in the storage then stop moving.",
    "spoon_task": "if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if so, stop moving. If you aren\u2019t in the waste, then search for scrap parts and pick them up if found.",
    "technical_task": "if you are in the waste then stop moving, or then go to the waste, or then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are in the waste area then freeze movement, or then seek the waste area, or then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you are not holding any scrap parts, and then prepare to seek more good parts.",
    "technical_task": "if you are in the base and if you are holding a scrap part and if you are holding a good part then go to the source.",
    "spoon_task": "if you are in the base area and if you are holding a scrap part and if you are holding a good part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop off a good part at the storage area when you are there, and if you are holding a scrap part, then go to the waste area.",
    "technical_task": "drop the part and then go to the storage, or otherwise then drop the part and then go to the waste.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment, collect scrap parts if found, and bring them to the waste area, while managing your movements effectively.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a scrap part then drop the part and then go to the waste, or then go to the waste, or then pick up the part and then search randomly, or if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area, or then seek the waste area, or then pick up the part and then walk randomly, or if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, you should start seeking the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part in the storage area if you are already holding one; if you don\u2019t have a good part, check if you are in the base area and then pick up a scrap part if you see one.",
    "technical_task": "drop the part, or otherwise if you are in the base and if you are holding a good part then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you are in the base area and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part and, if you do, pick it up. If you don't find a good part, then seek the source area.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are in the source then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are in the source area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area, and if you're holding a scrap part, then drop it in the waste area.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the storage area where good parts are kept.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate through the environment, and if you find a scrap part, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then search randomly, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then walk randomly, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one then go to the storage area and drop it.",
    "technical_task": "if you detect a part then go to the storage, or then pick up the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part while holding it, and then drop it off in the waste area if you are near it, otherwise, head towards the waste area.",
    "technical_task": "if you are holding a scrap part and if you detect a part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you detect a part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, bring it to the storage area, and if you find a scrap part along the way, go to the waste area and stop.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect a scrap part and stop moving if you have it, but if you are in the waste area, then stop moving as well.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you are in the base then stop moving, or if you detect a part then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you are in the base area then freeze movement, or if you detect a part then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area, then stop moving.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and pick up any good parts you find while moving towards the waste area when holding a scrap part.",
    "technical_task": "go to the source, or then go to the waste, or if you detect a part then pick up the part and then search randomly, or then drop the part, or then search randomly, or otherwise then stop moving.",
    "spoon_task": "seek the source area, or then seek the waste area, or if you detect a part then pick up the part and then walk randomly, or then drop the part, or then walk randomly, or otherwise then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and during the search, if you find one, take it and continue searching. If you are holding a good part, and you're in the base area, then drop the part, and stop moving.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then stop moving, or then pick up the part, or if you are holding a good part and if you are in the storage and if you are in the source then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then freeze movement, or then pick up the part, or if you are holding a good part and if you are in the storage area and if you are in the source area then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, drop it if you are, and then move randomly.",
    "technical_task": "if you are holding a scrap part then drop the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are then search for good parts. If you find a scrap part, then pick it up and bring it to the waste area.",
    "technical_task": "if you are in the waste then search randomly, or if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you are in the waste area then walk randomly, or if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find both good and scrap parts, pick them up if found, and move to the appropriate areas to drop them based on what type of part you have.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part, or if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part and if you are in the construction then drop the part, or if you are holding a scrap part and if you are in the waste then drop the part, or if you are holding a scrap part and if you are in the base then drop the part, or if you detect a part and if you are holding a good part then pick up the part, or if you detect a part and if you are holding a scrap part then pick up the part, or if you are holding a good part and if you are in the source then drop the part, or if you are holding a scrap part and if you are in the source then drop the part, or otherwise if you detect a part and if you are in the waste then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part, or if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part and if you are in the construction area then drop the part, or if you are holding a scrap part and if you are in the waste area then drop the part, or if you are holding a scrap part and if you are in the base area then drop the part, or if you detect a part and if you are holding a good part then pick up the part, or if you detect a part and if you are holding a scrap part then pick up the part, or if you are holding a good part and if you are in the source area then drop the part, or if you are holding a scrap part and if you are in the source area then drop the part, or otherwise if you detect a part and if you are in the waste area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part from the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if one is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, but only if you are in the source area and not holding any parts.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, and if you find a good part while carrying a scrap part, then you should stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part and if you are in the base then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part and if you are in the base area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, and if you find a good part, stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If scrap parts are found, then bring them to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if one is detected, and if you can't find a good part, then drop any scrap part you might be holding.",
    "technical_task": "pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part while in the base, and if holding it then drop it in the storage area. If you find any scrap parts while in the environment then move to the waste area and stop.",
    "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, verify that you are holding a good part, and then move to the storage area to drop it.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you find a scrap part, then drop it wherever you are.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if so, move around freely.",
    "technical_task": "if you are in the waste then search randomly.",
    "spoon_task": "if you are in the waste area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the source area and drop it in the storage area.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are in the base area before seeking parts.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, check if you're in the source area, and if true, drop the good part you've picked up.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, hold it, and then move to the base area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, drop them in the storage area if you are holding one, and if you cannot drop it because you are not in the storage area, move towards the storage area. If you find a scrap part instead, then pick it up.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part and if you are in the storage and if you are holding a scrap part then go to the storage, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part and if you are in the storage area and if you are holding a scrap part then seek the storage area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area. If you cannot find a part, then search randomly.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to deliver a good part to the storage area and, if you encounter a scrap part, drop it on the way or find the waste area.",
    "technical_task": "drop the part and then go to the storage, or then pick up the part, or if you detect a part then go to the waste, or otherwise then go to the base.",
    "spoon_task": "drop the part and then seek the storage area, or then pick up the part, or if you detect a part then seek the waste area, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the waste area, and if both conditions are true, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, hold them if you find any, and if you are carrying scrap parts, bring them to the waste area, and if you are in the waste area, drop the scrap parts. If you also find good parts, pick them up and take them to the storage area.",
    "technical_task": "pick up the part, or if you are holding a scrap part then go to the waste, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or if you are holding a scrap part then go to the waste, or if you detect a part and if you are holding a good part and if you are in the base then drop the part, or if you are in the waste then stop moving, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or if you are in the source then stop moving, or if you are holding a good part and if you are in the storage and if you are in the construction then drop the part, or otherwise if you detect a part then search randomly.",
    "spoon_task": "pick up the part, or if you are holding a scrap part then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a scrap part then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or if you are in the waste area then freeze movement, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or if you are in the source area then freeze movement, or if you are holding a good part and if you are in the storage area and if you are in the construction area then drop the part, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you detect in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected and then navigate towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part and if you do, then go to the waste area. If you find a good part, pick it up and then go to the storage area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you find one, then stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then drop the part, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area and stop moving once you arrive.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any good part, pick it up if you find it, drop it in the storage area if you are holding it, and search for scrap parts as needed.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then drop the part, or then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then drop the part, or then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, hold it, and drop it at the base if you are in the base area; otherwise, move towards the base.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then drop the part, or if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to look for good parts and bring them to the storage area. If you are holding a good part, then stop moving.",
    "technical_task": "if you are holding a good part then stop moving, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then freeze movement, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then head back to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then drop it off in the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find any, and then return to the base.",
    "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then go to the base.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if so, stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area, and if you find a scrap part on the way, pick it up.",
    "technical_task": "if you detect a part then pick up the part, or otherwise then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area; if you are, then move to the storage area. If you are not in the base, look for parts.",
    "technical_task": "if you are in the base then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are in the base area then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts in the environment and drop them in the waste if you are holding any, but if you are in the waste area, move in place.",
    "technical_task": "if you are in the waste then stop moving, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to start moving towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then go to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to look for any parts in the environment, and if you find a scrap part, then seek the waste area. If you pick up a good part, go to the storage area. Otherwise, keep exploring.",
    "technical_task": "if you detect a part then go to the waste, or then pick up the part and then go to the storage, or then search randomly, or then go to the source, or otherwise then stop moving.",
    "spoon_task": "if you detect a part then seek the waste area, or then pick up the part and then seek the storage area, or then walk randomly, or then seek the source area, or otherwise then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when it is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment, picking up any scrap parts you find, moving to the waste area to drop them, and checking for good parts along the way.",
    "technical_task": "go to the waste, or then pick up the part and then go to the waste, or then drop the part and then search randomly, or then go to the source, or then pick up the part, or then search randomly, or then drop the part and then go to the base, or then pick up the part and then go to the source, or then stop moving, or otherwise then drop the part.",
    "spoon_task": "seek the waste area, or then pick up the part and then seek the waste area, or then drop the part and then walk randomly, or then seek the source area, or then pick up the part, or then walk randomly, or then drop the part and then seek the base area, or then pick up the part and then seek the source area, or then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and ensure you are not holding any scrap parts before stopping.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then stop moving.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to stop moving if you are in the construction area, and if you find a good part, then pick it up and bring it to the storage area.",
    "technical_task": "if you are in the construction then stop moving, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the construction area then freeze movement, or otherwise if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area, and if you don't have a part, then search for parts.",
    "technical_task": "drop the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the base if you are there.",
    "technical_task": "if you detect a part and if you are in the base then drop the part.",
    "spoon_task": "if you detect a part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if it is detected and then move back to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base; if you find a scrap part, drop it in the waste area; also, if you're not in any designated area, seek the source area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then stop moving, or then pick up the part and then go to the base, or if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then freeze movement, or then pick up the part and then seek the base area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area. If you find a scrap part, go to the waste area and stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, drop them in the waste area if you have any, and if there are no scrap parts detected, then keep searching.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then search randomly, or then pick up the part and then go to the source, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then walk randomly, or then pick up the part and then seek the source area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, while also ensuring that you stop moving when you have a scrap part.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are in the waste then drop the part, or otherwise if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are in the waste area then drop the part, or otherwise if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if so, stay still.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts and bring them to the waste area, while also handling situations where the robot needs to freeze if it is holding a scrap part or if it detects a good part and needs to drop it.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or if you are holding a scrap part then go to the waste, or then pick up the part and then search randomly, or if you detect a part then pick up the part and then search randomly, or if you are holding a good part then drop the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or if you are holding a scrap part then seek the waste area, or then pick up the part and then walk randomly, or if you detect a part then pick up the part and then walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, prepare to move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up, and bring them to the storage area, while also managing scrap parts by dropping them in the waste area if you encounter any.",
    "technical_task": "pick up the part, or then drop the part, or if you are holding a good part then drop the part and then go to the storage, or then pick up the part and then go to the source, or then search randomly, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then drop the part, or if you are holding a good part then drop the part and then seek the storage area, or then pick up the part and then seek the source area, or then walk randomly, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then try to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off in the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it in the storage area if you are in the base area.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part, or otherwise then go to the source.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area and stop moving if you are already in the base, otherwise, seek the base area if you are not.",
    "technical_task": "if you are in the base then stop moving, or otherwise if you are holding a good part then go to the base.",
    "spoon_task": "if you are in the base area then freeze movement, or otherwise if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it if you are in the base area, or pick up a scrap part if you detect one.",
    "technical_task": "if you are in the base then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are in the base area then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area and then move there.",
    "technical_task": "if you are in the base then go to the base.",
    "spoon_task": "if you are in the base area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then stop moving.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you find a good part, then bring it to the base.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or if you detect a part and if you are in the source then pick up the part and then go to the base, or otherwise then search randomly.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or if you detect a part and if you are in the source area then pick up the part and then seek the base area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area. If you don't find a good part, then move randomly, and if you encounter a scrap part, then pick it up and drop it at the waste area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part, or then search randomly, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part, or then walk randomly, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are carrying a scrap part while in the waste area and then stop moving. If you are carrying a good part in the base area, then drop it.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area if you find one, and if you are unable to find a part, then seek the source area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part, pick it up, and then if you have a good part, go to the base area and stop moving.",
    "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off. If no good parts are detected, randomly explore the environment.",
    "technical_task": "pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, collect it, and if you are holding a scrap part while in the waste area, stop moving.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek and explore the environment, focusing on different areas to find parts.",
    "technical_task": "go to the source, or otherwise then go to the waste.",
    "spoon_task": "seek the source area, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify if you are holding a scrap part and if you are in the waste area, and if so, stop moving. If you find a good part, then move to pick it up.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts from the environment, bring them to the waste area, and if you find a good part, take it to the storage area.",
    "technical_task": "if you are in the waste then stop moving, or then drop the part and then go to the waste, or then pick up the part and then go to the source, or then pick up the part, or then drop the part and then go to the storage, or then search randomly, or then pick up the part and then go to the waste, or then drop the part and then go to the storage, or then pick up the part, or then drop the part and then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or then drop the part and then seek the waste area, or then pick up the part and then seek the source area, or then pick up the part, or then drop the part and then seek the storage area, or then walk randomly, or then pick up the part and then seek the waste area, or then drop the part and then seek the storage area, or then pick up the part, or then drop the part and then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up good parts when spotted, then bring them to the storage area, while also checking for scrap parts and dropping them in the waste area if you find any.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or if you are holding a scrap part then drop the part and then go to the waste, or then search randomly, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or if you are holding a scrap part then drop the part and then seek the waste area, or then walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then take it to the waste area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area, you have detected a part, and you are not currently holding any part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to take a good part to the storage area if you have one.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part, drop it in the waste area, and then stop moving.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to randomly move around the environment until you find a scrap part.",
    "technical_task": "search randomly, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area.",
    "technical_task": "pick up the part and then go to the base.",
    "spoon_task": "pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when one is detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. Also, if you find a scrap part, then bring it to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage then stop moving, or if you are holding a good part and if you are in the base then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then freeze movement, or if you are holding a good part and if you are in the base area then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you are holding a scrap part, then drop it in the waste.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part and then drop it at the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and collect scrap parts, bring them to the waste area, and if you are in the waste area, stop moving.",
    "technical_task": "pick up the part and then go to the waste, or then go to the waste, or then drop the part and then go to the waste, or if you are in the waste then stop moving, or then search randomly, or then pick up the part and then go to the waste, or then search randomly, or then drop the part and then go to the waste, or if you detect a part then go to the waste, or then go to the source, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then seek the waste area, or then drop the part and then seek the waste area, or if you are in the waste area then freeze movement, or then walk randomly, or then pick up the part and then seek the waste area, or then walk randomly, or then drop the part and then seek the waste area, or if you detect a part then seek the waste area, or then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then head towards the waste area. If you find a good part, then just move toward the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for any parts in the environment, pick them up if found, and manage your actions based on whether you are holding good or scrap parts, while also moving to the appropriate areas as needed.",
    "technical_task": "pick up the part and then go to the source, or then drop the part and then go to the storage, or if you are holding a good part and if you are in the base and if you detect a part then drop the part and then stop moving, or then pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part and then stop moving, or then pick up the part and then go to the base, or if you detect a part and if you are holding a good part and if you are in the source then drop the part and then stop moving, or then pick up the part and then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the base then drop the part and then stop moving, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the source area, or then drop the part and then seek the storage area, or if you are holding a good part and if you are in the base area and if you detect a part then drop the part and then freeze movement, or then pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part and then freeze movement, or then pick up the part and then seek the base area, or if you detect a part and if you are holding a good part and if you are in the source area then drop the part and then freeze movement, or then pick up the part and then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the base area then drop the part and then freeze movement, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the base if you are holding one.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the base if you are not currently holding any part.",
    "technical_task": "if you are holding a good part and if you are in the source then drop the part and then go to the base.",
    "spoon_task": "if you are holding a good part and if you are in the source area then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and drop it off in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and if you find a scrap part, then go to the waste area to drop it off.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you're in the source area.",
    "technical_task": "if you are in the source then pick up the part.",
    "spoon_task": "if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and bring it to the waste area, but first, ensure you are in the source area and not holding any good parts.",
    "technical_task": "if you are in the source and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then go to the waste, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you are in the source area and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if so, drop it.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if the agent is in the base area and if it is holding a good part, and then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part and if you are in the waste area, and if both conditions are met, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area.",
    "technical_task": "go to the storage, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "seek the storage area, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, but if you find a good part, then drop it in the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area, drop any scrap parts you are holding, and if you don't have any scrap part, seek for more scrap parts in the environment.",
    "technical_task": "go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or otherwise then search randomly.",
    "spoon_task": "seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition> <!-- This condition checks if the agent is holding good parts as a precaution -->\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, then go to the waste area and stop if you find one.",
    "technical_task": "pick up the part and then go to the waste, or then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts, bring them to the storage area, and manage any scrap parts that you come across along the way.",
    "technical_task": "pick up the part, or if you are holding a good part then go to the storage, or if you are holding a scrap part then go to the waste, or then drop the part, or then drop the part, or then pick up the part, or if you are in the source then search randomly, or if you are in the storage then stop moving, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part then seek the storage area, or if you are holding a scrap part then seek the waste area, or then drop the part, or then drop the part, or then pick up the part, or if you are in the source area then walk randomly, or if you are in the storage area then freeze movement, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for any good part and pick it up. If you can't find a good part, then check if you're in the waste area and stay there.",
    "technical_task": "pick up the part, or if you are in the waste then stop moving, or otherwise then go to the source.",
    "spoon_task": "pick up the part, or if you are in the waste area then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move toward the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find any, and bring them back to the storage area. If you find a scrap part, drop whatever you are holding if you are in the waste area and then go seek the source area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then go to the source, or if you detect a part and if you are holding a good part then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then seek the source area, or if you detect a part and if you are holding a good part then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, prepare to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts and scrap parts, pickup any parts you find, and drop scrap parts in the waste area.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the base then drop the part, or then go to the waste, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then search randomly, or if you detect a part and if you are holding a good part and if you are in the source then pick up the part, or then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part, or then go to the base, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or then seek the waste area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then walk randomly, or if you detect a part and if you are holding a good part and if you are in the source area then pick up the part, or then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part, or then seek the base area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect all scrap parts in the environment and drop them in the waste area, while ensuring that you stop moving when holding a scrap part or when you reach the waste area.",
    "technical_task": "pick up the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or then drop the part, or if you are holding a scrap part and if you are in the base and if you are in the waste then drop the part and then go to the waste, or then pick up the part, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then pick up the part, or if you detect a part and if you are in the source and if you are holding a good part then drop the part and then go to the base, or then drop the part, or otherwise if you are in the source and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving.",
    "spoon_task": "pick up the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or then drop the part, or if you are holding a scrap part and if you are in the base area and if you are in the waste area then drop the part and then seek the waste area, or then pick up the part, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then pick up the part, or if you detect a part and if you are in the source area and if you are holding a good part then drop the part and then seek the base area, or then drop the part, or otherwise if you are in the source area and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it at the storage area if you are in the base area.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, stop moving if you are in the waste area after collecting one, and if you are holding a scrap part when in the waste area, drop it.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part and if you are in the source then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part and if you are in the source area then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you're in the waste area, if you are, then stop moving. If not, move randomly. If you find a scrap part, pick it up and then seek the waste area.",
    "technical_task": "if you are in the waste then stop moving, or then search randomly, or otherwise then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or then walk randomly, or otherwise then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up; if you can't find a good part, just drop any scrap parts you might be holding.",
    "technical_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the base area, and if you encounter obstacles, keep seeking the base area until you arrive.",
    "technical_task": "go to the base, or otherwise if you are in the base and if you are in the storage then stop moving.",
    "spoon_task": "seek the base area, or otherwise if you are in the base area and if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, take them to the waste area, and if you are in the waste area then stop moving.",
    "technical_task": "if you are in the waste then stop moving, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop scrap parts if you are already in the waste area; if not, you should move towards the waste area.",
    "technical_task": "drop the part, or otherwise if you are in the waste then go to the waste.",
    "spoon_task": "drop the part, or otherwise if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up if detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and drop it if you are.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are at the base, and if so, seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you find.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move toward the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you are already holding a scrap part, and you are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or then pick up the part and then go to the waste, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or then pick up the part and then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it in the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any good part you find, and if you pick one up, seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if so, seek the base area.",
    "technical_task": "if you are in the storage then go to the base.",
    "spoon_task": "if you are in the storage area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part while in the source area, and if you find it, pick it up and then move towards the waste area to drop it off.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then go to the waste, or otherwise then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, pick them up if found, and then go to the waste area to drop them off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or then search randomly, or otherwise then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or then walk randomly, or otherwise then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a scrap part to the waste area, and if you are holding a scrap part and are in the waste area, then drop it there.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if one is detected; otherwise, drop any scrap part you are holding.",
    "technical_task": "pick up the part, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "pick up the part, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area or storage area, and if so, stop moving.",
    "technical_task": "if you are in the waste then stop moving, or otherwise if you are in the storage then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then move towards the construction area.",
    "technical_task": "if you are in the waste then go to the construction.",
    "spoon_task": "if you are in the waste area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek out the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up scrap parts and, if you can't find any scrap parts, search for good parts instead.",
    "technical_task": "pick up the part, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and deliver it to the waste area, but only if you are holding a scrap part and you are already in the waste area; otherwise, seek the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you are holding a scrap part and if you are in the construction then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you are holding a scrap part and if you are in the construction area then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and have a good part, then move to the construction area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the construction.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for scrap parts, take them to the waste area, and ensure you only drop them when you are in the waste area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or then go to the source, or if you detect a part then pick up the part and then search randomly, or if you are in the waste then drop the part, or if you are in the source then drop the part, or then go to the base, or then search randomly, or if you are holding a good part then drop the part and then go to the storage, or if you are in the storage then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or then seek the source area, or if you detect a part then pick up the part and then walk randomly, or if you are in the waste area then drop the part, or if you are in the source area then drop the part, or then seek the base area, or then walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the storage area then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any good part you encounter in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part when you detect it.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area, check for scrap parts, and if found, drop them. If you are not holding any part, then randomly search the environment.",
    "technical_task": "go to the waste, or if you detect a part and if you are holding a scrap part then drop the part and then stop moving, or otherwise if you are holding a good part then search randomly.",
    "spoon_task": "seek the waste area, or if you detect a part and if you are holding a scrap part then drop the part and then freeze movement, or otherwise if you are holding a good part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, hold it, and then drop it in the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one and then seek the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find both good parts and scrap parts, drop them in their respective areas, and ensure you stop moving after successfully picking up any part.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part, or then stop moving, or if you are holding a good part and if you are in the storage and if you are in the waste then drop the part, or then go to the base, or if you detect a part and if you are in the source and if you are holding a good part then pick up the part, or then go to the storage, or if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part, or then go to the waste, or if you are in the base and if you are in the storage and if you are in the waste then drop the part, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part, or then freeze movement, or if you are holding a good part and if you are in the storage area and if you are in the waste area then drop the part, or then seek the base area, or if you detect a part and if you are in the source area and if you are holding a good part then pick up the part, or then seek the storage area, or if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part, or then seek the waste area, or if you are in the base area and if you are in the storage area and if you are in the waste area then drop the part, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts from the environment, bring them to the waste area, and ensure you stop moving when you have a scrap part while checking the conditions for your environment location.",
    "technical_task": "if you are holding a scrap part then stop moving, or then pick up the part and then go to the waste, or if you detect a part and if you are in the source and if you are holding a scrap part then go to the waste, or then drop the part and then go to the base, or if you detect a part and if you are in the waste and if you are holding a good part then stop moving, or then drop the part and then go to the storage, or if you detect a part and if you are in the storage and if you are holding a good part then stop moving, or then pick up the part and then go to the source, or if you are in the base and if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then drop the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part then freeze movement, or then pick up the part and then seek the waste area, or if you detect a part and if you are in the source area and if you are holding a scrap part then seek the waste area, or then drop the part and then seek the base area, or if you detect a part and if you are in the waste area and if you are holding a good part then freeze movement, or then drop the part and then seek the storage area, or if you detect a part and if you are in the storage area and if you are holding a good part then freeze movement, or then pick up the part and then seek the source area, or if you are in the base area and if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and look for good parts. If you find one, move towards the storage area to drop it. If you are in the waste area, stay there until you are no longer holding a scrap part.",
    "technical_task": "if you are holding a good part then go to the storage, or then go to the source, or if you are holding a scrap part then stop moving, or then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a good part then seek the storage area, or then seek the source area, or if you are holding a scrap part then freeze movement, or then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, ensure you are in the waste area, and then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you find in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and drop a good part if you are holding one.",
    "technical_task": "if you are in the base then drop the part.",
    "spoon_task": "if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, pick them up if you find any, and if you are holding a good part, bring it to the storage area. If you are in the waste area with a scrap part, stop moving.",
    "technical_task": "go to the source, or if you detect a part then go to the source, or if you are holding a good part then go to the storage, or then pick up the part and then go to the source, or otherwise if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then seek the source area, or if you are holding a good part then seek the storage area, or then pick up the part and then seek the source area, or otherwise if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part, drop it off in the waste area, and if you find a good part along the way, stop moving.",
    "technical_task": "pick up the part, or then go to the waste, or if you are holding a scrap part then go to the waste, or then search randomly, or then drop the part, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then seek the waste area, or if you are holding a scrap part then seek the waste area, or then walk randomly, or then drop the part, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage area. If you encounter scrap parts, drop them in the waste area. If you're not holding any parts, move around to find parts.",
    "technical_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part, or if you detect a part then pick up the part, or otherwise if you are in the base then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part, or if you detect a part then pick up the part, or otherwise if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you are in the waste area, stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good part you are holding and then move towards the source area. If you do not hold a good part, then pick up any detected good parts you encounter.",
    "technical_task": "drop the part and then go to the source, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the source area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to roam around the environment looking for good parts. If you find a good part while in the source area, then pick it up. Otherwise, keep roaming until you stop somewhere.",
    "technical_task": "search randomly, or if you detect a part and if you are in the source and if you are holding a good part then stop moving, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "walk randomly, or if you detect a part and if you are in the source area and if you are holding a good part then freeze movement, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, ensure you are in the source area, and then go to the base area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring scrap parts to the waste area. If you find a scrap part, pick it up and move towards the waste area. If you reach the waste area, drop the scrap part.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you detect a part and if you are in the waste then pick up the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part and if you are in the waste area then pick up the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, move to the construction area.",
    "technical_task": "if you are in the storage then go to the construction.",
    "spoon_task": "if you are in the storage area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up a good part when you are in the source area, and if you are holding a good part, then go to the base area and drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base, or otherwise if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move to seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part and if you do, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base after confirming that you have it.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, drop them in the waste area, and continuously seek areas to find more scrap parts.",
    "technical_task": "pick up the part, or then go to the waste, or then search randomly, or then go to the source, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then seek the waste area, or then walk randomly, or then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area and then move to seek the source area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area, and if you cannot find a good part, then just move randomly.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base while ensuring you are not holding a scrap part.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then drop the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you find a scrap part, you should pick it up instead.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then go to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, hold it, and then seek out the waste area to drop it.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stop moving; otherwise, keep moving towards the waste area.",
    "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, drop it.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, check if you are in the base area, and if you are, then stop moving. If you detect a scrap part, pick it up and then seek the waste area.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then stop moving, or then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then freeze movement, or then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then prepare to move towards another area.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the storage area. If you don't find a good part, just seek the source area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any part you find and if you can't find any parts, then proceed to the source area.",
    "technical_task": "pick up the part, or otherwise if you are in the base then go to the source.",
    "spoon_task": "pick up the part, or otherwise if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a good part, drop it in the storage area before looking for more parts.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part from the source area and then bring it to the storage area.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find any scrap parts in the environment, pick them up, and bring them to the waste area. If you manage to drop a scrap part there, then stop moving. If you detect good parts, ignore them.",
    "technical_task": "if you are in the waste then stop moving, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then stop moving, or then go to the waste, or if you are holding a scrap part and if you are in the source and if you detect a part then drop the part and then go to the waste, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then search randomly, or then search randomly, or if you detect a part and if you are holding a good part and if you are in the storage then pick up the part and then search randomly, or then go to the storage, or otherwise if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then freeze movement, or then seek the waste area, or if you are holding a scrap part and if you are in the source area and if you detect a part then drop the part and then seek the waste area, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then walk randomly, or then walk randomly, or if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part and then walk randomly, or then seek the storage area, or otherwise if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then return to the base area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part, drop it in the storage area, and then move to the construction area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then find a way to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a scrap part if you are in the waste area.",
    "technical_task": "if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, ensure you're in the waste area, and then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area, otherwise, head towards the storage area.",
    "technical_task": "drop the part, or otherwise then go to the storage.",
    "spoon_task": "drop the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part when you detect it.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the waste area, and if both conditions are true, then stop moving. If not, check if you are holding a good part and go to the base.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or otherwise if you are holding a good part then go to the base.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have any scrap parts, and if you do, seek the waste area. If you are already in the waste area, then stop moving. If you find any good parts, go to the storage area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or if you are in the waste then stop moving, or otherwise if you detect a part and if you are in the source then go to the storage.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or if you are in the waste area then freeze movement, or otherwise if you detect a part and if you are in the source area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify a scrap part, ensure you're not holding any good parts, and then pick up the scrap part.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you're near it, and then move to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off at the base area. If you find a scrap part, then drop it at the waste area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts from the environment, drop them in the waste area when holding one, and also manage good parts by dropping them in storage if you are in the base.",
    "technical_task": "pick up the part, or then drop the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part, or then drop the part and then go to the storage, or if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part, or then pick up the part and then go to the source, or if you are in the waste and if you detect a part and if you are holding a good part then drop the part, or then drop the part and then go to the storage, or if you are holding a scrap part and if you are in the base and if you detect a part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part, or then drop the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part, or then drop the part and then seek the storage area, or if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part, or then pick up the part and then seek the source area, or if you are in the waste area and if you detect a part and if you are holding a good part then drop the part, or then drop the part and then seek the storage area, or if you are holding a scrap part and if you are in the base area and if you detect a part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area, and if you are in the waste area, then stop moving.",
    "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then bring it to the waste area.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, drop it if you are in the waste area, or move to the waste area if you are holding a scrap part. If you do not have a scrap part, keep searching.",
    "technical_task": "drop the part, or then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise if you detect a part then search randomly.",
    "spoon_task": "drop the part, or then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise if you detect a part then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part, then you should stop moving.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and take them to the waste area. If you're in the waste area, drop the scrap part, and if you have a scrap part and are in the base, go to the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part then pick up the part and then go to the waste, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop off any good parts you are holding at the storage area, and if you are not holding a part, then seek the source area.",
    "technical_task": "drop the part, or otherwise if you are holding a good part then go to the storage.",
    "spoon_task": "drop the part, or otherwise if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you find a scrap part, go to the waste area and drop it there.",
    "technical_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then prepare to either find parts or drop off good parts.",
    "technical_task": "if you are in the base then search randomly.",
    "spoon_task": "if you are in the base area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area, but only if you are not already holding a good part and are in the source area.",
    "technical_task": "if you are in the source and if you are holding a good part and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you find another scrap part while holding one, then go to the waste area to drop it.",
    "technical_task": "if you are holding a scrap part then pick up the part and then go to the waste, or if you detect a part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then pick up the part and then seek the waste area, or if you detect a part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment and pick up any scrap parts you find while bringing good parts to the base as needed.",
    "technical_task": "go to the source, or then pick up the part, or then drop the part, or then go to the waste, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "seek the source area, or then pick up the part, or then drop the part, or then seek the waste area, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect it.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, pick them up, and eventually drop them in the waste area, while ensuring you find your way back to the base periodically.",
    "technical_task": "pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste then stop moving, or then pick up the part, or then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste area then freeze movement, or then pick up the part, or then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are in the source area and you are not currently holding any part.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts, and if you find one then drop it in the storage area.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then proceed to stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for the base area, and when you get there, continue moving until you find any part.",
    "technical_task": "go to the base, or if you are in the base then search randomly, or otherwise then pick up the part.",
    "spoon_task": "seek the base area, or if you are in the base area then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up good parts, if you can't find any then check whether you're in the base area and stay there.",
    "technical_task": "go to the source, or then pick up the part and then go to the base, or if you are in the base then stop moving, or then drop the part, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "seek the source area, or then pick up the part and then seek the base area, or if you are in the base area then freeze movement, or then drop the part, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, if you have one then look for the base area, and if you are already in the base area then drop the part.",
    "technical_task": "pick up the part, or if you are holding a good part then go to the base, or if you are in the base and if you are holding a good part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part then seek the base area, or if you are in the base area and if you are holding a good part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you find one, and only if you are not holding any part, then drop it in the waste area.",
    "technical_task": "if you detect a part and if you are holding a good part then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, ensure you're in the source area, and then stop moving.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then stop moving.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, and if you do, drop it in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area if you are holding it, but only if you are in the base area and don't have a scrap part.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then drop the part and then go to the storage, or otherwise then pick up the part and then go to the source.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area, and if you find a scrap part then drop it in the waste area.",
    "technical_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part then drop the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find and pick up a good part, and if you have found one, then move towards the base area.",
    "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part and if you are in the source and if you are holding a good part then go to the base.",
    "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part and if you are in the source area and if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, see if you are carrying a good part, and drop it off in the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and if you have a scrap part, go to the waste area to drop it. If you encounter scrap parts, move to the waste area and stop moving.",
    "technical_task": "pick up the part, or if you are holding a good part and if you detect a part then go to the base, or if you are holding a scrap part then go to the waste, or if you detect a part and if you are in the source and if you are holding a scrap part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part and if you detect a part then seek the base area, or if you are holding a scrap part then seek the waste area, or if you detect a part and if you are in the source area and if you are holding a scrap part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts from the source area, bring them to the base, stop if you encounter scrap parts, and ensure you stay active to search for more parts throughout the process.",
    "technical_task": "go to the source, or if you are holding a good part and if you are in the base and if you are holding a scrap part then drop the part and then stop moving, or then go to the storage, or if you detect a part and if you are in the source and if you are holding a good part then pick up the part and then go to the base, or then search randomly, or if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then search randomly, or then go to the waste, or if you detect a part and if you are in the base and if you are holding a scrap part then drop the part and then search randomly, or then go to the source, or otherwise if you detect a part and if you are in the construction and if you are holding a good part then pick up the part and then search randomly.",
    "spoon_task": "seek the source area, or if you are holding a good part and if you are in the base area and if you are holding a scrap part then drop the part and then freeze movement, or then seek the storage area, or if you detect a part and if you are in the source area and if you are holding a good part then pick up the part and then seek the base area, or then walk randomly, or if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then walk randomly, or then seek the waste area, or if you detect a part and if you are in the base area and if you are holding a scrap part then drop the part and then walk randomly, or then seek the source area, or otherwise if you detect a part and if you are in the construction area and if you are holding a good part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up, and bring them to the storage area. If you find scrap parts, take them to the waste area instead.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste then drop the part, or if you detect a part then pick up the part and then go to the waste, or if you are in the source then pick up the part, or otherwise then search randomly.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part then pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste area then drop the part, or if you detect a part then pick up the part and then seek the waste area, or if you are in the source area then pick up the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one, pick it up.",
    "technical_task": "if you detect a part then pick up the part, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area and start searching for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you have a scrap part, bring it to the waste area. If you cannot find a scrap part, then just move randomly in the environment.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then search randomly, or otherwise if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then walk randomly, or otherwise if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are at the base with a good part and drop it. If you are not at the base, just move towards the base.",
    "technical_task": "if you are in the base then drop the part and then stop moving, or otherwise then go to the base.",
    "spoon_task": "if you are in the base area then drop the part and then freeze movement, or otherwise then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and if you can't find one, then move around randomly.",
    "technical_task": "pick up the part, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to manage the collection and handling of both good and scrap parts: seek good parts, pick them up, and drop them in the storage area; if you find scrap parts, pick them up and drop them in the waste area. Additionally, ensure that you freeze motion when you are holding either type of part.",
    "technical_task": "go to the source, or then pick up the part and then go to the storage, or then search randomly, or if you are holding a good part then drop the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or if you detect a part then pick up the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or if you detect a part then pick up the part, or if you are in the storage and if you are holding a good part and if you detect a part then stop moving, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "seek the source area, or then pick up the part and then seek the storage area, or then walk randomly, or if you are holding a good part then drop the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or if you detect a part then pick up the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or if you detect a part then pick up the part, or if you are in the storage area and if you are holding a good part and if you detect a part then freeze movement, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the construction area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the construction then go to the storage.",
    "spoon_task": "if you are in the construction area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part in the source area, pick it up, and then move to the base area to drop it.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the construction area only if you're not in the waste area and you don't have any scrap parts.",
    "technical_task": "if you are in the waste and if you are holding a scrap part then go to the construction.",
    "spoon_task": "if you are in the waste area and if you are holding a scrap part then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part while in the base area, and if so, drop it in the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and if you find scrap parts, go to the waste area. Otherwise, keep searching for parts.",
    "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the base area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are holding a good part and then move towards the storage area to drop it off.",
    "technical_task": "if you are holding a good part and if you are in the base then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have found a scrap part, and if you have, then proceed to drop it in the waste area. If you are not in the waste area, then navigate to it.",
    "technical_task": "if you are holding a scrap part then go to the waste, or otherwise if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or otherwise if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find all scrap parts, bring them to the waste area, and ensure you don't hold any parts when you have finished.",
    "technical_task": "drop the part and then go to the waste, or if you are in the waste and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then go to the waste, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then pick up the part and then search randomly, or if you are in the waste and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then go to the source, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or then pick up the part and then go to the source, or if you are in the storage and if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the waste area, or if you are in the waste area and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then seek the waste area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then pick up the part and then walk randomly, or if you are in the waste area and if you are holding a scrap part and if you are holding a good part then drop the part, or then pick up the part and then seek the source area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or then pick up the part and then seek the source area, or if you are in the storage area and if you detect a part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, confirm you are in the base area, and drop it off. If not in the base, then seek the base. If you find a scrap part, then pick it up.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a good part then stop moving, or then go to the base, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a good part then freeze movement, or then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, drop it in the storage area, and stop moving if you find a scrap part.",
    "technical_task": "if you are holding a good part and if you are in the storage and if you are holding a scrap part then drop the part and then stop moving, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the waste and if you are in the base then drop the part and then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the storage area and if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you are in the base area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and pick it up. If you are not in the source area, then move towards it.",
    "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then head to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect all good parts you find, drop them at the storage area, and if you find any scrap parts, bring them to the waste area.",
    "technical_task": "pick up the part, or then drop the part and then go to the storage, or if you are holding a good part and if you are in the storage and if you are in the source then drop the part, or then pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part, or then drop the part and then go to the source, or if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part, or then drop the part and then go to the construction, or if you detect a part and if you are in the storage and if you are holding a good part then pick up the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "pick up the part, or then drop the part and then seek the storage area, or if you are holding a good part and if you are in the storage area and if you are in the source area then drop the part, or then pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part, or then drop the part and then seek the source area, or if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part, or then drop the part and then seek the construction area, or if you detect a part and if you are in the storage area and if you are holding a good part then pick up the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area if you are already in the storage area, or search for the storage area otherwise.",
    "technical_task": "if you are in the storage then stop moving, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the storage area then freeze movement, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then go to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, then search for a part in the environment.",
    "technical_task": "if you are in the storage then search randomly.",
    "spoon_task": "if you are in the storage area then walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify when you have a scrap part and then drop it in the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when detected, bring it to the waste area if you're holding it, and stop moving if you reach the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you find one, and if you have a scrap part, then drop it off in the waste area. If you are not carrying anything, move around to find parts.",
    "technical_task": "pick up the part and then go to the base, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or otherwise then search randomly.",
    "spoon_task": "pick up the part and then seek the base area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment while looking for both good and scrap parts. If you find a good part, bring it to the storage area. If you find a scrap part, bring it to the waste area. Additionally, should you encounter a situation where you are holding a part, freeze your movement.",
    "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then go to the waste, or if you detect a part and if you are holding a good part and if you are holding a scrap part then pick up the part, or then search randomly, or if you detect a part and if you are in the source and if you are holding a scrap part then drop the part, or then go to the source, or otherwise if you are holding a good part and if you are in the waste and if you detect a part then pick up the part.",
    "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then seek the waste area, or if you detect a part and if you are holding a good part and if you are holding a scrap part then pick up the part, or then walk randomly, or if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part, or then seek the source area, or otherwise if you are holding a good part and if you are in the waste area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then if you have picked up a good part, find your way to the base area, but if you cannot find the base area, then keep searching around.",
    "technical_task": "pick up the part, or if you detect a part and if you are holding a good part and if you are in the source then go to the base, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or if you detect a part and if you are holding a good part and if you are in the source area then seek the base area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather good parts and bring them to the storage area. If you encounter a scrap part, pick it up and then go to the waste area to drop it.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect a good part, pick it up, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one in the environment.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part you are currently holding.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if so, seek the base area.",
    "technical_task": "if you are in the waste then go to the base.",
    "spoon_task": "if you are in the waste area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good parts you are holding in the storage area, and if you find a scrap part, then pick it up and stop moving.",
    "technical_task": "if you are holding a good part then drop the part, or if you detect a part and if you are in the source then pick up the part, or otherwise then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part, or if you detect a part and if you are in the source area then pick up the part, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to storage, but you need to check that you are not holding a scrap part, you're in the source area, and you detect a good part before dropping it in storage. If you can't find any good parts, you should seek the source area.",
    "technical_task": "if you are holding a scrap part and if you are in the source and if you detect a part then drop the part, or then go to the source, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the source area and if you detect a part then drop the part, or then seek the source area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, drop it in the storage area and then seek the construction area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area if you are in the base area.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a good part, drop it in the storage area, and then move towards the construction area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that you are ready to drop good parts at the base if you find one while in the right area.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up good parts if you find any and then move to the storage area to drop them.",
    "technical_task": "pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the base area. If you find a scrap part, then drop it in the waste area if you are there.",
    "technical_task": "if you are in the source then pick up the part and then go to the base, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then pick up the part and then search randomly.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for any part, and if you detect one, then move towards the source area.",
    "technical_task": "if you detect a part then go to the source.",
    "spoon_task": "if you detect a part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, but only if you are in the source area.",
    "technical_task": "if you are in the source then pick up the part.",
    "spoon_task": "if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part, and if you are in the waste area, then drop it there.",
    "technical_task": "if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check for scrap parts. If you find one, then drop it in the waste area. If you\u2019re in the waste, and you have a scrap part, then stop moving. If you don\u2019t have a scrap part, look for one.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are in the waste and if you are holding a scrap part then drop the part and then stop moving, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then move to the storage area to drop the part.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and if you're in the storage area, drop it there.",
    "technical_task": "if you detect a part and if you are in the storage then drop the part and then stop moving, or if you are holding a good part then drop the part, or otherwise then go to the source.",
    "spoon_task": "if you detect a part and if you are in the storage area then drop the part and then freeze movement, or if you are holding a good part then drop the part, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and then drop it if you are.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, move to the construction area. If you find a scrap part, pick it up and then drop it in the waste area.",
    "technical_task": "if you are in the base then go to the construction, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "if you are in the base area then seek the construction area, or if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are, then move towards the base.",
    "technical_task": "if you are in the waste then go to the base.",
    "spoon_task": "if you are in the waste area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you're holding it, go to the waste area. If you are in the waste area, you should drop it there.",
    "technical_task": "if you detect a part and if you are holding a scrap part then drop the part, or if you detect a part then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then drop the part, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to bring a good part to the storage area, and if you are holding a scrap part, then stop moving and go to the waste area.",
    "technical_task": "drop the part, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area, and if you are, drop any good parts you are holding.",
    "technical_task": "if you are in the storage then drop the part.",
    "spoon_task": "if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one then pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then stay still.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for the waste area.",
    "technical_task": "go to the waste.",
    "spoon_task": "seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, drop them in the waste area when you find them, and if you do not find any, keep searching for more scrap parts.",
    "technical_task": "if you are holding a scrap part then drop the part, or if you are in the waste then drop the part, or if you detect a part then pick up the part and then go to the waste, or then pick up the part and then search randomly, or if you are in the source then search randomly, or otherwise then go to the source.",
    "spoon_task": "if you are holding a scrap part then drop the part, or if you are in the waste area then drop the part, or if you detect a part then pick up the part and then seek the waste area, or then pick up the part and then walk randomly, or if you are in the source area then walk randomly, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when it is detected.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have encountered.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move the agent to the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the waste area and drop any scrap parts you are holding.",
    "technical_task": "if you are in the waste then stop moving, or otherwise if you are holding a scrap part and if you are in the waste then drop the part and then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then move to the waste area to drop it.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then seek the base area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it at the storage area, and if you find a scrap part, bring it to the waste area.",
    "technical_task": "drop the part and then go to the storage, or if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and bring it to the storage area if you are currently holding one and in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate through the environment to find the waste area and stop moving. If you find yourself in the waste area, stay there.",
    "technical_task": "if you are in the waste then stop moving, or otherwise if you are in the base then go to the waste.",
    "spoon_task": "if you are in the waste area then freeze movement, or otherwise if you are in the base area then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the base, and if you find scrap parts, then drop them in the waste area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or otherwise if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or otherwise if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and then freeze your movement.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, move to the waste area to drop it if you find one, and if you don't find a scrap part, then wander randomly until something is detected.",
    "technical_task": "if you detect a part then go to the waste, or then pick up the part, or if you are holding a scrap part then drop the part, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then seek the waste area, or then pick up the part, or if you are holding a scrap part then drop the part, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and then move to the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and if you are in the waste area then drop it; otherwise, navigate randomly.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or then search randomly, or if you detect a part and if you are holding a scrap part and if you are in the source then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or then walk randomly, or if you detect a part and if you are holding a scrap part and if you are in the source area then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you find a good part, then drop it at the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if you are, then drop it at the storage. If you are not holding a good part, then find your way to the base area.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the base then stop moving.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect good parts and bring them to the storage area. If you find a scrap part, then you should locate the waste area.",
    "technical_task": "if you are in the storage then drop the part and then stop moving, or otherwise if you detect a part then go to the waste.",
    "spoon_task": "if you are in the storage area then drop the part and then freeze movement, or otherwise if you detect a part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part in the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you find a scrap part, you should bring it to the waste area.",
    "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then stop moving, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, and if you have it, bring it to the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area only when you are in the base area.",
    "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
    "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather good parts from the source area and take them to the base if you are holding one, otherwise, seek the source area.",
    "technical_task": "if you are holding a good part then drop the part and then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, and if you find one, seek the storage area to drop it off.",
    "technical_task": "if you detect a part then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part in the environment.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search the environment for good parts, and if you find one then bring it to the storage area.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, and if you find one, pick it up and then move to the waste area.",
    "technical_task": "go to the waste, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it to the storage area if you are in the base, and stop moving if you are holding a good part.",
    "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then drop the part and then stop moving, or if you detect a part then pick up the part and then go to the storage, or otherwise then go to the source.",
    "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then drop the part and then freeze movement, or if you detect a part then pick up the part and then seek the storage area, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part if you find one, and if there is no part detected, then walk randomly in the environment.",
    "technical_task": "pick up the part, or then search randomly, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then walk randomly, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it off.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when detected, but only if you are in the source area and you are not already holding another part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area while ensuring you're properly handling both part types.",
    "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or if you are holding a good part then go to the storage, or then pick up the part, or if you detect a part and if you are in the source and if you are holding a scrap part then go to the waste, or then pick up the part, or if you detect a part and if you are in the base and if you are holding a good part then go to the storage, or then drop the part, or if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving, or then pick up the part, or if you are in the source and if you are in the construction and if you detect a part then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or if you are holding a good part then seek the storage area, or then pick up the part, or if you detect a part and if you are in the source area and if you are holding a scrap part then seek the waste area, or then pick up the part, or if you detect a part and if you are in the base area and if you are holding a good part then seek the storage area, or then drop the part, or if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement, or then pick up the part, or if you are in the source area and if you are in the construction area and if you detect a part then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to identify a scrap part, ensure you are in the source area, and then pick it up.",
    "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good parts you are holding. If you are in the storage area, then drop the part. If you find a part in the environment, pick it up.",
    "technical_task": "drop the part, or if you are in the storage then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or if you are in the storage area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to wait until you are in the base area and then freeze your movement.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one and then head to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part, if you find one, go to the waste area, and if you reach the waste area, drop the scrap part. If you are in the waste area, stop moving.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part then go to the waste, or if you are in the waste and if you are holding a scrap part then stop moving, or if you are in the waste and if you are holding a good part then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part then seek the waste area, or if you are in the waste area and if you are holding a scrap part then freeze movement, or if you are in the waste area and if you are holding a good part then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then if you are carrying it, go to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area, and if you are holding a scrap part and are in the waste area, then stop moving.",
    "technical_task": "go to the source, or otherwise if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "seek the source area, or otherwise if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, drop it at the waste area, then move to the storage area.",
    "technical_task": "if you are holding a scrap part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a scrap part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area.",
    "technical_task": "if you detect a part and if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part and if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area. Additionally, if you detect a scrap part while in the process, you should drop it.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then drop it in the storage area. If you detect a scrap part, ensure you stop moving.",
    "technical_task": "pick up the part and then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then drop the part and then go to the source.",
    "spoon_task": "pick up the part and then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then drop the part and then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it off at the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, bring it to the waste area, and stop moving if you are holding a scrap part and are in the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or then drop the part and then go to the waste, or otherwise if you detect a part and if you are in the source and if you are holding a good part then go to the base.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or then drop the part and then seek the waste area, or otherwise if you detect a part and if you are in the source area and if you are holding a good part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check for good parts and scrap parts; if you find a good part, pick it up and go to the base, otherwise, if you find a scrap part, pick it up and go to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then seek the storage area to drop it.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but if you find a scrap part, you should drop it in the waste area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving, or then go to the storage, or otherwise then pick up the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or then seek the storage area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move back to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts and bring them to the waste area, while also ensuring that if you find any good parts, you drop them in the storage area at the base.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you are holding a good part then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the base then drop the part and then go to the waste, or if you are holding a good part then go to the storage, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then stop moving, or if you detect a part then go to the source, or if you detect a part and if you are in the waste and if you are holding a scrap part then drop the part and then stop moving, or if you are in the source then search randomly, or if you detect a part and if you are holding a good part and if you are in the waste then drop the part and then stop moving, or if you are in the base then search randomly, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the base area then drop the part and then seek the waste area, or if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or if you detect a part then seek the source area, or if you detect a part and if you are in the waste area and if you are holding a scrap part then drop the part and then freeze movement, or if you are in the source area then walk randomly, or if you detect a part and if you are holding a good part and if you are in the waste area then drop the part and then freeze movement, or if you are in the base area then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area before seeking the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area, check if you have a good part, and if so, prepare to drop it while making sure you are not in the construction area.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are in the construction then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the construction area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if it is detected, and if not, check if you are in the waste area and then stop moving.",
    "technical_task": "pick up the part, or if you are in the waste then stop moving, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are in the waste area then freeze movement, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to verify that you are in the base area, and if so, prepare to pick up a part.",
    "technical_task": "if you are in the base then go to the source.",
    "spoon_task": "if you are in the base area then seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area, but if you are already holding a scrap part, you should drop it at the waste area.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part, or if you detect a part then go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part, or if you detect a part then seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to explore the environment by moving around, check the source area, and if you find a part, pick it up.",
    "technical_task": "go to the source, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "seek the source area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and, if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the waste area only if you are not holding a part and are currently in the base area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the waste.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and pick it up.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to gather parts, drop them in the correct locations based on their type, and manage your movement throughout the environment.",
    "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or then go to the storage, or if you are in the storage then stop moving, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then stop moving, or if you are holding a good part then go to the base, or if you are holding a scrap part and if you are in the base and if you are in the source then stop moving, or if you are holding a good part then go to the storage, or if you are in the waste and if you are holding a scrap part and if you are in the storage then stop moving, or otherwise if you are in the base then stop moving.",
    "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or then seek the storage area, or if you are in the storage area then freeze movement, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then freeze movement, or if you are holding a good part then seek the base area, or if you are holding a scrap part and if you are in the base area and if you are in the source area then freeze movement, or if you are holding a good part then seek the storage area, or if you are in the waste area and if you are holding a scrap part and if you are in the storage area then freeze movement, or otherwise if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then move towards the storage area to drop the good part.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part that you have detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then freeze to stop moving.",
    "technical_task": "if you detect a part then pick up the part and then stop moving.",
    "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, and then move to the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you're holding a good part, and if you are, drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, ensure you're not holding any scrap parts, and then seek the storage area to drop off any good parts.",
    "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to seek the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part if you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area, and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you hold a good part and are in the base area; if you are in the storage area, drop the good part, and then freeze movement.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving, or otherwise if you are holding a good part then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect any detected scrap parts and bring them to the waste area, stopping if you find none.",
    "technical_task": "pick up the part and then go to the waste, or if you detect a part then pick up the part and then go to the waste, or then drop the part, or then stop moving, or then drop the part, or then pick up the part and then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "pick up the part and then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or then drop the part, or then freeze movement, or then drop the part, or then pick up the part and then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the waste area and if you are, then stop moving.",
    "technical_task": "if you are in the waste then stop moving.",
    "spoon_task": "if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part, and if you are, then drop it off in the waste area.",
    "technical_task": "if you are holding a scrap part then drop the part.",
    "spoon_task": "if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to navigate to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and bring it to the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if so, prepare to move to the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area only if you are currently holding a good part and are in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move randomly through the environment.",
    "technical_task": "search randomly.",
    "spoon_task": "walk randomly.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to wander around the environment until you find the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to continually move and check for parts in the environment, and if you find a part, pick it up and then seek the waste area to drop it.",
    "technical_task": "search randomly, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "walk randomly, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area, and then move towards the base area.",
    "technical_task": "if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when detected.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it back to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then drop it off at the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and once you have it, move to the base area and stop moving if you are there.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the source area, and if you are, then seek the construction area.",
    "technical_task": "if you are in the source then go to the construction.",
    "spoon_task": "if you are in the source area then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you're holding a good part but not in the storage area, go to the storage area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then go to the source.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area, but you can only do this if you are in the source area and holding a good part.",
    "technical_task": "if you are in the source and if you are holding a good part and if you are in the storage then drop the part and then go to the storage.",
    "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then go to the storage area. If you find a scrap part, pick it up, and then go to the waste area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area. If you are in the storage area, then stop moving.",
    "technical_task": "if you are holding a good part then drop the part and then stop moving, or otherwise then go to the storage.",
    "spoon_task": "if you are holding a good part then drop the part and then freeze movement, or otherwise then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then bring it to the storage area.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the base area, and if you find a scrap part, go to the waste area.",
    "technical_task": "pick up the part and then go to the base, or if you detect a part then go to the waste, or otherwise then drop the part.",
    "spoon_task": "pick up the part and then seek the base area, or if you detect a part then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for scrap parts, and if you find one, pick it up and move towards the waste area. If you are holding a scrap part and in the waste area, then drop it. If you detect a good part while moving, go towards the storage area.",
    "technical_task": "if you are holding a scrap part then go to the waste, or if you are in the waste and if you are holding a scrap part then stop moving, or then pick up the part, or if you detect a part and if you are holding a good part and if you are in the base then go to the storage, or otherwise then drop the part.",
    "spoon_task": "if you are holding a scrap part then seek the waste area, or if you are in the waste area and if you are holding a scrap part then freeze movement, or then pick up the part, or if you detect a part and if you are holding a good part and if you are in the base area then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the storage area and if you are holding a good part, then stop moving.",
    "technical_task": "if you are in the storage and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the storage area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check for a good part, pick it up if you find one, and then seek the storage area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area and stop if you are holding a scrap part while also checking if you are in base or waste areas.",
    "technical_task": "stop moving, or otherwise if you are in the base and if you are in the waste and if you are holding a scrap part then stop moving.",
    "spoon_task": "freeze movement, or otherwise if you are in the base area and if you are in the waste area and if you are holding a scrap part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are holding a good part and are in the base area, then drop the part there.",
    "technical_task": "if you are holding a good part and if you are in the base and if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area and if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition> <!-- This condition can be limited here since it's already checked, replacing it with is_agent_holding_scrap_part makes it logic valid instead of a double check -->\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find it and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you're in the source area, and then move towards the storage area.",
    "technical_task": "if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area and if you are holding a good part, then you should stop moving.",
    "technical_task": "if you are in the base and if you are holding a good part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area, and if you are not in the storage area, then pick up a part.",
    "technical_task": "drop the part, or otherwise if you are in the storage then pick up the part.",
    "spoon_task": "drop the part, or otherwise if you are in the storage area then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then head to the base area to drop it off.",
    "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure that the agent holds a good part and is in the base area before stopping movement.",
    "technical_task": "if you are holding a good part and if you are in the base then stop moving.",
    "spoon_task": "if you are holding a good part and if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one and then move towards the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when detected and then move to the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up, and then drop it at the waste area.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then seek the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and ensure that you're in the base area before dropping it off.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to detect any parts in the environment and pick them up. If you are holding a scrap part, go to the waste area. If you are holding a good part, go to the storage area.",
    "technical_task": "if you detect a part then pick up the part, or then drop the part and then go to the storage, or if you are holding a scrap part then drop the part, or otherwise then drop the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part, or then drop the part and then seek the storage area, or if you are holding a scrap part then drop the part, or otherwise then drop the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and drop it in the storage area after confirming you are holding it and are in the base area.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if there's a part nearby, if you find one, drop it in the storage area. If not found, just randomly wander around.",
    "technical_task": "if you detect a part then go to the storage, or then drop the part, or then pick up the part and then go to the storage, or otherwise then search randomly.",
    "spoon_task": "if you detect a part then seek the storage area, or then drop the part, or then pick up the part and then seek the storage area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area to search for parts.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then seek the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up and bring it to the storage area. If you find a scrap part, pick it up and bring it to the waste area. Stop moving when you reach your destination.",
    "technical_task": "if you are in the storage then drop the part and then stop moving, or if you are holding a good part and if you are in the base then go to the storage, or then pick up the part, or if you are holding a scrap part then drop the part and then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you are in the storage area then drop the part and then freeze movement, or if you are holding a good part and if you are in the base area then seek the storage area, or then pick up the part, or if you are holding a scrap part then drop the part and then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you are in the source area and you find one.",
    "technical_task": "if you are in the source and if you detect a part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part and bring it to the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are in the base area, and if you are, then move towards the storage area.",
    "technical_task": "if you are in the base then go to the storage.",
    "spoon_task": "if you are in the base area then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part and bring it to the waste area. If you are holding a scrap part and you reach the waste area, then drop the part.",
    "technical_task": "drop the part and then stop moving, or if you are holding a scrap part and if you are in the waste then drop the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then freeze movement, or if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for parts in the environment, collect a scrap part if you find one, and go to the waste area to drop it. If you don't find a scrap part, keep moving around until you find one.",
    "technical_task": "if you detect a part then pick up the part, or then go to the waste, or then search randomly, or then go to the source, or otherwise then drop the part.",
    "spoon_task": "if you detect a part then pick up the part, or then seek the waste area, or then walk randomly, or then seek the source area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, bring it to the waste area, and if you are holding a scrap part, stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving, or if you detect a part and if you are in the source and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement, or if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and then move to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area.",
    "technical_task": "drop the part.",
    "spoon_task": "drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the storage area.",
    "technical_task": "go to the storage.",
    "spoon_task": "seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move towards the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect all scrap parts from the environment and bring them to the waste area while ensuring you're not picking up any good parts.",
    "technical_task": "pick up the part, or if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or then go to the waste, or if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the source, or then go to the source, or if you detect a part and if you are holding a scrap part and if you are in the storage then drop the part and then go to the waste, or then search randomly, or if you are in the construction and if you detect a part and if you are holding a good part then pick up the part and then go to the source, or then stop moving, or if you are in the base and if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or then seek the waste area, or if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the source area, or then seek the source area, or if you detect a part and if you are holding a scrap part and if you are in the storage area then drop the part and then seek the waste area, or then walk randomly, or if you are in the construction area and if you detect a part and if you are holding a good part then pick up the part and then seek the source area, or then freeze movement, or if you are in the base area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and if you find a scrap part, drop it in the waste area.",
    "technical_task": "if you detect a part then pick up the part, or then drop the part, or if you are holding a good part then drop the part, or if you are holding a scrap part and if you are in the waste then stop moving, or otherwise then go to the source.",
    "spoon_task": "if you detect a part then pick up the part, or then drop the part, or if you are holding a good part then drop the part, or if you are holding a scrap part and if you are in the waste area then freeze movement, or otherwise then seek the source area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area to drop it off.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part only if you are in the source area and you are not holding any parts, and then move back to the base area.",
    "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then go to the base.",
    "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you are in the source area and then move to the base area.",
    "technical_task": "if you detect a part and if you are in the source then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are in the source area then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you're in the waste area, and if you are, prepare to start moving towards the base area.",
    "technical_task": "if you are in the waste then go to the base.",
    "spoon_task": "if you are in the waste area then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts, pick them up, and bring them to the waste area while ensuring the agent does not drop anything in the wrong area.",
    "technical_task": "pick up the part, or if you are holding a scrap part then drop the part, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or if you are in the storage and if you are holding a good part and if you are in the construction then drop the part, or if you are in the waste then drop the part, or if you are in the source and if you are holding a good part and if you are holding a scrap part then pick up the part, or if you detect a part then pick up the part, or if you are in the base and if you are holding a good part and if you are in the waste then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a scrap part then drop the part, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or if you are in the storage area and if you are holding a good part and if you are in the construction area then drop the part, or if you are in the waste area then drop the part, or if you are in the source area and if you are holding a good part and if you are holding a scrap part then pick up the part, or if you detect a part then pick up the part, or if you are in the base area and if you are holding a good part and if you are in the waste area then drop the part, or otherwise if you are holding a scrap part then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one, then move to the storage area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move the agent to the base area.",
    "technical_task": "go to the base.",
    "spoon_task": "seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part, and if you are not holding anything, seek the source area.",
    "technical_task": "pick up the part, or if you are holding a good part and if you are in the source then go to the storage, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or if you are holding a good part and if you are in the source area then seek the storage area, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you are in the source area, you have detected a part, and you are not currently holding a good part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the waste.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if the agent is in the base area and holding a good part to drop it, otherwise, attempt to pick up any part, and finally seek the storage area.",
    "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part, or otherwise then drop the part and then go to the storage.",
    "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then drop the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts and if you find one, drop it off at the storage area.",
    "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part.",
    "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a good part and drop it in the storage area.",
    "technical_task": "if you are holding a good part then drop the part.",
    "spoon_task": "if you are holding a good part then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part at the storage area, and if you don't have a good part, then pick one up.",
    "technical_task": "drop the part and then go to the storage, or otherwise if you are holding a good part then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or otherwise if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find the base area, and if you reach it, then stop moving.",
    "technical_task": "if you are in the base then stop moving.",
    "spoon_task": "if you are in the base area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part, and if so, drop it in the storage area and then seek the construction area.",
    "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
    "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
    "technical_task": "pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, and if you find one, then bring it to the storage area.",
    "technical_task": "if you detect a part then go to the storage, or otherwise if you are holding a good part then drop the part and then stop moving.",
    "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are holding a good part then drop the part and then freeze movement.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the base area.",
    "technical_task": "if you detect a part then pick up the part and then go to the base.",
    "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up if you find any, drop any scrap parts in the waste area, and ensure you are moving to the correct areas.",
    "technical_task": "pick up the part, or then drop the part, or if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or then drop the part, or if you are holding a scrap part and if you are in the waste and if you detect a part then drop the part, or then pick up the part, or if you are in the base and if you are holding a good part and if you detect a part then drop the part, or then drop the part, or if you are in the storage and if you are holding a good part and if you detect a part then pick up the part, or otherwise then drop the part.",
    "spoon_task": "pick up the part, or then drop the part, or if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or then drop the part, or if you are holding a scrap part and if you are in the waste area and if you detect a part then drop the part, or then pick up the part, or if you are in the base area and if you are holding a good part and if you detect a part then drop the part, or then drop the part, or if you are in the storage area and if you are holding a good part and if you detect a part then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have any parts, and if you do, drop them in storage. If you don't have parts, move to the source area to look for more.",
    "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then go to the waste.",
    "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a scrap part then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to continuously search for good parts in the environment, pick them up if you find any, and, if you happen to be holding good parts, bring them back to the storage area. If you are holding scrap parts, drop them in the waste area.",
    "technical_task": "go to the source, or then pick up the part, or if you are holding a good part then go to the storage, or then search randomly, or then drop the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
    "spoon_task": "seek the source area, or then pick up the part, or if you are holding a good part then seek the storage area, or then walk randomly, or then drop the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to search for good parts, pick them up, and if you find a scrap part, go to the waste area and drop it off.",
    "technical_task": "pick up the part, or then drop the part and then go to the waste, or if you detect a part then go to the source, or then search randomly, or otherwise then pick up the part.",
    "spoon_task": "pick up the part, or then drop the part and then seek the waste area, or if you detect a part then seek the source area, or then walk randomly, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a part.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a good part and if you are in the base area, then drop the part.",
    "technical_task": "if you are holding a good part and if you are in the base then drop the part.",
    "spoon_task": "if you are holding a good part and if you are in the base area then drop the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop scrap parts at the waste area after picking them up, and if you see a good part, pick it up as well.",
    "technical_task": "drop the part and then go to the waste, or if you detect a part then pick up the part, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the waste area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you detect one and then go to the waste area.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part if you find one, and then move to the waste area to drop it.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop a good part if you are in the storage area, otherwise find the construction area to stop moving.",
    "technical_task": "drop the part, or then go to the construction, or otherwise then pick up the part.",
    "spoon_task": "drop the part, or then seek the construction area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to ensure you are in the base area while holding a good part, then prepare to drop it off.",
    "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then stop moving.",
    "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part only if you are in the source area and not currently holding any good part.",
    "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
    "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect a scrap part and ensure you are in the waste area before stopping.",
    "technical_task": "if you detect a part and if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you detect a part and if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part when you detect one.",
    "technical_task": "if you detect a part then pick up the part.",
    "spoon_task": "if you detect a part then pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to collect scrap parts, bring them to the waste area, and if you encounter good parts, drop them at the storage area.",
    "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the waste and if you are holding a good part then drop the part and then go to the storage, or then drop the part and then go to the storage, or if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part and then go to the waste, or then pick up the part and then go to the source, or if you are holding a good part and if you are in the storage and if you detect a part then drop the part and then go to the base, or then pick up the part and then go to the waste, or if you are holding a scrap part and if you are in the base and if you are holding a good part then drop the part and then go to the storage, or then drop the part and then go to the base, or otherwise if you detect a part and if you are holding a good part and if you are in the source then pick up the part and then go to the storage.",
    "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the waste area and if you are holding a good part then drop the part and then seek the storage area, or then drop the part and then seek the storage area, or if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part and then seek the waste area, or then pick up the part and then seek the source area, or if you are holding a good part and if you are in the storage area and if you detect a part then drop the part and then seek the base area, or then pick up the part and then seek the waste area, or if you are holding a scrap part and if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or then drop the part and then seek the base area, or otherwise if you detect a part and if you are holding a good part and if you are in the source area then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, bring it to the base, and halt your movement if you detect scrap parts.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then drop the part and then stop moving, or otherwise if you are holding a good part then drop the part and then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then drop the part and then freeze movement, or otherwise if you are holding a good part then drop the part and then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part if you find one and then move to the storage area.",
    "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part and then search randomly.",
    "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a scrap part and take it to the waste area.",
    "technical_task": "pick up the part and then go to the waste.",
    "spoon_task": "pick up the part and then seek the waste area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move to the base area. If you are already in the base area, then stop moving.",
    "technical_task": "if you detect a part and if you are holding a good part and if you are in the base then stop moving, or otherwise if you detect a part then go to the base.",
    "spoon_task": "if you detect a part and if you are holding a good part and if you are in the base area then freeze movement, or otherwise if you detect a part then seek the base area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up any part found, and if you are holding a scrap part, then bring it to the waste area. If you are not holding anything, walk randomly.",
    "technical_task": "pick up the part, or then drop the part, or if you are holding a scrap part then drop the part, or then search randomly, or if you detect a part then pick up the part and then go to the waste, or otherwise then search randomly.",
    "spoon_task": "pick up the part, or then drop the part, or if you are holding a scrap part then drop the part, or then walk randomly, or if you detect a part then pick up the part and then seek the waste area, or otherwise then walk randomly.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to drop any good part you are holding at the storage area, and if you are in the source area, check if you can find any scrap part before moving to the base area.",
    "technical_task": "drop the part and then go to the storage, or if you are in the source and if you detect a part then go to the base, or otherwise then pick up the part.",
    "spoon_task": "drop the part and then seek the storage area, or if you are in the source area and if you detect a part then seek the base area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find scrap parts and bring them to the waste area. If you are holding a scrap part and are in the waste area, then drop it there and stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then drop the part and then stop moving, or if you are holding a scrap part and if you are in the source then go to the waste, or otherwise then pick up the part.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then drop the part and then freeze movement, or if you are holding a scrap part and if you are in the source area then seek the waste area, or otherwise then pick up the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to pick up a good part when you detect one.",
    "technical_task": "pick up the part.",
    "spoon_task": "pick up the part.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to move to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a scrap part, pick it up if you find one, and then move toward the waste area to drop it off.",
    "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are in the waste then drop the part.",
    "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are in the waste area then drop the part.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to go to the source area.",
    "technical_task": "go to the source.",
    "spoon_task": "seek the source area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find good parts and bring them to the storage area.",
    "technical_task": "if you are in the source then go to the storage, or otherwise then pick up the part and then go to the storage.",
    "spoon_task": "if you are in the source area then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you have a scrap part, and if you do, go to the waste area to drop it.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to find a good part, pick it up, and then move towards the storage area.",
    "technical_task": "if you detect a part then pick up the part and then go to the storage.",
    "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
  },
  {
    "layman_task": "Your task is to check if you are holding a scrap part and if you are in the waste area, then stop moving.",
    "technical_task": "if you are holding a scrap part and if you are in the waste then stop moving.",
    "spoon_task": "if you are holding a scrap part and if you are in the waste area then freeze movement.",
    "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
  }
]