[
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, pick them up, and bring them to the waste area.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a scrap part then pick up the part and then go to the waste, or if you detect a part and if you are holding a scrap part then pick up the part, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a scrap part then pick up the part and then seek the waste area, or if you detect a part and if you are holding a scrap part then pick up the part, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is not in the construction area, pick up a part. If the agent is in the construction area, stop moving.",
        "technical_task": "if you are in the construction and if you are in the construction then pick up the part and then stop moving.",
        "spoon_task": "if you are in the construction area and if you are in the construction area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to perform a series of checks in the environment and then take a specific action.",
        "technical_task": "if you are in the base and if you are in the storage then go to the waste, or otherwise if you are in the source and if you are holding a good part and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area then seek the waste area, or otherwise if you are in the source area and if you are holding a good part and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and pick up a part if it is.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base. If you detect a bad part, stop moving.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then drop the part and then stop moving.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, if holding one, stop moving. If not, pick it up.",
        "technical_task": "drop the part, or if you are holding a scrap part and if you are in the waste then drop the part, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "drop the part, or if you are holding a scrap part and if you are in the waste area then drop the part, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then seek the storage area to drop it off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you detect a good part, pick it up.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part and drop it if you are.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once found, bring them to the base for storage.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts and pick them up if detected. If holding a scrap part, move randomly.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise perform a random walk.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once holding a good part, go to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if you are in the source area, and if so, pick up a part and then seek the construction area.",
        "technical_task": "if you are in the source then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it's detected, and if no part is detected, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if it is, pick up a part.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment for any suspicious activity and investigate it. If you spot any unusual behavior, stop the patrol and report back.",
        "technical_task": "if you are in the base then pick up the part, or if you are in the construction and if you are in the source and if you are in the waste then drop the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are in the construction area and if you are in the source area and if you are in the waste area then drop the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts and deliver them to the base storage area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part and then move towards the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you find, but if you enter the base area, stop moving.",
        "technical_task": "search randomly, or otherwise then pick up the part and then stop moving.",
        "spoon_task": "walk randomly, or otherwise then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and holding a good part, then drop the part.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already in the construction area.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and bring them to the construction area in the base.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part then go to the construction, or then drop the part, or then search randomly, or otherwise then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part then seek the construction area, or then drop the part, or then walk randomly, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_construction_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly seek the construction area of the base.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until a scrap part is detected, at which point you must pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area, but if you detect any good parts along the way, pick them up.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if you detect any good parts, head towards the source area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if no part is detected, randomly explore the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part; otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and take action based on the observation.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move constantly in a random manner until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment until a good part is detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If not, check if the agent is in the storage area. If not, check if the agent is in the source area. If so, pick up a part and then move to the waste area.",
        "technical_task": "if you are in the construction and if you are in the storage and if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the construction area and if you are in the storage area and if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts nearby and pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, picking them up when detected, and bringing them to the storage area in the base. If you are not holding a part, seek the source area for more parts.",
        "technical_task": "pick up the part, or if you are holding a good part then pick up the part and then go to the storage, or if you are holding a good part then pick up the part, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are holding a good part then pick up the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then pick up the part and then seek the storage area, or if you are holding a good part then pick up the part, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage without picking up any bad parts. If a bad part is detected, stop moving.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, and if no part is detected, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the condition is met, then pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area in the environment and pick up a good part once you find it.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for and pick up good parts in the environment, and if you are holding a good part, head to the base area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area three times, and then move randomly.",
        "technical_task": "if you are in the construction and if you are in the construction and if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area and if you are in the construction area and if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up and bring them to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and then stop moving.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the storage area, and if so, pick it up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts, avoid scrap parts, and deliver them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or then pick up the part, or otherwise if you are in the source and if you detect a part and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or then pick up the part, or otherwise if you are in the source area and if you detect a part and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If so, pick up a part, otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment and once found, pick them up and head towards the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you detect a part, pick it up.",
        "technical_task": "pick up the part, or then pick up the part and then search randomly, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then pick up the part and then walk randomly, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not holding a good part, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if that's the case.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part whenever it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, then seek the storage area.",
        "technical_task": "if you are in the source then go to the storage.",
        "spoon_task": "if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment and if so, move towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it in the storage area.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if you are in the source area, otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if you are in the construction area and if so, pick up a part; otherwise, seek the construction area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment and drop them off in the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then search randomly, or if you detect a part then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part and then walk randomly, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part and bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or if you are holding a good part and if you are in the base then drop the part, or otherwise if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or if you are holding a good part and if you are in the base area then drop the part, or otherwise if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. When you find a good part, pick it up and head towards the storage area of the base to drop it off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if the agent detects a part, pick it up.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you detect a bad part, immediately stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage, or then search randomly, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or then walk randomly, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and perform an actuator action.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and holding a good part. If both conditions are met, pick up the part.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area whenever you are in the construction area. If you are not in the construction area, just pick up the scrap part.",
        "technical_task": "if you are in the construction and if you are holding a scrap part then drop the part and then go to the construction, or otherwise if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area and if you are holding a scrap part then drop the part and then seek the construction area, or otherwise if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area, and when you arrive, store a good part.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, then drop any part it is holding, otherwise pick up a new part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area, avoiding construction areas. If you detect any scrap parts, stop moving.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are in the base and if you are in the construction then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are in the base area and if you are in the construction area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop and freeze movement if the agent is in the construction area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is not already there and the agent is not holding a scrap part.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are holding a good part, drop it, otherwise move randomly.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. Once a good part is detected and the agent is not already holding a good part, pick it up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when holding a scrap part, head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment, and once detected, head towards the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and bring them to the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment randomly and then move towards the source area.",
        "technical_task": "search randomly, or otherwise then go to the source.",
        "spoon_task": "walk randomly, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected part, and drop it off at the waste area if it's a scrap part.",
        "technical_task": "if you are in the source then pick up the part, or if you detect a part then go to the waste, or then pick up the part and then go to the waste, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you detect a part then seek the waste area, or then pick up the part and then seek the waste area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, in the source area, and holding a good part, then pick up the part and move towards the storage area.",
        "technical_task": "if you are in the construction and if you are in the source and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the construction area and if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent detects a part, pick it up. If the agent is in a specific area, stop and perform a state action.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are in the storage then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and holding a scrap part, and if so, stop the agent's movement.",
        "technical_task": "if you are in the construction and if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are in the construction area and if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them in the construction area of the base.",
        "technical_task": "if you are in the source then pick up the part, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up parts when detected, and dropping them in the waste area.",
        "technical_task": "pick up the part and then go to the waste, or if you detect a part then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or if you detect a part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and if the agent is holding any good parts, bring them to the storage area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoid obstacles, and head towards the base area.",
        "technical_task": "if you are in the source and if you are in the waste and if you are in the construction then go to the base, or otherwise then go to the source.",
        "spoon_task": "if you are in the source area and if you are in the waste area and if you are in the construction area then seek the base area, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected parts, and freeze movement when holding scrap parts.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if holding a good part, head to the base storage area. If not holding anything, continue seeking good parts in the source area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up if detected. Once holding a good part, bring it to the base area.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, freeze movement.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek good parts in the environment and stop moving if you are holding a good part.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until a specific condition is met.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head towards the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, drop any part it is holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times consecutively and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part. If not, seek the construction area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts once you reach there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to investigate the environment for good parts and pick them up if detected.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, checking for the presence of good parts along the way. If a good part is detected, pick it up. If you are in the base area, drop any parts you are holding.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then search randomly, or then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then walk randomly, or then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and bring them to the base's storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across and bring them to the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts and head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, then pick them up and go to the storage area in the base to drop them.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage, or if you are in the base and if you are holding a good part and if you are in the storage then drop the part, or otherwise if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part, or otherwise if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part and then seek the source area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the source.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not holding a good part then check if it is in the storage area. If none of these conditions are met, then move to the source area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find in the environment and then move towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area in the environment and drop any scrap parts you are holding there.",
        "technical_task": "if you are in the base and if you are in the construction then go to the construction, or if you are in the construction then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the construction area then seek the construction area, or if you are in the construction area then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and pick them up, but if the agent is already holding a good part, it should stop exploration.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area. If holding a good part, head towards the base area.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly unless you detect a part.",
        "technical_task": "if you detect a part then search randomly.",
        "spoon_task": "if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already in the base area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them back to the construction area.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not, keep moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you encounter a good part, pick it up but if you come across a bad part, ignore it and keep moving.",
        "technical_task": "if you are holding a good part then search randomly, or otherwise if you are holding a scrap part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly, or otherwise if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good parts encountered.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment and bring it to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if not, pick up a good part.",
        "technical_task": "if you are in the storage and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment and then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once found, pick them up.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, change the internal state to seek the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area at the base.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, avoiding the construction area and seeking the waste area to drop any scrap parts found.",
        "technical_task": "if you are in the base and if you are in the construction then go to the waste, or otherwise if you are in the base then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the construction area then seek the waste area, or otherwise if you are in the base area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and then seek the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are currently holding a good part, head to the storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, seeking the base area if not holding any part.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. If you detect any good parts, pick them up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a scrap part then drop the part, or if you are in the source then go to the construction, or if you are in the waste and if you detect a part and if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a scrap part then drop the part, or if you are in the source area then seek the construction area, or if you are in the waste area and if you detect a part and if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "The goal is to pick up any good parts you detect while you explore the environment.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base, while avoiding bad parts.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and only stop moving when you are in the storage area at the base.",
        "technical_task": "if you are in the storage then drop the part and then go to the base, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the base area, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and upon detecting one, immediately pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected. If a good part is detected, pick it up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the source area and pick them up, then move towards the base and store them in the storage area. If you are holding a good part and are in the base area, drop it in the storage area.",
        "technical_task": "pick up the part and then go to the source, or then pick up the part, or then go to the base, or then go to the storage, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the source area, or then pick up the part, or then seek the base area, or then seek the storage area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row before picking up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and randomly move around.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area while avoiding the construction area.",
        "technical_task": "pick up the part and then go to the waste, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part. If the agent is not in the source area, seek the source area.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them back to the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise, keep moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, drop that part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the base area and stop moving if you are holding a good part.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area when holding a bad part, and if a good part is detected, pick it up and then continue moving randomly.",
        "technical_task": "go to the waste, or if you are holding a scrap part then drop the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "seek the waste area, or if you are holding a scrap part then drop the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to drop any parts the agent is holding.",
        "technical_task": "drop the part.",
        "spoon_task": "drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or if you are holding a good part then pick up the part, or otherwise then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a good part then pick up the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area once a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up. If you detect a good part, immediately head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect and pick up a good part if it is detected, otherwise seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find in the environment and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, then immediately stop moving if it is true, otherwise continue searching.",
        "technical_task": "if you are in the construction and if you are in the storage and if you are in the base then search randomly.",
        "spoon_task": "if you are in the construction area and if you are in the storage area and if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and seek the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, move towards the base storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts in the environment and bring them to the construction area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the construction then drop the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the construction area then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row, then pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding any part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and store them in the storage area of the base.",
        "technical_task": "go to the storage.",
        "spoon_task": "seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and once you enter the source area, start picking up good parts.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source, or if you are in the source and if you are holding a good part and if you detect a part then go to the source, or otherwise if you are in the source then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or if you are in the source area and if you are holding a good part and if you detect a part then seek the source area, or otherwise if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, pick them up, and then head towards the base construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, then pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any part detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it is, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby, and if you see one, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and then perform a specific action.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if you are already holding a good part, drop it.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts when detected, and dropping them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area without stopping.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree> \n    <Sequence> \n        <StateAction>state_seek_base_area</StateAction> \n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you see any good parts, pick them up and head towards the base area.",
        "technical_task": "search randomly, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "walk randomly, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up good parts whenever detected, and bringing them to the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are in the base then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are in the base area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and store it in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, then pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, and once found, store them in the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, bring them to the storage area of the base, and drop them there. If you detect a bad part, stop moving.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part and if you are holding a scrap part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a scrap part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment and drop them in the waste area.",
        "technical_task": "pick up the part and then go to the waste, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area while avoiding stopping only if a scrap part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is not in the storage area, then seek the storage area. Otherwise, stop moving.",
        "technical_task": "if you are in the storage and if you are in the storage then stop moving.",
        "spoon_task": "if you are in the storage area and if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then pick up the part and then go to the storage, or if you detect a part then pick up the part, or otherwise if you are in the base and if you are holding a good part and if you are in the storage then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part and then seek the storage area, or if you detect a part then pick up the part, or otherwise if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up any good parts in the environment.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment until it detects a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the source area and pick up any detected part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the based area, dropping them if in the storage area, but if you are holding a good part and detect a scrap part, stop moving.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then stop moving, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected; otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, then move towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the base area until you reach the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is in the source area three times in a row, and then move towards the waste area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is, then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and stop moving if the agent detects a part.",
        "technical_task": "search randomly, or otherwise then stop moving.",
        "spoon_task": "walk randomly, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is near good parts and if so, start moving towards them.",
        "technical_task": "if you are in the source and if you detect a part then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby, and if found, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly and pick up any good parts you come across.",
        "technical_task": "search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and pick up a part if detected.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to actively search for scrap parts in the environment and pick them up when they are detected.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are in the source then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are in the source area then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and store them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to detect and pick up any good parts found, then bring them to the base area for storage.",
        "technical_task": "search randomly, or if you detect a part then pick up the part and then go to the base, or then pick up the part and then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, drop the part in the storage area. Otherwise, seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment, pick them up if found, and head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the different areas of the environment and if you detect a part, pick it up. If you are in the storage area, drop the part there.",
        "technical_task": "pick up the part and then search randomly, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a scrap part in the environment, pick it up, and then head towards the source area for further exploration.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if holding a good part then drop it.",
        "technical_task": "if you are in the source and if you detect a part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move around in a random pattern throughout the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find and avoiding bad parts. If you are holding a good part, head towards the storage area in the base to drop it off.",
        "technical_task": "if you are holding a good part then search randomly, or if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then search randomly, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then walk randomly, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area at the base. If an agent is holding a good part, it should move towards the storage area. If the agent is not holding a good part, it should search for good parts.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and bring them to the storage area of the base, while seeking the source area.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part then go to the source.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up good parts, and drop them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or if you are in the storage then drop the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or if you are in the storage area then drop the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the source area and pick it up.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, pick up a part and then head towards the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "go to the source, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, locate any good parts, and drop them in the storage area of the base whenever you are there. If you detect any bad parts, immediately stop moving.",
        "technical_task": "if you are in the base then drop the part, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area then drop the part, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only when it's detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts whenever they are detected, and bring them to the construction area while making sure you are not in the base or storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are in the base and if you are in the storage and if you are in the construction then go to the source, or otherwise if you are in the source then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or otherwise if you are in the source area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts found, and head towards the source area to search for more good parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the source, or if you are in the source and if you detect a part then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area, or if you are in the source area and if you detect a part then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously navigate towards the source area in search of good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part, and if so, pick it up; otherwise, seek the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is in the source area, if so then pick up a part, otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part. If not in the source area, move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for and pick up any good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the environment, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if an agent is holding a scrap part, then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up while also ensuring you are not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head to the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if an obstacle is detected, stop moving.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, then proceed to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the source area to collect good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a good part when detected.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the construction area and stop there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you encounter any bad parts, stop picking up parts.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you are in the base and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area of the environment, pick them up, and head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment and then head towards the base storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and wait there.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the construction area for good parts, and when holding a good part, move to the storage area.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them in the storage area of the base whenever you are holding one.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area but stop if there's a detected obstacle.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if not, pick up a part.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area for good parts and pick them up, while avoiding picking up bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the source, or if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the source area, or if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the base for storage.",
        "technical_task": "if you are in the source then go to the base, or if you are in the source then go to the base, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are in the source area then seek the base area, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the base area and pick up any good parts you encounter.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them off in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and then seek the storage area to drop it off.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage, or then search randomly, or otherwise if you are in the source and if you are holding a good part and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area, or then walk randomly, or otherwise if you are in the source area and if you are holding a good part and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the base area and collect them.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area. If you encounter a bad part, stop moving completely.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a good part and if you are in the storage then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a good part and if you are in the storage area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if not, move towards the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when the agent detects it in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment, picking up any good parts you find while avoiding the source area.",
        "technical_task": "if you are in the source then pick up the part and then search randomly, or if you are holding a good part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly, or if you are holding a good part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for any part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect scrap parts in the waste area and stop moving if holding a scrap part or if two scrap parts are detected.",
        "technical_task": "if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving.",
        "spoon_task": "if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the source area, while avoiding the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source, or if you are holding a good part then go to the source, or otherwise then drop the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area, or if you are holding a good part then seek the source area, or otherwise then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. If you encounter any good part, pick it up.",
        "technical_task": "if you are in the source then pick up the part, or if you are in the waste and if you are holding a scrap part and if you detect a part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are in the waste area and if you are holding a scrap part and if you detect a part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for any good parts. If the agent detects a part, pick it up and continue exploring.",
        "technical_task": "if you detect a part then search randomly, or if you are holding a good part then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or if you are holding a good part then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and if not, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for a good part and bring it to the storage area of the base if found.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area only when holding a good part.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek and move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area and if you detect any parts, pick them up.",
        "technical_task": "go to the source, or otherwise then go to the source.",
        "spoon_task": "seek the source area, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and if you find any, pick them up. If you are not holding a good part, keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and start building.",
        "technical_task": "drop the part and then go to the construction.",
        "spoon_task": "drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and once you have one, bring it to the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area at the base. If you detect a part while not holding anything, pick it up.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up good parts in the environment, then drop them in the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or if you are holding a good part then go to the base, or otherwise if you are holding a scrap part then drop the part and then go to the storage.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you are holding a good part then seek the base area, or otherwise if you are holding a scrap part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. If you detect a scrap part, pick it up immediately.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the construction, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the construction area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment searching for good parts to pick up and bring back to the storage area in the base. If there are no good parts nearby, perform a random movement.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or then search randomly, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or then walk randomly, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas in the environment, pick up a part if detected, and head towards a specific area if certain conditions are met.",
        "technical_task": "if you are in the construction then go to the source, or otherwise if you are in the base and if you are holding a good part and if you are holding a scrap part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the construction area then seek the source area, or otherwise if you are in the base area and if you are holding a good part and if you are holding a scrap part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect the presence of good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area upon detecting one.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the construction area. If you are not holding any parts, go to the source area to find more.",
        "technical_task": "if you are holding a good part then go to the construction, or if you are holding a good part then drop the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the construction area, or if you are holding a good part then drop the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if you are not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it immediately.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are in the base then pick up the part, or otherwise if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are in the base area then pick up the part, or otherwise if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up a part upon detection, and freeze movement if the agent is already holding a scrap part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is in the base area, and if so, pick up any part found.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and go to the storage area to drop them off.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and store them in the storage area of the base. If you encounter any bad parts, stop picking them up.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are holding a good part then pick up the part, or if you are holding a scrap part then drop the part, or then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a good part then pick up the part, or if you are holding a scrap part then drop the part, or then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up any good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to locate a good part. Once found, pick it up and head towards the base area.",
        "technical_task": "if you are in the base then go to the source, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the source area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n            \n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and then seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and store them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base's storage area.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if there is one nearby.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part three times in a row, then proceed to seek the construction area.",
        "technical_task": "if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then go to the construction.",
        "spoon_task": "if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up good parts whenever detected, and heading towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or otherwise if you are in the storage and if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or otherwise if you are in the storage area and if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment, and when you detect one, pick it up and head towards the waste area.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, proceed to seek the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly in the environment until you find a good part to pick up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and drop them in the base storage area.",
        "technical_task": "if you detect a part and if you are in the source then pick up the part.",
        "spoon_task": "if you detect a part and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>    \n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, and if you are holding a good part, head towards the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then head towards the base.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and stop when you arrive there.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts until you are in the waste area, then drop them.",
        "technical_task": "if you detect a part then go to the waste, or if you are in the waste then drop the part, or if you are holding a scrap part then search randomly, or then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the waste area, or if you are in the waste area then drop the part, or if you are holding a scrap part then walk randomly, or then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and stop if you encounter an obstacle.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, change the internal state to move towards the construction area.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the source area and bring them to the construction area, then randomly roam around if no scrap parts are detected.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment for any part, pick it up if found, and then continue moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the base for storage while ensuring you freeze movement when holding a good part.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or otherwise if you are in the base then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or otherwise if you are in the base area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n   <Sequence>\n       <ActuatorAction>pick_up_part</ActuatorAction>\n   </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if an agent is holding a good part, otherwise continue searching for parts in the environment.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area to dispose of bad parts.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, to pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part from there.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to determine if the agent is holding a good part and pick it up if so.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect and then move to the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if the agent detects a good part, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any detected parts, and then seek the construction area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part from the source area and bring it to the base, while avoiding any bad parts detected in the environment.",
        "technical_task": "if you detect a part then drop the part and then go to the base.",
        "spoon_task": "if you detect a part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the base area.",
        "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and when you find one, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, then check if the agent is in the construction area. If in neither, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, then move randomly.",
        "technical_task": "if you are holding a good part and if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part and if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, pick up a part.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you come across, and if you don't find any good parts, freeze your movement.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are holding a good part, bring it to the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect scrap parts and head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then start seeking for the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part; otherwise, seek the source area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the source.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and head towards the construction area.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, then check if the agent is holding a good part. If both conditions are met, drop the part.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up good parts when detected, avoid holding scrap parts for too long, and seek the base area to drop the collected parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or then search randomly, or if you are holding a scrap part then drop the part and then search randomly, or then drop the part, or then pick up the part and then go to the base, or otherwise then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or then walk randomly, or if you are holding a scrap part then drop the part and then walk randomly, or then drop the part, or then pick up the part and then seek the base area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up good parts in the environment, and when you are in the source area, drop them there.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source, or otherwise if you detect a part and if you are in the source then drop the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area, or otherwise if you detect a part and if you are in the source area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the base area for good parts, pick them up, and then head towards the storage area to drop them off.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent detects a part, pick it up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up if detected, and then move towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify the source area in the environment and if an agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then seek the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise if you are in the base then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part, pick it up, and proceed to the storage area in the base to drop it.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then go to the storage, or if you are holding a good part and if you are in the storage then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, and if you are not already holding a good part.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts you find, and then head towards the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts, pick them up, and bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected within the base area.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area, and if you are holding a good part, drop it there.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the construction area and then immediately move to the source area.",
        "technical_task": "if you are in the construction and if you are in the source then go to the source.",
        "spoon_task": "if you are in the construction area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in different areas and act accordingly based on the area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then drop the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and drop any good parts found.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part and move randomly.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the base, or otherwise then go to the storage.",
        "spoon_task": "seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, checking for any obstacles and picking them up if detected.",
        "technical_task": "pick up the part, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area to search for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, and if the agent is not holding any part, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the environment and if the agent is holding a good part, go to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the base area and enter it.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and store them in the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction, or otherwise then drop the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area, or otherwise then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there is a good part in the environment and pick it up if found.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and if you find any, bring them to the storage area of the base. If you are in the storage area holding a good part, drop it there.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if not, move towards the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part. If the agent is not in the source area, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n<Sequence>\n    <Condition>is_agent_in_source_area</Condition>\n    <ActuatorAction>pick_up_part</ActuatorAction>\n    <StateAction>state_seek_source_area</StateAction>\n</Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a scrap part. If you are holding a scrap part, drop it. If not, then move randomly.",
        "technical_task": "if you are holding a scrap part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and move towards the base area while avoiding scrap parts. If you detect scrap parts, stop moving.",
        "technical_task": "if you are in the source then go to the base, or then pick up the part and then go to the base, or otherwise if you are holding a scrap part and if you are in the source and if you are in the waste then stop moving.",
        "spoon_task": "if you are in the source area then seek the base area, or then pick up the part and then seek the base area, or otherwise if you are holding a scrap part and if you are in the source area and if you are in the waste area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is not holding any part, move randomly in the area.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base construction area.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then move towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base, pick up any good parts if found, and drop them in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area of the environment and pick up good parts when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, move to the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, bring them to the base area, and then store them in the storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or otherwise if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or otherwise if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and freeze movement if a specific condition is met.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and pick up a good part if detected.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, stopping movement once you are in the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any parts you encounter.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you detect a good part, pick it up and then seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source, or if you are in the construction then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area, or if you are in the construction area then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for any good parts in the environment, and when you find one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is near a good part, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and deliver them to the storage area in the base, while avoiding bad parts.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when one is detected, and if the agent is in the base area, drop the part there.",
        "technical_task": "if you are in the base then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area to collect good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check three specific conditions before performing an actuator action.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if the agent detects a part.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part first, and if it is in the storage area, then proceed to seek the source area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously pick up good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, picking them up when found and bringing them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts if detected, or if no good parts are detected, move towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you reach the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area but stop if the agent detects a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area when a part is detected there.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and move towards the storage area of the base.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is holding a good part and if not, pick up a good part and then seek the storage area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, drop them off in the storage area of the base, and if you detect any bad parts, stop moving.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then drop the part and then search randomly, or if you detect a part then stop moving, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then walk randomly, or if you detect a part then freeze movement, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and then bring them back to the base for storage.",
        "technical_task": "if you are in the source then pick up the part, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, but if the agent is already holding a scrap part, drop it.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move in a random pattern in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the base area and immediately stop moving if a bad part is detected.",
        "technical_task": "if you are in the base then drop the part and then go to the base, or otherwise then stop moving.",
        "spoon_task": "if you are in the base area then drop the part and then seek the base area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base area, dropping them off when you arrive.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the base area, pick it up, and then head towards the storage area to drop it off. If no good part is detected in the base area, head towards the source area.",
        "technical_task": "if you detect a part and if you are in the base then go to the storage, or if you are holding a good part then go to the storage, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part and if you are in the base area then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the base for storage. If you are holding a good part, drop it in the storage area. Otherwise, continue searching for good parts.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are in the source then go to the base, or then pick up the part, or then drop the part and then go to the storage, or then pick up the part, or then search randomly, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are in the source area then seek the base area, or then pick up the part, or then drop the part and then seek the storage area, or then pick up the part, or then walk randomly, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any good parts detected, and bring them to the base storage area.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base, avoiding bad parts. If you encounter a bad part, stop moving.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are holding a good part and if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are holding a good part and if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area of the base if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up. If you are not already holding a part, pick up any good part you detect.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and randomly move around until a part is detected, then stop and perform a state action.",
        "technical_task": "pick up the part and then search randomly, or otherwise then stop moving.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if one is being held.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a good part, pick it up, and then bring it to the base storage area.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area while avoiding the waste area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts, avoid bad parts, and bring the good parts to the storage area in the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage, or otherwise if you are in the source and if you are holding a scrap part then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area, or otherwise if you are in the source area and if you are holding a scrap part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any part you come across and dropping it when you reach the base area.",
        "technical_task": "if you detect a part then pick up the part, or if you are in the base then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are in the base area then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up good parts, and drop them in the storage area of the base.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek and move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it's detected, and if you are holding a good part, move to the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then navigate towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you detect a good part, pick it up.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any scrap parts you find, and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not holding any parts.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you arrive, start searching for any parts.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or otherwise then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment and, upon detection, move towards the waste area to drop them off. If the agent is already in the waste area, it should start searching for scrap parts again.",
        "technical_task": "if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or then drop the part, or otherwise if you are in the waste then go to the source.",
        "spoon_task": "if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or then drop the part, or otherwise if you are in the waste area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, detect any good parts, and head towards the source area to find more good parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the source, or if you are in the storage and if you are in the construction and if you are in the waste then go to the source, or otherwise then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area, or if you are in the storage area and if you are in the construction area and if you are in the waste area then seek the source area, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then stop moving.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it's detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a scrap part in your possession and drop it if it is.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for and pick up scrap parts in the environment, then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base storage area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area, while avoiding picking up good parts.",
        "technical_task": "pick up the part and then go to the waste, or if you detect a part then go to the waste, or then drop the part and then search randomly, or then pick up the part and then go to the waste, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "pick up the part and then seek the waste area, or if you detect a part then seek the waste area, or then drop the part and then walk randomly, or then pick up the part and then seek the waste area, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a good part and then pick it up.",
        "technical_task": "if you are holding a good part then go to the source, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the source area, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and freeze your movement when you are in the storage area.",
        "technical_task": "go to the source, or then pick up the part and then stop moving, or if you are in the storage then search randomly, or if you are holding a good part then search randomly, or if you detect a part then pick up the part, or then drop the part, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or then pick up the part and then freeze movement, or if you are in the storage area then walk randomly, or if you are holding a good part then walk randomly, or if you detect a part then pick up the part, or then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find the best path to the source area, making sure you are not already holding a good part and avoiding stopping unless absolutely necessary.",
        "technical_task": "if you are holding a good part then go to the source, or otherwise if you are in the storage and if you are in the waste and if you are in the base then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area, or otherwise if you are in the storage area and if you are in the waste area and if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the base area and freeze movement upon arrival.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and stop when you reach there.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the storage area in the base if holding a good part, otherwise, freeze your movement.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base for storage.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and when holding a good part, seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to collect good parts in the environment and deliver them to the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or if you are in the storage then drop the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or if you are in the storage area then drop the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, picking them up if detected, and if not holding a good part, move freely.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and drop any good parts you are holding there.",
        "technical_task": "if you are in the base then drop the part, or otherwise if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then drop the part, or otherwise if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up any parts you detect.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a scrap part only if it is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base. If you detect any bad parts, freeze your movement.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then drop the part and then stop moving.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row, then move towards the source area.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then go to the source.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and move randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the storage area in the base, and freeze movement when holding a good part.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then stop moving, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment to search for good parts, pick them up, and bring them to the base.",
        "technical_task": "if you are in the storage and if you are holding a good part and if you detect a part then pick up the part, or otherwise if you are in the storage and if you are holding a good part and if you detect a part then go to the base.",
        "spoon_task": "if you are in the storage area and if you are holding a good part and if you detect a part then pick up the part, or otherwise if you are in the storage area and if you are holding a good part and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any parts.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the source area for good parts, and if you have a good part, bring it to the base.",
        "technical_task": "if you are in the source and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage while avoiding bad parts.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part and if you are in the source then stop moving, or if you detect a part then go to the base, or if you detect a part and if you are holding a good part and if you are in the source then stop moving, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part and if you are in the source area then freeze movement, or if you detect a part then seek the base area, or if you detect a part and if you are holding a good part and if you are in the source area then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if not, move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are in the source then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are in the source area then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the base then go to the source, or if you are in the source then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the source area, or if you are in the source area then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek for good parts in the environment and head towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then go to the base, or if you are in the base then drop the part and then go to the storage, or if you are in the storage then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then seek the base area, or if you are in the base area then drop the part and then seek the storage area, or if you are in the storage area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if you find one, head towards the storage area, and if not, randomly move around.",
        "technical_task": "go to the source, or if you detect a part then go to the storage, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then seek the storage area, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep randomly moving in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part. Otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and if not, continue with a random walk.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect and pick up any good part in the environment and then seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find in the environment and bring them back to the base in the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if not, actively seek the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, pick them up, and bring them to the base storage area for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are in the source then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are in the source area then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base storage area, avoiding bad parts.",
        "technical_task": "go to the base, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any detected part.",
        "technical_task": "if you are in the source and if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up, but if you find a scrap part, drop it immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, detect if there are any good parts, and if not holding any scrap parts, move randomly.",
        "technical_task": "go to the base, or otherwise if you detect a part then go to the source.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you detect in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts detected, and drop them in the base's storage area.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then go to the storage, or if you are in the base then stop moving, or then pick up the part and then go to the base, or if you are in the storage and if you are in the source and if you are in the waste then search randomly, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then seek the storage area, or if you are in the base area then freeze movement, or then pick up the part and then seek the base area, or if you are in the storage area and if you are in the source area and if you are in the waste area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and bring them to the storage area in the base. If you detect a part, pick it up and move towards the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the construction area while avoiding bad parts.",
        "technical_task": "pick up the part, or if you are holding a good part and if you are in the storage then drop the part, or otherwise then go to the construction.",
        "spoon_task": "pick up the part, or if you are holding a good part and if you are in the storage area then drop the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until you find a good part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the base, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once you pick one up, bring it to the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The objective is to explore the environment for good parts, pick them up, and move towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then go to the base, or if you are holding a good part then drop the part and then go to the base, or then pick up the part and then go to the base, or if you are in the storage then drop the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then seek the base area, or if you are holding a good part then drop the part and then seek the base area, or then pick up the part and then seek the base area, or if you are in the storage area then drop the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate a good part in the environment and bring it to the base, storing it in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up a part if one is detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and if a good part is detected, pick it up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if not, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and immediately stop moving if a good part is detected.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area, and if so, pick up a part, and then seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area if a good part is detected.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment and pick up any good parts you come across.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, move towards the storage area.",
        "technical_task": "if you are in the source then go to the storage.",
        "spoon_task": "if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part and drop it in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any detected good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area and pick up a part if one is detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment,  pick up any good part you come across, and drop it in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up a good part if detected, and if holding a good part, bring it to the storage area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts around the base area and drop them in the waste area.",
        "technical_task": "if you are in the base then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and if you are not holding any scrap parts, pick up any detected scrap part.",
        "technical_task": "if you are holding a scrap part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If the agent is holding a good part, head to the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect any scrap part in the environment, pick it up if found, and then seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up a part if detected, and if holding a good part, bring it to the base.",
        "technical_task": "if you are in the source then go to the base, or then search randomly, or if you detect a part then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the base area, or then walk randomly, or if you detect a part then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, move towards the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment, pick it up, and head towards the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area three times in a row and then pick up a part.",
        "technical_task": "if you are in the construction and if you are in the construction and if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area and if you are in the construction area and if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any scrap parts nearby and pick them up. If there are no scrap parts, then move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any parts you find, avoiding getting stuck.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then pick up the part and then search randomly, or if you are in the waste then drop the part, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then pick up the part and then walk randomly, or if you are in the waste area then drop the part, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good parts you come across.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check the surroundings for any scrap parts and move towards the construction area.",
        "technical_task": "if you detect a part and if you are in the base and if you are in the construction then go to the construction.",
        "spoon_task": "if you detect a part and if you are in the base area and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area as long as you're not already holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the source area and then pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment randomly until a good part is detected, then pick it up.",
        "technical_task": "search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area of the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area, targeting the storage area to drop them off.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or if you detect a part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or if you detect a part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, then seek the source area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up good parts when detected, and drop them in the storage area of the base. If you are in the base, stop moving.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or if you are in the source then pick up the part and then go to the base, or if you are in the construction then pick up the part, or then pick up the part, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or if you are in the source area then pick up the part and then seek the base area, or if you are in the construction area then pick up the part, or then pick up the part, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore different areas of the environment and, upon detecting a good part, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up when detected.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected and then proceed to seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas, pick up good parts in the storage area, drop them off in the construction area, and freeze movement if you encounter any bad parts along the way.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the construction, or if you are in the source then drop the part and then go to the waste, or if you are in the construction and if you are in the base and if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the construction area, or if you are in the source area then drop the part and then seek the waste area, or if you are in the construction area and if you are in the base area and if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until you detect a part, then pick it up.",
        "technical_task": "search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and drop them in the storage area of the base. If the agent is not holding a good part, it should stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up good parts, and store them in the storage area. If the agent is not holding a good part, it should seek the source area.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then go to the storage, or if you are holding a good part then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then seek the storage area, or if you are holding a good part then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area.",
        "technical_task": "if you are in the source then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and deliver them to the waste area, avoiding holding any good parts.",
        "technical_task": "if you are holding a good part then go to the waste, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and head towards the storage area to drop them off.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up good parts if detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, where you should drop them in the storage area.",
        "technical_task": "if you detect a part then go to the base, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up any detected part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and head towards the source area.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the source area, pick them up, and then move towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for and pick up scrap parts in the environment.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is not holding any parts.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them back to the base storage area while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, if so then pick up a part, else move towards the storage area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment, bring them to the waste area, and then stop moving.",
        "technical_task": "pick up the part and then go to the waste, or if you are holding a scrap part then drop the part and then stop moving, or if you detect a part and if you are in the waste then stop moving, or if you detect a part and if you are in the waste then drop the part and then stop moving, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the waste area, or if you are holding a scrap part then drop the part and then freeze movement, or if you detect a part and if you are in the waste area then freeze movement, or if you detect a part and if you are in the waste area then drop the part and then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area, but if the agent is holding a good part, it should stop moving.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and stop when you reach there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area while holding a good part, pick it up, and then proceed to the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area when no conditions are met, and if a certain condition is met, then perform a specific action.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the base area and drop them in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly until a good part is detected, then pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts in the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find all the good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or then drop the part and then go to the storage, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or then drop the part and then seek the storage area, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the storage area for good parts, pick them up, and then seek the construction area.",
        "technical_task": "if you are in the storage and if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts, and when you find one, pick it up.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times consecutively and then seek the construction area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the construction.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base, stopping if you already have a good part.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, change the state to seek the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise keep moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if not, move there.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once detected, pick them up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and when holding a good part, head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any detected part, and move freely within the environment.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base storage area.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, then if the agent is holding a good part, pick it up, and finally seek the waste area.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and start building once you arrive there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts, and if the agent is holding a good part, drop it in the storage area.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, picking them up when detected, and freeze movement if holding a scrap part.",
        "technical_task": "if you are in the source and if you are holding a scrap part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and stop moving upon detecting a good part.",
        "technical_task": "search randomly, or otherwise if you detect a part then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment, if a part is detected, and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, and if an agent is detected in a restricted area, approach and capture them.",
        "technical_task": "if you are in the base then pick up the part, or then go to the construction, or otherwise if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or then seek the construction area, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the base area for good parts and pick them up, then move to the storage area to drop them off.",
        "technical_task": "if you detect a part and if you are in the base then go to the storage, or otherwise if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you detect a part and if you are in the base area then seek the storage area, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and halt if you are already in the base area.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, perform an actuator action.",
        "technical_task": "if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment, pick them up, and then head towards the base. If you are already in the base, drop the part there.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to direct the agent to the base construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part, then pick it up.",
        "technical_task": "pick up the part, or otherwise if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, go to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area, and upon arrival, freeze your movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is any good part in your vicinity and pick it up if it's available.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and holding a good part. If both conditions are met, the agent should head towards the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If not, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any good parts you detect, then bring them to the base for storage.",
        "technical_task": "go to the source, or otherwise if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part, if found, pick it up and head towards the base's storage area. If you are not holding a good part, move randomly.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and go to the construction area when holding a good part.",
        "technical_task": "if you are holding a good part and if you are in the construction then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and move towards the base.",
        "technical_task": "if you are in the base then pick up the part, or otherwise if you detect a part then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part, or otherwise if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, holding onto them until you reach the waste area, where you can then drop them.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the base area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any detected parts, drop them in the storage area of the base, and freeze movement if holding a scrap part.",
        "technical_task": "if you are in the source then pick up the part, or then pick up the part and then go to the storage, or then stop moving, or then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or then pick up the part and then seek the storage area, or then freeze movement, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area if you are not already there, then enter the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start picking up any detected parts.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and head towards the source area to search for more parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the source, or if you are in the storage and if you detect a part and if you are holding a good part then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area, or if you are in the storage area and if you detect a part and if you are holding a good part then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across in the environment and seek the storage area to drop them off.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if you are holding a good part, bring it to the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts nearby, pick them up, and then transition to seeking the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and, if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if holding a good part, head to the base area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, detect good parts, and seek the construction area.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you detect in the environment, but if you are already holding a good part, head towards the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and if not, move to a random location.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment. Once you find it, pick it up and then move towards the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base, dropping them there. If the agent is not holding a good part, then they should seek out the source area.",
        "technical_task": "if you are holding a good part and if you are in the base and if you are in the storage then drop the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area until you arrive.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and if you detect any bad parts, stop picking up parts and move freely.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or if you are holding a good part then stop moving, or if you are holding a scrap part then search randomly, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or if you are holding a good part then freeze movement, or if you are holding a scrap part then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, if so, pick up a part, and then move randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you reach the construction area.",
        "technical_task": "pick up the part and then go to the construction, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the construction area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and drop them off in the storage area of the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then go to the storage.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up a part if detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "You need to move the robot towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the source area, and once you find one, pick it up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any scrap parts in the environment, and if any is detected, immediately pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and deliver it to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any detected parts, and moving randomly if no parts are detected.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then pick up the part, or then search randomly, or then search randomly, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then pick up the part, or then walk randomly, or then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up when detected, and head towards the base area for storage.",
        "technical_task": "search randomly, or then pick up the part, or if you detect a part then pick up the part and then go to the base, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or then pick up the part, or if you detect a part then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts and if holding any good part, drop it.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If it is, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts and, when holding a good part, navigate towards the base's storage area to drop it off.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to pick up good parts and bring them to the storage area in the base, halt if you detect a bad part.",
        "technical_task": "go to the source, or then pick up the part and then go to the base, or then drop the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part and then seek the base area, or then drop the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any detected parts, and if holding a good part, head towards the base through the storage area.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the base for storage. If you encounter a scrap part, drop it immediately.",
        "technical_task": "if you are in the base then go to the storage, or if you detect a part and if you are holding a scrap part and if you are in the base then drop the part, or if you are in the storage then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part and if you are holding a scrap part and if you are in the base area then drop the part, or if you are in the storage area then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if any good parts are nearby and if so, pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and if you detect a part, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then go to the base, or then search randomly, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then seek the base area, or then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and when holding a good part, move towards the base storage area to drop it off.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is not in the base area, pick up a part. If the agent is in the base area, head towards the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part from the environment.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and holding a good part, then drop that part.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once detected, head towards the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect all the good parts in the environment and drop them off in the base storage area.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then drop the part, or then pick up the part and then go to the base, or then search randomly, or otherwise if you detect a part then go to the source.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then drop the part, or then pick up the part and then seek the base area, or then walk randomly, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or then go to the storage, or otherwise if you are in the base then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or then seek the storage area, or otherwise if you are in the base area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area, and if you detect a part, pick it up and then head back to the base area.",
        "technical_task": "if you are in the construction then go to the construction, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the construction area then seek the construction area, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect as many good parts as possible and drop them off in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across, but if you are in the source area, stop moving.",
        "technical_task": "pick up the part and then search randomly, or then go to the source, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then walk randomly, or then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter in the environment and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once found, bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the base and if you are in the storage then go to the storage, or then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part and if you are in the base area and if you are in the storage area then seek the storage area, or then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up and bring them to the base for storage while avoiding bad parts along the way.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are in the base and if you are in the storage then drop the part and then go to the base, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and once you have a good part, drop it in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, detect and pick up a good part, then bring it to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the base and if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the base area and if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly around the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the source area, and if you are holding a good part move towards the base area.",
        "technical_task": "if you are in the source then go to the base, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are in the source area, pick up any part you detect.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up any good parts detected, and if the agent holds a good part, drop it in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then drop the part, or then search randomly, or if you are in the source then pick up the part, or then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then drop the part, or then walk randomly, or if you are in the source area then pick up the part, or then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them off in the construction area.",
        "technical_task": "if you are in the source and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and head towards the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the environment and bring them to the storage area at the base. If the agent is not carrying any good parts, it should move randomly.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if not already there, and if a scrap part is detected, pick it up.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts as quickly as possible from the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "go to the source, or then pick up the part, or if you are holding a good part then go to the base, or otherwise then go to the storage.",
        "spoon_task": "seek the source area, or then pick up the part, or if you are holding a good part then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any good parts you find, and freeze movement if holding a bad part.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part; otherwise, seek the construction area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected. If not holding any part, seek the source area, otherwise, freeze movement.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you encounter a good part, pick it up immediately.",
        "technical_task": "search randomly, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once holding a good part, take it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and then start seeking good parts.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the condition is met, then pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and keep searching for parts until you detect one.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, move to the construction area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate any good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part and if you are in the storage then go to the base.",
        "spoon_task": "if you detect a part and if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and pick them up when detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and then pick up any detected part.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for any good parts in the source area, pick them up, and bring them to the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding any scrap parts along the way, and when reaching the construction area, perform a specific action.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if it's detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up, then move towards the base.",
        "technical_task": "if you detect a part and if you are in the base and if you are holding a good part then pick up the part, or if you detect a part and if you are in the base and if you are holding a good part then pick up the part, or otherwise then go to the base.",
        "spoon_task": "if you detect a part and if you are in the base area and if you are holding a good part then pick up the part, or if you detect a part and if you are in the base area and if you are holding a good part then pick up the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, checking for any good parts. If you detect a good part, pick it up.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not detected, start moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and head towards the waste area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search the environment while moving randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the storage area in the environment.",
        "technical_task": "go to the storage.",
        "spoon_task": "seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly explore the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the environment, and if not, move randomly.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the base area if the agent is not currently there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If so, pick up a part, otherwise, walk randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a good part if one is detected.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base area's storage.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts, ensuring they are picked up and stored in the base area, and freezing movement if scrap parts are detected.",
        "technical_task": "if you are in the source then pick up the part, or then pick up the part and then go to the base, or if you are holding a scrap part then drop the part, or then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part, or then pick up the part and then seek the base area, or if you are holding a scrap part then drop the part, or then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment and randomly wander until further instructions.",
        "technical_task": "drop the part and then search randomly, or otherwise then search randomly.",
        "spoon_task": "drop the part and then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you detect a good part, pick it up, otherwise, keep moving randomly.",
        "technical_task": "if you are in the base and if you are in the source then go to the waste, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the source area then seek the waste area, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the storage area in the base. If you detect a part, pick it up; otherwise, move freely.",
        "technical_task": "if you detect a part then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to go to the source area, pick up a part, and then return to the base area.",
        "technical_task": "pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if you detect a good part, move towards the storage area in the base. If you are in the storage area, drop the good part.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that you come across.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then pick up the part, or then go to the storage, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part, or then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base area for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or otherwise if you are in the base and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or otherwise if you are in the base area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts and if found, pick them up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them in the construction area if you are not already holding a part.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the construction, or if you detect a part and if you are holding a scrap part then pick up the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the construction area, or if you detect a part and if you are holding a scrap part then pick up the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you detect a part, pick it up and freeze movement if holding a good part.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a good part, then pick it up and head towards the source area.",
        "technical_task": "search randomly, or if you detect a part then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the storage area while holding a good part and drop it there.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts you find, and deposit them in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or then pick up the part, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then pick up the part, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area unless you are currently holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then move towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts, pick them up if found, and head to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts. If a good part is detected, pick it up. Keep moving randomly otherwise.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding any, head to the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected and pick it up if found.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up a part if detected, otherwise move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop any part held if the condition is met.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if so.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there is a good part nearby. If a good part is detected, pick it up, otherwise, seek the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "go to the base, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect as many good parts as possible and bring them to the base, storing them in the storage area.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, otherwise move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if it is holding a good part, then pick it up and move towards the base area.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then stop moving.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, freeze its movement.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts around the environment and bring them to the waste area.",
        "technical_task": "if you are in the base then pick up the part and then go to the waste, or if you are holding a scrap part then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the waste area, or if you are holding a scrap part then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, pick up a part if detected, and then move randomly in the environment.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and then head to the construction area when instructed.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts found, and head towards the source area.",
        "technical_task": "if you are in the base then search randomly, or if you are in the source and if you detect a part then pick up the part and then go to the source, or otherwise if you are in the source then go to the source.",
        "spoon_task": "if you are in the base area then walk randomly, or if you are in the source area and if you detect a part then pick up the part and then seek the source area, or otherwise if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding a good part, drop it in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment, pick them up, and then head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source then pick up the part, or then pick up the part and then go to the base, or if you are in the base then pick up the part and then go to the storage, or if you are in the base then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area then pick up the part, or then pick up the part and then seek the base area, or if you are in the base area then pick up the part and then seek the storage area, or if you are in the base area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you find, bringing them back to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the base, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, seek the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times before randomly moving to explore the environment.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the storage area. If there is a good part, pick it up; otherwise, start seeking the source area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the source.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment unless you detect a part.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and move randomly until a scrap part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the waste, or then search randomly, or if you detect a part then pick up the part and then search randomly, or if you are in the base then pick up the part, or then pick up the part and then go to the waste, or then go to the source, or then go to the source, or if you are in the storage then pick up the part and then go to the waste, or if you are in the construction then pick up the part, or then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the waste area, or then walk randomly, or if you detect a part then pick up the part and then walk randomly, or if you are in the base area then pick up the part, or then pick up the part and then seek the waste area, or then seek the source area, or then seek the source area, or if you are in the storage area then pick up the part and then seek the waste area, or if you are in the construction area then pick up the part, or then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are in the source and if you detect a part and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and stop moving once holding a good part.",
        "technical_task": "if you are in the source and if you detect a part then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up any good parts you find, and freeze your movement if you are holding a scrap part.",
        "technical_task": "go to the source, or otherwise if you detect a part and if you are holding a good part then stop moving.",
        "spoon_task": "seek the source area, or otherwise if you detect a part and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and when entering the base area, stop and drop any good part you are holding.",
        "technical_task": "if you are in the base then drop the part and then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then drop the part and then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts if detected, otherwise continue searching for them.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, retrieve them, and deliver them to the storage area in the base.",
        "technical_task": "go to the source, or if you are in the source and if you detect a part then pick up the part and then go to the storage, or then search randomly, or then drop the part and then go to the storage, or if you are in the base and if you are holding a good part and if you are in the storage then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or then walk randomly, or then drop the part and then seek the storage area, or if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop if you are already in the construction area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a part when detected, and drop it if holding one.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up good parts when detected, and dropping them at the storage area in the base. If you are not holding any part, move randomly. If you are in the source area, pick up any detected part.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part then drop the part, or then search randomly, or otherwise then pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part then drop the part, or then walk randomly, or otherwise then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search for good parts in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the base, or then search randomly, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the base area, or then walk randomly, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base or storage area, then pick up a part if detected and head towards the construction area.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if a good part is detected. If no good part is detected, stop moving.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the base area.",
        "technical_task": "if you are holding a good part and if you are in the base then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts nearby, and if so, pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part then search randomly.",
        "spoon_task": "if you detect a part and if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part and pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you find any, bring them to the base while avoiding bad parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base, or if you detect a part and if you are holding a good part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or if you detect a part and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times sequentially. If the agent is in the storage area, pick up a part, otherwise seek the construction area.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the source area first. If the agent is not in the source area, then pick up any part found. Finally, head towards the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if a good part is detected, else stand still.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if it is, freeze its movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you are currently holding a good part, drop it in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or if you are in the base then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or if you are in the base area then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if no specific condition is met.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, and when you are holding a good part, head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and stop moving if the agent is in that area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if no condition is currently met.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for any parts.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If the agent detects a bad part, it should stop moving.",
        "technical_task": "go to the source, or then go to the construction, or if you detect a part and if you are holding a scrap part then stop moving, or otherwise then go to the storage.",
        "spoon_task": "seek the source area, or then seek the construction area, or if you detect a part and if you are holding a scrap part then freeze movement, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find and storing them in the storage area if you are there. If you detect bad parts, stop moving.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part, or if you detect a part then stop moving, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or if you detect a part then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect bad parts in the environment and drop them in the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part, or then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part, or then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the source area and pick them up while avoiding bad parts. Once you have a good part, bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, and if you detect an obstacle, stop moving.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction, or if you detect a part and if you are holding a scrap part and if you are in the waste then drop the part and then go to the waste, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area, or if you detect a part and if you are holding a scrap part and if you are in the waste area then drop the part and then seek the waste area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, collect any good parts you find, and if you are holding any good parts when entering the construction area, drop them there.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the construction, or if you are in the waste then drop the part, or if you are in the source then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the construction area, or if you are in the waste area then drop the part, or if you are in the source area then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base. If you are not in the storage area, make your way there.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are in the storage then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are in the storage area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, drop them in the storage area if held, and freeze movement upon detecting any bad part.",
        "technical_task": "if you are holding a good part then drop the part, or then pick up the part and then stop moving, or if you detect a part then go to the waste, or if you are in the source then go to the source, or if you are in the base then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or then pick up the part and then freeze movement, or if you detect a part then seek the waste area, or if you are in the source area then seek the source area, or if you are in the base area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts and bring them back to the storage area at the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up parts whenever they are detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in different areas of the environment, and if the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part, or if you are in the construction then pick up the part and then go to the source, or otherwise then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part, or if you are in the construction area then pick up the part and then seek the source area, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_construction_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and stop when holding one.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and when you detect one, pick it up and head towards the storage area.",
        "technical_task": "if you are in the source then search randomly, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then walk randomly, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, continue moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly seek the source area but stop when a good part is detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for any good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and drop them in the storage area of the base.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a part, then pick it up.",
        "technical_task": "pick up the part and then search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts when detected and then head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any detected objects while avoiding stopping moving unless necessary.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head to the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate good parts in the environment and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, if you are holding a good part, move towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only when you are not holding any part.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up any good parts detected along the way and dropping them in the storage area of the base.",
        "technical_task": "if you are in the base then go to the source, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or if you are in the storage then drop the part, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the source area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or if you are in the storage area then drop the part, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect as many good parts as possible and bring them to the base, dropping them off in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up a part if detected, and stop at the construction area.",
        "technical_task": "if you are in the base and if you are in the construction and if you are holding a good part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the construction area and if you are holding a good part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and if you are in the storage area, drop them there.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or if you are in the base then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or if you are in the base area then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby. If so, pick them up, otherwise move freely in the environment.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when holding a good part, head to the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, move towards the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and head towards the source area if you are not holding any part.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected parts, and bring them to the construction area.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base, and if you encounter any bad parts, stop moving.",
        "technical_task": "go to the source, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "seek the source area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and drop them off in the storage area of the base.",
        "technical_task": "if you are in the source then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area twice before picking up a part.",
        "technical_task": "if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then head towards the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, dropping them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and start building something, but if you detect any part, you should pick it up immediately.",
        "technical_task": "if you are in the construction then drop the part and then go to the construction, or otherwise then search randomly.",
        "spoon_task": "if you are in the construction area then drop the part and then seek the construction area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if holding one, move to the storage area to drop it.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base, or if you are in the source then pick up the part, or if you are in the source and if you detect a part and if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area, or if you are in the source area then pick up the part, or if you are in the source area and if you detect a part and if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then randomly explore the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part and if you are in the source then go to the base.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part and if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, if not, move towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, then proceed to seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for part signals and pick up a part when detected.",
        "technical_task": "if you are in the waste and if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the waste area and if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If so, pick up a part, and then head towards the construction area.",
        "technical_task": "if you are in the source then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, move towards the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the construction area, while avoiding bad parts.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the construction then drop the part and then go to the construction, or otherwise then go to the waste.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the construction area then drop the part and then seek the construction area, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Seek for good parts in the source area and pick them up.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area if the agent is not already there and freeze its movement.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and switch to a random movement state when a certain condition is met.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not holding anything, and then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and navigate towards the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or otherwise if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or otherwise if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if the condition is met.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, looking for good parts to pick up and bring them to the base for storage. If at any point you detect a bad part, stop moving.",
        "technical_task": "pick up the part, or then pick up the part and then go to the base, or then stop moving, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or then pick up the part and then seek the base area, or then freeze movement, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not, move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and if you find one, bring it to the base storage area. If you find any bad parts, stop moving.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part and if you are in the storage then go to the base, or otherwise if you are holding a scrap part and if you are in the waste then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part and if you are in the storage area then seek the base area, or otherwise if you are holding a scrap part and if you are in the waste area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, pick it up if found, and then proceed to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find as many good parts as possible and bring them to the base.",
        "technical_task": "pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and head towards the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the source area and pick up parts when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and drop them off in the storage area of the base, freezing movement if an agent is already holding a good part.",
        "technical_task": "if you are holding a good part and if you are in the source and if you are in the storage then stop moving, or if you are holding a good part and if you are in the source and if you are in the storage then drop the part and then go to the source, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the source area and if you are in the storage area then freeze movement, or if you are holding a good part and if you are in the source area and if you are in the storage area then drop the part and then seek the source area, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if a good part is detected, otherwise stop.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then pick up any good parts detected.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area. If you detect a good part, pick it up.",
        "technical_task": "if you are in the construction then go to the construction, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the construction area then seek the construction area, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you are not holding any parts, you should pick up a part if one is detected.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if you see one, otherwise, move randomly in the environment.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then drop them in the base's storage area.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then go to the storage, or otherwise if you detect a part and if you are in the source and if you are in the base then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are in the source area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, if detected, pick them up and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts detected, and bring them to the base for storage.",
        "technical_task": "if you are in the source then go to the storage, or if you are holding a good part and if you are in the storage then go to the base, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then seek the storage area, or if you are holding a good part and if you are in the storage area then seek the base area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and drop them in the storage area of the base. However, if you are not holding any part, you should pick up any part you detect.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any part you find, and drop it in the construction area.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then go to the construction, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then go to the construction, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then go to the construction, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then go to the construction, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then seek the construction area, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then seek the construction area, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then seek the construction area, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then seek the construction area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you come across and drop them in the storage area of the base, but if you detect a bad part, stop any actions.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "if you detect a part and if you are in the base then go to the storage, or then pick up the part and then go to the base, or otherwise if you are holding a good part and if you are in the storage and if you are in the construction then go to the waste.",
        "spoon_task": "if you detect a part and if you are in the base area then seek the storage area, or then pick up the part and then seek the base area, or otherwise if you are holding a good part and if you are in the storage area and if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, pick them up when found, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and head towards the base area to drop them off while avoiding any bad parts you come across.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base while avoiding bad parts.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part and if you are holding a scrap part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a scrap part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, pick up any good parts found, and then head towards the source area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the source.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if a good part is detected, head towards the storage area.",
        "technical_task": "if you are in the source then go to the storage.",
        "spoon_task": "if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate any scrap parts in the environment, and once found, pick them up and then freeze movement.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part and seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you encounter while avoiding bad parts.",
        "technical_task": "pick up the part, or if you detect a part then go to the source, or if you are holding a scrap part then drop the part, or if you detect a part then search randomly, or if you are in the base then pick up the part, or if you are holding a good part then go to the base, or if you are in the waste then drop the part, or if you are holding a good part then go to the storage, or if you are holding a scrap part then drop the part, or if you are in the storage then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then seek the source area, or if you are holding a scrap part then drop the part, or if you detect a part then walk randomly, or if you are in the base area then pick up the part, or if you are holding a good part then seek the base area, or if you are in the waste area then drop the part, or if you are holding a good part then seek the storage area, or if you are holding a scrap part then drop the part, or if you are in the storage area then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and holding a good part. If both conditions are met, the agent should drop the part.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts and drop them off in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search for good parts in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once located, bring them to the construction area.",
        "technical_task": "if you detect a part then go to the construction, or then pick up the part and then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the construction area, or then pick up the part and then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then head towards the construction area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, keep moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously navigate to the source area to look for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment around the base, picking up any good parts that are detected, and dropping them in the storage area.",
        "technical_task": "if you are in the base then search randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then walk randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you encounter, and drop them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once you find one, pick it up and head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the storage area of the base if the agent is holding a good part; otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise move freely.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise remain inactive.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas in the environment while avoiding agents and picking up good parts along the way.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the source, or then pick up the part, or otherwise if you are in the construction and if you are in the waste and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the source area, or then pick up the part, or otherwise if you are in the construction area and if you are in the waste area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area by default.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts whenever detected, and head towards the base area.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part and then go to the base, or then pick up the part, or then pick up the part, or then pick up the part and then go to the base, or then pick up the part and then go to the base, or then pick up the part and then go to the base, or then pick up the part, or then pick up the part, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part and then seek the base area, or then pick up the part, or then pick up the part, or then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or then pick up the part, or then pick up the part, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, head towards the base, and drop them off in the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction, or then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area, or then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base's storage area while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are holding a good part then go to the base, or otherwise then drop the part and then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are holding a good part then seek the base area, or otherwise then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise, continue random movement.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area only when the agent is not holding any scrap parts.",
        "technical_task": "if you are holding a scrap part then go to the base.",
        "spoon_task": "if you are holding a scrap part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if true, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base, while avoiding bad parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area twice, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area, while avoiding picking up good parts along the way.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction, or otherwise if you are in the base and if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area, or otherwise if you are in the base area and if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, and if not, randomly move around the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find and bring them to the storage area in the base. If you encounter any bad parts, stop moving.",
        "technical_task": "go to the base, or then go to the storage, or if you are holding a good part then stop moving, or otherwise if you are holding a scrap part then drop the part and then go to the base.",
        "spoon_task": "seek the base area, or then seek the storage area, or if you are holding a good part then freeze movement, or otherwise if you are holding a scrap part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely around the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and stop moving when holding a good part.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and bring them to the storage area of the base. When the agent is in the construction area, it should stop moving.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then go to the source, or if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then seek the source area, or if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts and deliver them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek and navigate towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and seek the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part, or otherwise if you detect a part then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise if you detect a part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts in the environment, pick them up, and then move towards the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and if you detect a bad part, stop moving.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are holding a scrap part then stop moving.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby, and if you find one, pick it up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for good parts. If holding a good part, bring it to the base area; otherwise, pick up any good parts you find.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up if detected, and head to the base area.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or if you are in the base then go to the base, or otherwise if you are in the base then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or if you are in the base area then seek the base area, or otherwise if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across and keep exploring if no good part is detected.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any good parts you encounter along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, then pick up a part, and finally, seek the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to approach a scrap part, pick it up, and then drop it.",
        "technical_task": "if you are in the source and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for any good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding any parts.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly in the environment until you detect a part.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find in the source area, pick them up, and then move towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts, and once you find a good part, pick it up and bring it to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area until you reach it.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, drop them in the storage area of the base, and freeze movement if holding a bad part.",
        "technical_task": "go to the source, or then drop the part, or then pick up the part, or then stop moving, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "seek the source area, or then drop the part, or then pick up the part, or then freeze movement, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n      \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n      \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n      \n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n      \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts and head towards the storage area in the base once a good part is detected.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it's detected, and if the agent is not holding any part, seek the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If so, pick up a part; otherwise, seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts in the source area, pick them up, and drop them in the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area in the environment, and when you arrive there, start seeking for any parts available.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts if detected, otherwise move freely through the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, start moving towards the base.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area and if the agent is holding a scrap part, then drop the part.",
        "technical_task": "if you are in the waste and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the waste area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a scrap part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to approach the base area and drop any good parts you might be holding.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row. If it is, pick up a part, otherwise move randomly.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment and pick them up if found.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment. Upon finding a good part, head to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are in the storage then search randomly.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are in the storage area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding a part, and then drop the part.",
        "technical_task": "if you are holding a good part and if you detect a part then drop the part.",
        "spoon_task": "if you are holding a good part and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if an agent is holding a scrap part, store it in the waste area.",
        "technical_task": "if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area within the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts when detected and storing them in the storage area of the base.",
        "technical_task": "if you are in the base then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the source area, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source then go to the storage, or if you are in the source then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the storage area, or if you are in the source area then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part, or if you are in the base then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are in the base area then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and then move towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is in the agent's vicinity. If a good part is detected, pick it up; otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the storage area and pick them up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts only if the agent is in the storage area, and if not, just continue moving freely.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up any part that is detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the storage area in the base. If you encounter any bad parts, stop moving immediately.",
        "technical_task": "if you are in the base then pick up the part, or if you are holding a good part and if you are in the storage then go to the base, or otherwise if you detect a part then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are holding a good part and if you are in the storage area then seek the base area, or otherwise if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, else do nothing.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect as many good parts as possible and bring them to the base, storing them in the storage area. If you find any bad parts, stop moving.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part, or then drop the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part, or then drop the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and drop them off in the storage area while avoiding any bad parts in the environment.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the storage area, and if found, pick them up.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any scrap parts in the environment, and if there are pick them up.",
        "technical_task": "if you detect a part and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts, avoid construction area, pick up parts when detected, and drop them in the waste area.",
        "technical_task": "if you are in the construction then drop the part, or if you detect a part then pick up the part and then go to the waste, or if you are in the storage then drop the part, or otherwise if you are holding a scrap part and if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are in the construction area then drop the part, or if you detect a part then pick up the part and then seek the waste area, or if you are in the storage area then drop the part, or otherwise if you are holding a scrap part and if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts whenever they are detected and bring them to the waste area in the environment.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the source area and pick up any parts you find along the way.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the storage area, drop any good parts you are holding, then search for any new parts in the environment.",
        "technical_task": "if you are in the storage and if you are holding a good part then go to the base, or otherwise if you are in the base then drop the part and then go to the source.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then seek the base area, or otherwise if you are in the base area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, stop moving.",
        "technical_task": "if you are in the construction then drop the part and then stop moving.",
        "spoon_task": "if you are in the construction area then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment, and upon finding one, pick it up and then move to the base area.",
        "technical_task": "if you are in the source then go to the waste, or then go to the source, or then pick up the part and then go to the base, or otherwise then go to the construction.",
        "spoon_task": "if you are in the source area then seek the waste area, or then seek the source area, or then pick up the part and then seek the base area, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if it is, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and bring them to the waste area.",
        "technical_task": "go to the waste, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the waste area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part detected. If a good part is detected, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts in the environment, pick them up, and stop moving upon detecting a bad part.",
        "technical_task": "if you detect a part then pick up the part and then stop moving, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts when detected and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a good part if it is.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are in the storage then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts in the environment, pick them up, and then head towards the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if detected, pick them up and head towards the base storage area.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the source area, pick them up, and then bring them to the base area for storage.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part and then go to the base, or if you are in the source then go to the source, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part and then seek the base area, or if you are in the source area then seek the source area, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if any scrap part is detected and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base.",
        "technical_task": "if you detect a part then go to the base, or if you detect a part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or if you detect a part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore different areas of the environment, pick up good parts if detected, avoid holding scrap parts when possible, and freeze movement if holding scrap parts.",
        "technical_task": "pick up the part and then go to the source, or then search randomly, or then drop the part and then go to the base, or if you are in the waste then pick up the part, or if you detect a part then stop moving, or otherwise if you are holding a scrap part and if you are holding a good part then drop the part.",
        "spoon_task": "pick up the part and then seek the source area, or then walk randomly, or then drop the part and then seek the base area, or if you are in the waste area then pick up the part, or if you detect a part then freeze movement, or otherwise if you are holding a scrap part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area in the environment if the agent is not already there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. If you detect a part, stop picking up parts and go to the construction area.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part then go to the construction, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, move towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts found in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected and then head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is in the storage area, then drop the part there.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area within the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage, or if you are in the storage then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or if you are in the storage area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up if found, and then move towards the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area and drop any scrap parts you are carrying. If you detect a part, pick it up.",
        "technical_task": "if you are holding a scrap part then go to the waste, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a scrap part then seek the waste area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and then seek the base area.",
        "technical_task": "if you are in the construction then go to the base.",
        "spoon_task": "if you are in the construction area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the nearest good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any parts you find, and if you detect a scrap part, stop moving.",
        "technical_task": "pick up the part, or then pick up the part, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then stop moving.",
        "spoon_task": "pick up the part, or then pick up the part, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the base, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the base area, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop the agent's movement.",
        "technical_task": "stop moving.",
        "spoon_task": "freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if not, move towards the base area.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part and, if not, move towards the source area.",
        "technical_task": "if you are holding a scrap part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a scrap part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and then perform an actuator action.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if encountered, then head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or if you detect a part then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across.",
        "technical_task": "if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across. If you are holding a good part, head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you are holding a good part then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, and head towards the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts in the environment, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise, keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for any parts in the environment.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is in the source area. If not, seek the source area. If at the source area, pick up a part if detected, otherwise randomly move.",
        "technical_task": "if you are in the source then go to the source, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, change the direction towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while exploring the environment and, when encountering a bad part, stop moving.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or if you are holding a good part and if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or if you are holding a good part and if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected and then head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the environment, pick them up, and head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, start seeking the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is holding a good part, head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to seek and head towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any parts detected in the environment and then head towards the base's storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are, pick up a part; if not, move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts whenever detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you detect a part, pick it up and head towards the construction area.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any detected parts, and continue moving randomly if no parts are detected.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times, and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts, and when you detect a good part, pick it up.",
        "technical_task": "pick up the part, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, move towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base unless you are already carrying a good part.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base. Drop the good parts in the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up as many good parts as possible, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or if you are holding a good part then pick up the part, or if you detect a part and if you are in the base then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a good part then pick up the part, or if you detect a part and if you are in the base area then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly while avoiding getting stuck in one place.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment, pick them up, and then head towards the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the waste area until you reach it.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts and pick them up. If you are holding a good part, head towards the base area and drop the part in the storage area.",
        "technical_task": "go to the source, or then pick up the part and then go to the base, or then search randomly, or if you are holding a good part then drop the part, or then go to the waste, or then go to the construction, or then pick up the part and then go to the base, or then go to the storage, or if you detect a part then pick up the part, or otherwise then go to the waste.",
        "spoon_task": "seek the source area, or then pick up the part and then seek the base area, or then walk randomly, or if you are holding a good part then drop the part, or then seek the waste area, or then seek the construction area, or then pick up the part and then seek the base area, or then seek the storage area, or if you detect a part then pick up the part, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you detect a good part, pick it up. If you find yourself in the source area, seek the construction area.",
        "technical_task": "pick up the part and then stop moving, or if you detect a part then pick up the part and then go to the construction, or if you detect a part then pick up the part and then go to the waste, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then freeze movement, or if you detect a part then pick up the part and then seek the construction area, or if you detect a part then pick up the part and then seek the waste area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding any scrap parts, and if so, drop the part.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if holding a good part, move towards the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area if the agent is not holding any part.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and then start searching for any parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent detects a part, pick it up, otherwise keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head to the storage area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and when you detect a good part, head to the base area.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part and if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a scrap part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is holding a good part, otherwise, keep seeking the construction area while avoiding the base area.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the construction area, and if so, start the random movement.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when found, and head towards the base area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it. Otherwise, move towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If there are no more good parts, start moving randomly.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage, or then search randomly, or then pick up the part and then go to the storage, or then drop the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area, or then walk randomly, or then pick up the part and then seek the storage area, or then drop the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up when detected, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, but if the agent is already in the source area, then search for parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts and transport them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area while holding a scrap part and drop it there.",
        "technical_task": "drop the part and then go to the waste.",
        "spoon_task": "drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you come across while avoiding bad parts, and once you have a good part head to the storage area in the base to drop it off.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then search randomly, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then walk randomly, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then go to the source, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the source area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan for any good parts in the environment and if found, pick it up. If you are not near any good parts, seek out the construction area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts and bring them to the storage area in the base. If you are not in the storage area, keep moving toward it. If you find a bad part, pick it up and stop moving.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part and proceed to the storage area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start picking up any parts you detect on your way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely around the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts you find, and go to the base storage area when holding a good part.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or then pick up the part, or if you are in the source and if you are holding a good part then pick up the part, or then search randomly, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or then pick up the part, or if you are in the source area and if you are holding a good part then pick up the part, or then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, then start moving towards the source.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you find one, pick it up and then head towards the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and head towards the construction area while avoiding scrap parts. If you detect any scrap parts, stop moving.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the construction, or then go to the construction, or otherwise if you are in the source and if you are in the waste and if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the construction area, or then seek the construction area, or otherwise if you are in the source area and if you are in the waste area and if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base without stopping. If you find any bad parts, stop moving immediately.",
        "technical_task": "go to the base, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, in the storage area, and in the construction area in that order. If all conditions are met, pick up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find and drop them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part whenever one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction, or otherwise if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area, or otherwise if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment and bring it to the base area for storage.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and then start searching for any parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and store them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and then seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, move to the storage area.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving when the base area is reached.",
        "technical_task": "if you are in the base then drop the part and then stop moving.",
        "spoon_task": "if you are in the base area then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find all the good parts in the environment and move towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and freeze movement if holding a scrap part.",
        "technical_task": "if you are in the base then go to the storage, or if you detect a part then pick up the part and then stop moving, or then search randomly, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part then pick up the part and then freeze movement, or then walk randomly, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you are in the construction area, stop moving.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in specific areas and perform an actuator action.",
        "technical_task": "if you are in the storage and if you are in the base and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the storage area and if you are in the base area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part from the environment.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area at the base. If you detect a bad part, stop moving.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then go to the storage, or then pick up the part, or if you are in the base and if you detect a part and if you are holding a scrap part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then seek the storage area, or then pick up the part, or if you are in the base area and if you detect a part and if you are holding a scrap part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the base area and stop when you arrive.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start picking up parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the waste area, if so, then drop any part it is holding. Otherwise, try to pick up a part if detected, and then move randomly.",
        "technical_task": "if you are in the waste then drop the part and then search randomly.",
        "spoon_task": "if you are in the waste area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment looking for good parts to pick up and bring them to the base area for storage.",
        "technical_task": "if you are in the construction then pick up the part, or then go to the base, or then go to the storage, or then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area then pick up the part, or then seek the base area, or then seek the storage area, or then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area and pick up any good parts found, bringing them back to the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the different areas in the environment and stop moving when a good part is detected.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and drop them in the storage area of the base, while avoiding any bad parts you might encounter.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are holding a good part and if you are in the base then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a good part and if you are in the base area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and store them in the base storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment and if the agent is holding a good part, drop it in the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not, freeze the movement.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "drop the part and then go to the storage.",
        "spoon_task": "drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly until a good part is detected, then pick it up.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only when the agent is not already there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you come across, and if you detect any bad parts, stop picking up parts.",
        "technical_task": "if you detect a part then search randomly, or otherwise if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then walk randomly, or otherwise if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and upon reaching the source area, pick up any detected part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if an obstacle is detected, stop and pick it up.",
        "technical_task": "if you are in the construction then pick up the part, or otherwise if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then pick up the part, or otherwise if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is not in the storage area, move randomly.",
        "technical_task": "if you are in the storage then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the storage area then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row before moving to the source area.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then go to the source.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and search for good parts while avoiding bad parts. If a bad part is detected, stop moving.",
        "technical_task": "if you detect a part then stop moving, or then search randomly, or if you are holding a good part then drop the part and then search randomly, or otherwise if you are holding a scrap part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement, or then walk randomly, or if you are holding a good part then drop the part and then walk randomly, or otherwise if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and pick up any good parts you detect.",
        "technical_task": "go to the base, or otherwise then pick up the part.",
        "spoon_task": "seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when a good part is detected, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any parts you detect, and dropping them in the construction area.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then go to the construction, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you come across.",
        "technical_task": "pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any scrap part you come across and drop it in the waste area or freeze in place if needed.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then drop the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wander randomly around the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any detected parts.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are, drop it; otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any detected parts along the way.",
        "technical_task": "pick up the part, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for any good parts, and once holding a good part, head to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and then start searching for good parts.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if the condition is met.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment until a good part is detected, then head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base for storage.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then seek the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts, pick them up, and if you are in the waste area, drop them there.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment, and if there is no part detected, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly roam around the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and once you have one, stay in place.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base, avoiding any bad parts.",
        "technical_task": "if you are in the source then go to the storage, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area then seek the storage area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base.",
        "technical_task": "if you are holding a good part then search randomly, or then pick up the part, or if you are in the base then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then walk randomly, or then pick up the part, or if you are in the base area then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If yes, drop it, else seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, searching for good parts to pick up, and if the agent detects one, it should stop moving.",
        "technical_task": "pick up the part and then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and if you encounter any obstacles, avoid them.",
        "technical_task": "if you are in the construction then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the construction area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Go to the source area and if there are any good parts detected, pick them up. If not, continue moving randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up a part if one is detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the base area, dropping them off in the storage area.",
        "technical_task": "if you are in the source then drop the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then drop the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you detect a scrap part, pick it up and then continue moving.",
        "technical_task": "if you are holding a scrap part then search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then move towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n         <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, pick them up, and then drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the storage area in the base, avoiding bad parts along the way.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage, or if you detect a part and if you are holding a good part and if you are in the base then drop the part, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area, or if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment, and if found, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment and then head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area while avoiding bad parts along the way.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment while picking up any parts you detect along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "You need to move towards the base area only if you are not holding any good parts.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if holding a good part, then drop it; otherwise, if a part is detected, pick it up, and then seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and start building when all necessary materials are detected.",
        "technical_task": "if you are in the construction and if you are holding a good part and if you are holding a scrap part then go to the construction.",
        "spoon_task": "if you are in the construction area and if you are holding a good part and if you are holding a scrap part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment but stop moving if you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect as many good parts as possible and bring them to the source area without stopping.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any parts you detect, and stop if you are holding a good part.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then move towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to ensure the agent moves towards the base area and picks up any good parts it detects. If the agent is not holding any part, it should pick up a part when detected in the environment.",
        "technical_task": "if you are in the base then go to the base, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the base area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and immediately pick them up when detected.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base, dropping them there.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and drop them in the storage area of the base, but if you detect any bad parts, freeze your movement.",
        "technical_task": "if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you see and head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoid construction areas, pick up good parts, and drop them at the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or then pick up the part, or otherwise then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected or else randomly move in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to drop any part that the agent is holding.",
        "technical_task": "drop the part.",
        "spoon_task": "drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and then seek the construction area.",
        "technical_task": "if you are in the source then go to the construction.",
        "spoon_task": "if you are in the source area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and initiate movement towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area multiple times and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and head towards the source area.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, at which point you should pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to inspect the area for good parts, while continuing to move unless a bad part is detected, at which point you must stop moving.",
        "technical_task": "if you are in the construction then pick up the part, or if you are in the base and if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area then pick up the part, or if you are in the base area and if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect bad parts in the source area and pick them up, bringing them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or if you are in the source then pick up the part, or if you detect a part then pick up the part, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or if you are in the source area then pick up the part, or if you detect a part then pick up the part, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and head towards the base for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts found on the way, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and then pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts nearby, pick them up if found, and then seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the source area, then bring them to the base for storage, while avoiding the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or then pick up the part and then go to the base, or if you are holding a scrap part then drop the part and then stop moving, or if you are holding a scrap part then go to the base, or then pick up the part, or if you are in the storage and if you are in the construction and if you are in the source then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or if you are holding a scrap part then drop the part and then freeze movement, or if you are holding a scrap part then seek the base area, or then pick up the part, or if you are in the storage area and if you are in the construction area and if you are in the source area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it is, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is already holding a scrap part.",
        "technical_task": "if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a scrap part is detected, pick it up.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search and pick up good parts in the environment, then bring them to the storage area in the base, while avoiding any bad parts you encounter.",
        "technical_task": "if you detect a part then pick up the part, or then go to the base, or if you are holding a good part then drop the part, or then pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or then seek the base area, or if you are holding a good part then drop the part, or then pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is in the storage area and pick up a part if they are.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the source area and pick them up, then move towards the base area.",
        "technical_task": "if you are in the source then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area of the base.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scout for any good parts in the environment, pick them up, and bring them to the source area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts at the source area and bring them to the construction area, ensuring they are stored there properly.",
        "technical_task": "if you detect a part then go to the construction, or if you are in the source and if you are holding a good part and if you are in the construction then go to the construction, or if you are in the source then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the construction area, or if you are in the source area and if you are holding a good part and if you are in the construction area then seek the construction area, or if you are in the source area then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area. If you are in the base area, pick up a part, otherwise move randomly.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the source area and once holding a good part, head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then seek the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any good parts you encounter, dropping them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the base then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and when you find one, pick it up and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part in the environment and bring it to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. Once you find a good part, pick it up and head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then seek out the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep picking up good parts whenever you detect them.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, dropping them off in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up when found, and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is holding a good part, head towards the base.",
        "technical_task": "go to the source, or if you are holding a good part then go to the base, or otherwise if you detect a part then search randomly.",
        "spoon_task": "seek the source area, or if you are holding a good part then seek the base area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment and then move towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, collect good parts, drop them in the storage area, and freeze movement when holding a scrap part.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or then pick up the part and then stop moving, or if you detect a part then pick up the part, or otherwise if you are in the construction then drop the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or then pick up the part and then freeze movement, or if you detect a part then pick up the part, or otherwise if you are in the construction area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if you see one, and if you are not carrying any part, move towards the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base's storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the base, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and start working once there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected, and if not holding a good part, move towards the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and once you are holding a good part, head towards the storage area at the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment constantly, and if a good part is detected, pick it up.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the environment has any good parts. If a good part is detected, pick it up. If a good part is not detected, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction, or otherwise if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area, or otherwise if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area within the environment and drop any bad parts you are holding.",
        "technical_task": "if you are in the waste then stop moving, or otherwise then go to the waste.",
        "spoon_task": "if you are in the waste area then freeze movement, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you detect a bad part, stop moving immediately. If you are not detecting any bad parts, continue random walking.",
        "technical_task": "search randomly, or otherwise if you detect a part then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to collect good parts and bring them to the base for storage, avoiding bad parts if detected.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or then drop the part and then go to the storage, or if you are holding a good part and if you are holding a scrap part then drop the part, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or then drop the part and then seek the storage area, or if you are holding a good part and if you are holding a scrap part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source then go to the base, or then go to the source, or if you detect a part then pick up the part, or then go to the storage, or if you are holding a good part then drop the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or then seek the source area, or if you detect a part then pick up the part, or then seek the storage area, or if you are holding a good part then drop the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, drop the part it is holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the storage area and if not, seek the construction area.",
        "technical_task": "if you are in the storage and if you detect a part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the storage area and if you detect a part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if you are holding any, drop them in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base, stopping once you reach the storage area.",
        "technical_task": "if you are in the storage and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment, bring them to the base, drop them in the storage area, and if you encounter a bad part along the way, pick it up and go to the waste area.",
        "technical_task": "go to the source, or if you are holding a good part then drop the part, or then pick up the part, or then go to the waste, or then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you are holding a good part then drop the part, or then pick up the part, or then seek the waste area, or then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find and storing them in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them back to the base for storage.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, change the internal state to seek the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if the agent is holding a good part, bring it to the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the base area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the source area, and if an agent is holding a scrap part, move towards the waste area.",
        "technical_task": "if you are in the source and if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, and when you are holding one, move towards the storage area.",
        "technical_task": "if you detect a part then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas of the environment and pick up good parts whenever they are detected.",
        "technical_task": "if you detect a part and if you are in the base and if you are in the storage then go to the storage, or if you detect a part and if you are in the base and if you are in the source then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part and if you are in the base area and if you are in the storage area then seek the storage area, or if you detect a part and if you are in the base area and if you are in the source area then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part that you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment. Once found, pick it up and head towards the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect, and if none are detected, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts around the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards a certain area in the environment based on a condition.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts, picking them up when found, and bringing them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or if you are in the source then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or if you are in the source area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up any detected parts and dropping them in the construction area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area in the environment and start moving towards it.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and, upon detecting one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, bring them to the waste area, and stop movement when not near any scrap parts.",
        "technical_task": "if you are holding a scrap part then go to the waste, or then pick up the part, or if you are in the base then drop the part, or then stop moving, or otherwise then pick up the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area, or then pick up the part, or if you are in the base area then drop the part, or then freeze movement, or otherwise then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when you detect one, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area, pick up any good part if detected, and if not, perform a random movement.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area only when you are not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding any bad parts you come across, and ultimately seek the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the waste then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the waste area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up when detected.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find and move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find scrap parts in the environment and store them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and freeze movement once you reach there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part, pick it up, and then head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if you are in the base area. If you are in the base area, pick up a part. If you are not in the base area, randomly move around.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then go to the storage, or if you are holding a good part and if you are in the storage and if you are in the base then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then seek the storage area, or if you are holding a good part and if you are in the storage area and if you are in the base area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage, or if you detect a part then pick up the part, or then drop the part, or if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area, or if you detect a part then pick up the part, or then drop the part, or if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment freely, and if you detect a part, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Go directly to the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the base construction area, pick them up, and drop them in the storage area of the base. If you don't find any good parts, then go to the waste area.",
        "technical_task": "if you are in the base and if you are in the construction then go to the storage, or otherwise if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the construction area then seek the storage area, or otherwise if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts around, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part and, if so, move towards the source area to collect more parts.",
        "technical_task": "if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, and if not, move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and bring it to the storage area. If no good part is found, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop if you reach the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up good parts, and bring them back to the base while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or if you are in the source then pick up the part and then go to the base, or then pick up the part and then go to the waste, or if you are holding a good part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or if you are in the source area then pick up the part and then seek the base area, or then pick up the part and then seek the waste area, or if you are holding a good part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts found, and store them in the base's storage area.",
        "technical_task": "go to the base, or then pick up the part, or if you detect a part and if you are in the base then go to the storage, or then search randomly, or if you detect a part and if you are holding a good part and if you are in the storage then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or then pick up the part, or if you detect a part and if you are in the base area then seek the storage area, or then walk randomly, or if you detect a part and if you are holding a good part and if you are in the storage area then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area while avoiding holding any good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, go towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start picking up parts when detected.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times before picking up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect bad parts in the environment and drop them in the waste area, while avoiding the source area.",
        "technical_task": "if you are in the base then go to the waste, or if you are in the waste then drop the part, or if you detect a part then pick up the part, or then pick up the part and then search randomly, or otherwise then go to the source.",
        "spoon_task": "if you are in the base area then seek the waste area, or if you are in the waste area then drop the part, or if you detect a part then pick up the part, or then pick up the part and then walk randomly, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area and stop any state movement if that's the case.",
        "technical_task": "if you are in the waste then stop moving.",
        "spoon_task": "if you are in the waste area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to check if the agent is in the source area, and if not, then pick up a part and head towards the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if you are in the base area, drop them in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part, and then seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and move towards the storage area to drop them off. If you are holding a good part, continue moving without changing state.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part. If the agent is holding a good part, drop the part and then seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and continuously move in a random manner.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, then pick up a part if detected in that area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if so.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any detected parts.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop that part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the closest good part and pick it up.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and when an agent is detected, notify the base.",
        "technical_task": "if you are in the construction then go to the source, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area then seek the source area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate and pick up a good part in the environment.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and then stop moving.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts when detected, pick them up, and then seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if it is holding a scrap part, then drop it.",
        "technical_task": "if you are in the base and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby and if so, head towards them.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the source area and bring them to base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, drop any held part, otherwise seek the construction area.",
        "technical_task": "if you are in the storage then drop the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and drop them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is not in the storage area, then seek the storage area.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base area, storing them in the storage area, all while avoiding any bad parts.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, seeking good parts and storing them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts. When holding a good part, bring it to the base for storage. If you detect a good part, pick it up.",
        "technical_task": "if you are holding a good part then go to the base, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part from the source area.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area and start searching for good parts.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part and immediately bring it to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once detected, pick them up and head towards the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise, keep seeking the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to approach a good part, pick it up, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base storage area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, go to the storage area.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, store it in the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If in the source area, stop moving; otherwise, pick up a part and then move randomly.",
        "technical_task": "if you are in the source then drop the part and then go to the construction.",
        "spoon_task": "if you are in the source area then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol different areas and if you detect a part, pick it up, and then move to the construction area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then move towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base's storage area. If you detect any bad parts, stop picking up parts and enter the construction area.",
        "technical_task": "if you are in the base then go to the storage, or if you detect a part then go to the construction, or if you are holding a good part then pick up the part and then go to the storage, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part then seek the construction area, or if you are holding a good part then pick up the part and then seek the storage area, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if the agent picks up a good part, head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the base for storage.",
        "technical_task": "if you detect a part then go to the base, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and move towards it. If you are not in the base area, keep seeking it. If you encounter a part, pick it up.",
        "technical_task": "go to the base, or if you are in the base then go to the base, or otherwise then pick up the part.",
        "spoon_task": "seek the base area, or if you are in the base area then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area when holding a bad part.",
        "technical_task": "if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you encounter, and if you are in the storage area, drop them there.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or if you are in the storage then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or if you are in the storage area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment and seek the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly until a good part is detected, then freeze your movement.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up good parts and bring them to the storage area of the base. If you are not holding any good parts, seek the source area.",
        "technical_task": "go to the base, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the storage area, and if so, pick it up.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts and if you are holding a good part, drop it in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area of the base.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and seek out good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts until you find one and then move to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, but if a good part is detected then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and, when holding a good part, go to the storage area to drop it off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, stop any movement.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently in the waste area, and if so, start moving towards the source area.",
        "technical_task": "if you are in the waste then go to the source.",
        "spoon_task": "if you are in the waste area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if holding a scrap part, drop it.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up an object if detected and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, move towards the base area for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area at the base. If the agent is not holding a good part, it should move freely without picking up anything.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when found, and head towards the storage area to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and drop them in the storage area of the base. If you are not holding any good parts, keep moving randomly.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the source area. Once a scrap part is detected, pick it up and return to the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if an agent is in the source area, pick up any part detected.",
        "technical_task": "if you are in the source then pick up the part and then search randomly, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is, pick up a part. Otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area. If you detect a bad part, drop it immediately.",
        "technical_task": "go to the source, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if the agent is not already in the base area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts if detected, and if holding a good part, head to the base area and drop it in the storage.",
        "technical_task": "if you are in the base then pick up the part, or if you are holding a good part then go to the base, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area thrice in a row and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part, then pick up the part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while avoiding bad parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the source, or then drop the part and then go to the storage, or then pick up the part and then search randomly, or if you detect a part and if you are holding a good part then search randomly, or then go to the construction, or then pick up the part and then go to the waste, or otherwise then go to the base.",
        "spoon_task": "seek the source area, or then drop the part and then seek the storage area, or then pick up the part and then walk randomly, or if you detect a part and if you are holding a good part then walk randomly, or then seek the construction area, or then pick up the part and then seek the waste area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base to store them in the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. Once you are in the construction area, store the parts there.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "You need to pick up a good part whenever you detect one.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are not holding a good part, seek the source area.",
        "technical_task": "if you are holding a good part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected part along the way.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part nearby before attempting to pick it up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when detected, bring them to the storage area.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move to the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part, or if you detect a part then go to the base, or then pick up the part and then go to the base, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then go to the base, or if you are in the base then drop the part, or if you are in the base then drop the part and then go to the storage, or if you are in the base then drop the part, or otherwise if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or if you detect a part then seek the base area, or then pick up the part and then seek the base area, or if you detect a part then pick up the part, or if you detect a part then pick up the part and then seek the base area, or if you are in the base area then drop the part, or if you are in the base area then drop the part and then seek the storage area, or if you are in the base area then drop the part, or otherwise if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a part if detected, and head towards a random direction.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head to the storage area of the base when holding a good part.",
        "technical_task": "go to the base, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area. If you detect a good part, pick it up, otherwise, move randomly.",
        "technical_task": "if you are in the source and if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and when an obstacle is detected, stop moving.",
        "technical_task": "if you are in the construction then drop the part, or otherwise then stop moving.",
        "spoon_task": "if you are in the construction area then drop the part, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if detected, pick them up and then move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area. If you detect any good parts, pick them up immediately.",
        "technical_task": "pick up the part and then go to the construction, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and scrap parts, once you find any part start moving towards the base area.",
        "technical_task": "search randomly, or if you detect a part and if you are holding a good part and if you are holding a scrap part then go to the base, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or if you detect a part and if you are holding a good part and if you are holding a scrap part then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for any parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wander around randomly in the environment until a scrap part is detected, then you should pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment, pick them up, and freeze movement when holding them.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the construction area. If you are in the construction area, pick up a part; otherwise, move randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and store them in the storage area of the base. If you detect any good part, immediately head to the source area.",
        "technical_task": "if you are in the base and if you are in the storage then drop the part and then go to the base, or if you detect a part then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area then drop the part and then seek the base area, or if you detect a part then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them back to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to search for good parts and bring them to the base for storage. If you detect any bad parts, you should stop moving.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or then pick up the part, or then pick up the part and then search randomly, or if you are holding a scrap part then stop moving, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or then pick up the part, or then pick up the part and then walk randomly, or if you are holding a scrap part then freeze movement, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, seek the construction area.",
        "technical_task": "if you are in the storage then go to the construction.",
        "spoon_task": "if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to check if the agent is in different areas one by one, and if the agent is in any of these areas, perform an actuator action.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when found, and then head towards the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and drop them off in the storage area of the base. If the agent is already in the storage area holding a part, it should head towards the construction area.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are in the storage then drop the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are in the storage area then drop the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part then pick up the part, or then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part then pick up the part, or then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts in the storage area, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and move randomly unless a specific condition is met.",
        "technical_task": "pick up the part and then search randomly, or then pick up the part and then go to the source, or if you are in the base then stop moving, or otherwise then drop the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly, or then pick up the part and then seek the source area, or if you are in the base area then freeze movement, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base area.",
        "technical_task": "if you are in the base then drop the part, or if you are holding a good part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then drop the part, or if you are holding a good part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, pick up a part, otherwise, keep moving randomly.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, then drop that part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base storage area when holding a good part.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base. If the agent is holding a good part, it should head towards the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base while avoiding bad parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area, freezing movement when holding a scrap part.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part; otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect and then proceed to seek the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area for good parts and bring them to the base while avoiding bad parts. Once a bad part is detected, stop moving.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part and then go to the base, or if you are holding a good part then go to the source, or then drop the part, or otherwise if you are in the source and if you are holding a good part and if you detect a part then search randomly.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part and then seek the base area, or if you are holding a good part then seek the source area, or then drop the part, or otherwise if you are in the source area and if you are holding a good part and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts and then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up, and head towards the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, then pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If the agent is holding a good part, head towards the base area in a random walk.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area until you reach it.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts only if the agent is in the source area, and the agent has not picked up any part yet.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the base then pick up the part, or if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are in the storage then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or otherwise if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise keep moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if you are not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any good parts you encounter, and bring them to the base.",
        "technical_task": "search randomly, or then pick up the part, or then pick up the part, or if you detect a part then pick up the part and then go to the base, or then go to the base, or otherwise then go to the base.",
        "spoon_task": "walk randomly, or then pick up the part, or then pick up the part, or if you detect a part then pick up the part and then seek the base area, or then seek the base area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base storage area while avoiding the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or if you are in the source and if you are holding a good part and if you are in the waste then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or if you are in the source area and if you are holding a good part and if you are in the waste area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if a part is detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and bring them to the storage area in the base zone.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment, and if you are holding a bad part, drop it in the waste area.",
        "technical_task": "if you are in the base and if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts detected, and head towards the base area for storage.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or then pick up the part, or if you are holding a good part then drop the part and then go to the base, or if you are holding a good part then go to the storage, or if you detect a part and if you are holding a good part then drop the part, or otherwise if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or then pick up the part, or if you are holding a good part then drop the part and then seek the base area, or if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a good part then drop the part, or otherwise if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, and when you encounter a good part, pick it up and move towards the source area.",
        "technical_task": "if you are in the base and if you are in the storage then drop the part and then go to the source, or otherwise if you are in the base and if you are in the construction and if you are in the source then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area then drop the part and then seek the source area, or otherwise if you are in the base area and if you are in the construction area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, seek the source area.",
        "technical_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area multiple times consecutively and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a part if detected, and if already holding a part, drop it.",
        "technical_task": "if you are in the source and if you are holding a good part then drop the part, or if you are in the base and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then drop the part, or if you are in the base area and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, bring them to the construction area, and then drop them there.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are holding a scrap part then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are holding a scrap part then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, and if you are in the storage area, drop it.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or otherwise if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or otherwise if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts in the environment and, if the agent finds any scrap parts, stop moving.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base, or if you are holding a good part then pick up the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or if you are holding a good part then pick up the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not holding any part, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you are holding a good part, move to the base area.",
        "technical_task": "if you are in the base and if you are in the storage then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards a specific area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area unless the agent is currently holding a good part.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part. If the agent is holding a good part, then seek the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you detect one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, then look for good parts and pick them up.",
        "technical_task": "if you are in the storage and if you are holding a good part then search randomly.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check three different conditions before performing an actuator action.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then drop any part it is holding; otherwise, perform a random walk movement.",
        "technical_task": "if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part, then seek the construction area.",
        "technical_task": "if you are in the source then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up a part once you detect it.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, then pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the base and if you are in the storage then drop the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base storage area. If you detect a bad part, stop moving.",
        "technical_task": "if you are in the source then go to the base, or then search randomly, or if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or then walk randomly, or if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base area's storage, while avoiding moving if you are already holding a good part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and move randomly if no part is detected.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, then pick up a part and head towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area, pick up any part you detect, and then head towards the construction area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and head towards the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas of the environment while avoiding holding any bad parts.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then drop the part, or otherwise if you are in the source and if you are holding a good part and if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part, or otherwise if you are in the source area and if you are holding a good part and if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts while avoiding bad parts and head towards the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop any parts it is holding while in that area.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while in the source area, then head to the base area and drop them off in the storage area.",
        "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a good part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts, pick them up, and then head towards the base",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if it is, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, storing them in the storage area. If you detect a part while moving towards the base, stop moving.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or then drop the part, or otherwise if you detect a part and if you are in the base and if you are in the storage then pick up the part and then stop moving.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or then drop the part, or otherwise if you detect a part and if you are in the base area and if you are in the storage area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base area.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or then pick up the part, or if you are holding a good part then drop the part, or otherwise then go to the base.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or then pick up the part, or if you are holding a good part then drop the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base, only stopping movement when you are holding a good part.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts while avoiding bad parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area, and when you are in the base area, change your movement to seek the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any good parts found along the way, avoid the construction area, and if the agent is holding a good part, bring it to the storage area of the base.",
        "technical_task": "search randomly, or then pick up the part and then go to the base, or then go to the construction, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "walk randomly, or then pick up the part and then seek the base area, or then seek the construction area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and then seek the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and bring them to the base storage area.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part then pick up the part and then go to the base, or if you are holding a good part then go to the storage, or then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then seek the storage area, or then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if you are currently not holding anything.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when you detect one, move towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then go to the storage, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the construction area, and if not, seek the construction area and pick up a part.",
        "technical_task": "if you are in the construction and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, move towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once found, bring them to the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area unless the agent is holding a good part.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is already holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area only if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if the condition is met.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you detect a part and if you are holding a good part and if you are in the storage then pick up the part, or otherwise if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part, or otherwise if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if no good parts are found, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the agent's vicinity. If a good part is detected, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and go to the base area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once a good part is detected, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part, and if so, then drop it.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas of the environment based on certain conditions.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage, or then pick up the part and then go to the waste, or otherwise if you are in the source and if you are holding a scrap part and if you are in the waste then go to the waste.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area, or then pick up the part and then seek the waste area, or otherwise if you are in the source area and if you are holding a scrap part and if you are in the waste area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to find good parts, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or if you are in the source then pick up the part, or if you are holding a good part and if you detect a part then pick up the part, or if you are holding a good part then pick up the part, or otherwise if you are in the waste and if you are in the construction and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or if you are in the source area then pick up the part, or if you are holding a good part and if you detect a part then pick up the part, or if you are holding a good part then pick up the part, or otherwise if you are in the waste area and if you are in the construction area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base, while avoiding the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only when an agent is not already in the construction area.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is holding a good part. If the agent is holding a good part, drop it, or else seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up any good parts encountered, and dropping them in the storage area at the base. If there are no good parts nearby, keep moving freely.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part and if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part and if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "go to the source, or if you detect a part then go to the base, or then pick up the part and then go to the storage, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then seek the base area, or then pick up the part and then seek the storage area, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if the agent is in the source area, stop moving.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are not holding a good part, pick one up.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and if the agent detects a part, it should pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop when you enter the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts from the environment and drop them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the different areas in the environment and randomly move if no actions are required.",
        "technical_task": "if you are in the base then drop the part, or if you are in the storage and if you are in the construction and if you are in the source then pick up the part and then go to the waste, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then drop the part, or if you are in the storage area and if you are in the construction area and if you are in the source area then pick up the part and then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and store them in the construction area of the base.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and bring it to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check for the presence of good parts in the environment and head towards the construction area.",
        "technical_task": "if you are in the construction and if you are holding a good part and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the construction area and if you are holding a good part and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base's construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly within the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off at the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are in the base then drop the part and then go to the storage, or otherwise if you are in the storage then go to the base.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are in the base area then drop the part and then seek the storage area, or otherwise if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any scrap part you find, and if you are holding a scrap part, drop it.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and then drop any part it may be holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, bring them to the base storage area, and drop them there.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste, or then pick up the part, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area, or then pick up the part, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, while avoiding bad parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area in the base. If the agent is holding a good part, freeze movement.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or then pick up the part and then go to the storage, or if you are in the storage and if you are holding a good part then drop the part, or then search randomly, or otherwise then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or then pick up the part and then seek the storage area, or if you are in the storage area and if you are holding a good part then drop the part, or then walk randomly, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, then move towards the source area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the environment and store them in the storage area at the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if the agent is holding one, bring it to the storage area in the base. If the agent is not holding a good part, continue moving freely while searching for parts.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you encounter, avoiding picking up any bad parts.",
        "technical_task": "pick up the part and then search randomly, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then walk randomly, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if that condition is met.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment and then head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, pick it up; otherwise, move towards the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected and then move randomly around the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, then in the storage area, and finally if it is holding a good part, pick it up.",
        "technical_task": "if you are in the construction and if you are in the storage and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you are in the storage area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely within the environment until the agent detects a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until a good part is detected. Once a good part is found, pick it up and then seek the source area.",
        "technical_task": "search randomly, or then pick up the part and then go to the source, or if you detect a part then search randomly, or if you are in the base then drop the part and then go to the source, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then pick up the part and then seek the source area, or if you detect a part then walk randomly, or if you are in the base area then drop the part and then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up any good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area, pick up a part if detected, and then seek the construction area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and bring it to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, then move to the construction area.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the source then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the source area then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is in the storage area, if not then pick up any detected part.",
        "technical_task": "if you are in the storage and if you detect a part then search randomly, or otherwise if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then walk randomly, or otherwise if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if not, move towards the base area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area. If so, pick up a part. If not, seek the storage area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for good parts.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then go to the base, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected or move randomly if no part is detected.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area but stop if you are already there, and once there, pick up any part you detect.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly unless an obstacle is detected, in which case you should stop moving.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and once you detect a good part, head towards the base area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, and drop it in the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part, or otherwise if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part, or otherwise if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to locate good parts, pick them up if found, and head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are in the construction then pick up the part and then go to the base, or otherwise if you are in the storage then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are in the construction area then pick up the part and then seek the base area, or otherwise if you are in the storage area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you encounter and bringing them to the base for storage.",
        "technical_task": "if you are in the source then go to the base, or then go to the base, or if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or then seek the base area, or if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them off in the storage area of the base. If you find a scrap part, pick it up but do not move.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only when the agent detects it.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part, and if not, pick one up.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and stop when you reach there.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to roam the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if the agent is in the source area, otherwise seek the source area.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, and if you detect one, pick it up. If you are not holding a good part, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if you detect a part, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment. If holding a good part, drop it.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to pick up a good part if detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate around the environment, pick up any good parts you come across, and then proceed towards the storage area to drop them off there.",
        "technical_task": "if you are in the source then go to the base, or then pick up the part and then go to the storage, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or then pick up the part and then seek the storage area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is holding a good part or freeze movement if a condition is met.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when holding a good part, head towards the base area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you detect a part, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to determine if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment, pick them up, and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and head towards the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and when you find one, bring it to the storage area in the base. If you are not holding any part, keep searching for parts.",
        "technical_task": "go to the base, or then go to the storage, or if you are holding a good part then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "seek the base area, or then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and if an obstacle is detected, stop moving.",
        "technical_task": "if you are in the source then drop the part.",
        "spoon_task": "if you are in the source area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the environment. If there is a good part, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise stop moving.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts you encounter and drop them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the construction area without any specific conditions.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any scrap parts you come across in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the source area and stop moving when holding a good part.",
        "technical_task": "if you are in the source and if you are holding a good part then stop moving.",
        "spoon_task": "if you are in the source area and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. Once you detect a good part, freeze your movement.",
        "technical_task": "if you are holding a good part and if you are in the source then stop moving.",
        "spoon_task": "if you are holding a good part and if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and drop them off in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the base area and pick up a good part if one is detected, then drop it in the storage area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area for disposal.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste then drop the part and then go to the waste, or otherwise if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a scrap part then drop the part, or if you are in the waste area then drop the part and then seek the waste area, or otherwise if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding bad parts when detected, and picking up good parts along the way.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part and then go to the base, or if you are in the waste then pick up the part, or otherwise if you are holding a good part and if you are in the source and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part and then seek the base area, or if you are in the waste area then pick up the part, or otherwise if you are holding a good part and if you are in the source area and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and when you detect a bad part, bring it to the waste area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts located in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area unless you are holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and then head towards the storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the source area and pick up any detected parts.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the waste and if you are in the waste and if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area and if you are in the waste area and if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "You need to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area in the environment, and if you detect any parts, pick them up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base's storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or if you are in the storage then drop the part, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the storage area then drop the part, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the source area and bring them to the base, then store them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you are in the source then go to the source.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and stop moving when you detect that you are holding a good part.",
        "technical_task": "if you are in the base then go to the source, or if you are holding a good part then drop the part and then stop moving, or if you detect a part then search randomly, or otherwise if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area then seek the source area, or if you are holding a good part then drop the part and then freeze movement, or if you detect a part then walk randomly, or otherwise if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if an obstacle is detected, stop moving.",
        "technical_task": "if you are in the construction then drop the part and then go to the source, or otherwise if you are holding a good part then go to the waste.",
        "spoon_task": "if you are in the construction area then drop the part and then seek the source area, or otherwise if you are holding a good part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them off in the storage area of the base, while avoiding any scrap parts.",
        "technical_task": "go to the base, or if you detect a part and if you are holding a good part and if you are in the storage then drop the part, or otherwise then pick up the part.",
        "spoon_task": "seek the base area, or if you detect a part and if you are holding a good part and if you are in the storage area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and randomly walk until you detect a part.",
        "technical_task": "if you are in the source then go to the waste, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you detect.",
        "technical_task": "if you are holding a good part then search randomly, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then walk randomly, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly explore the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you come across and drop them in the storage area of the base. If you don't find any good parts, move randomly.",
        "technical_task": "go to the source, or then drop the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or then drop the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts and dropping them off in the storage area at the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then go to the storage, or otherwise if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then seek the storage area, or otherwise if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and pick them up, then bring them to the storage area in the base.",
        "technical_task": "if you are in the base then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect the presence of a good part in the environment, then pick it up if one is detected, otherwise move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and if the agent detects a part, it should pick it up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise randomly roam around.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and if the agent is holding a good part, go to the base area and drop it in the storage area.",
        "technical_task": "if you detect a part and if you are in the source then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you detect a part and if you are in the source area then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, move towards the base area.",
        "technical_task": "if you are in the storage then go to the base.",
        "spoon_task": "if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Roam around the environment randomly until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, actively searching for good parts to pick up.",
        "technical_task": "go to the source, or otherwise then go to the base.",
        "spoon_task": "seek the source area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment, pick it up, and then head to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move randomly throughout the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area without holding any part.",
        "technical_task": "go to the waste, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "seek the waste area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts when detected and head towards the construction area without taking any other actions.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until a good part is detected, then stop and hold the part.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and, if not, pick up a part and then proceed to the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment aimlessly until a part is detected, then pick it up.",
        "technical_task": "search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected, and then pick it up.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and once you have obtained three scrap parts, drop them in the waste area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts around you, and if so, move towards the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if not, move to the source area and pick up a part.",
        "technical_task": "if you are in the storage and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area while holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts in the environment. If you are currently holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area and pick up any detected parts along the way, dropping them immediately if you happen to be holding any.",
        "technical_task": "if you are in the source and if you detect a part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the base for storage.",
        "technical_task": "if you detect a part then go to the base, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area for good parts and pick them up. If you encounter a scrap part, stop moving.",
        "technical_task": "if you are in the source then go to the source, or otherwise if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and then proceed to seek the waste area.",
        "technical_task": "if you are in the storage then go to the waste.",
        "spoon_task": "if you are in the storage area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and drop them in the storage area.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you arrive, start seeking good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and if holding a good part, go to the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part in the storage area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment. Once a scrap part is detected, pick it up and proceed to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts if detected and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the source area and stop moving when you reach there.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts and bring them to the storage area in the base. If you detect a part, pick it up.",
        "technical_task": "if you detect a part then go to the base, or otherwise if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, seek the construction area.",
        "technical_task": "if you are holding a good part and if you are in the construction then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, if not, move towards the source area and pick up any detected parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the base area and drop any parts you are holding there.",
        "technical_task": "go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area. If it is not in the waste area, then move towards the waste area.",
        "technical_task": "if you are in the waste then search randomly.",
        "spoon_task": "if you are in the waste area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly until you detect a good part, then pick it up and head to the base.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment and stop moving if you detect a part, and reach the construction area.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a scrap part then go to the construction, or otherwise if you are in the source then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a scrap part then seek the construction area, or otherwise if you are in the source area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base. If you detect any part in the environment, pick it up.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect as many good parts as possible and bring them to the base, storing them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and stop moving when entering the construction area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good parts found.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up. If the agent is already holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is not in the source area, then pick up a part. If the agent is holding a part, then seek the construction area.",
        "technical_task": "if you are in the source and if you are holding a scrap part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and if you are holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base, or then pick up the part, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then seek the base area, or then pick up the part, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment seeking good parts without changing your state when in the source area.",
        "technical_task": "if you are holding a good part then go to the base, or then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is already in the base area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, if so, pick up any detected part, otherwise seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and head towards the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected and then move to the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the storage area to drop them.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in a specific series of areas before performing an actuator action.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you find one, pick it up and bring it to the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the waste, or if you are in the construction and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the waste area, or if you are in the construction area and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is in the base area and if not, move towards the base area. If the agent is already in the base area, then drop any part it is holding.",
        "technical_task": "if you are in the base then drop the part, or otherwise if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then drop the part, or otherwise if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "go to the source, or if you are in the source and if you detect a part and if you are holding a good part then go to the base, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you are in the source area and if you detect a part and if you are holding a good part then seek the base area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if you are in the construction area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment. Once you detect a scrap part, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and then seek the storage area to drop them off.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deliver them to the construction area.",
        "technical_task": "pick up the part and then go to the construction, or then drop the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the construction area, or then drop the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not holding any part currently.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, pick them up, and head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up good parts if found, and drop them in the storage area of the base.",
        "technical_task": "search randomly, or if you detect a part and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or if you detect a part and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the base construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly around the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the base area and seek out any good parts.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment, and if the agent is holding one, head towards the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts, pick them up, and store them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part, or if you are in the base and if you are in the storage and if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part, or if you are in the base area and if you are in the storage area and if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, stop its movement.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area and stop there.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part once detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the area and if a good part is detected, pick it up. If no good parts are detected, move randomly.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up any good parts in the environment and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to ensure that the agent is in the base area, then search for any good parts to pick up. If a good part is detected, the agent should pick it up and drop it in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any good parts found, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you detect any good parts, go towards the source area.",
        "technical_task": "search randomly, or if you detect a part then go to the source, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or if you detect a part then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and drop them off at the storage area in the base. If you encounter any bad parts, stop moving.",
        "technical_task": "if you are in the source then go to the base, or if you are in the storage and if you detect a part then stop moving, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are in the storage area and if you detect a part then freeze movement, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part, and if not, move randomly.",
        "technical_task": "if you are holding a scrap part then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part whenever it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part in the source area and bring it to the storage area in the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, drop them in the storage area, and continue moving if you are not holding any parts.",
        "technical_task": "go to the source, or if you are holding a good part then drop the part, or then pick up the part and then go to the base, or then search randomly, or then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you are holding a good part then drop the part, or then pick up the part and then seek the base area, or then walk randomly, or then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and bring them to the storage area in the base. If the agent is not carrying a good part, it should search for any parts around.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not currently holding anything.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base.",
        "technical_task": "go to the source, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected when inside the base area.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, while avoiding scrap parts.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the source then drop the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the source area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and bring them back to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or then drop the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or then drop the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check three different conditions before performing an action, which involves picking up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and once you are holding a good part, drop it off at the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts found, and if in the storage area, drop them there. If holding a scrap part, stop moving.",
        "technical_task": "if you are in the storage then drop the part, or if you are holding a good part and if you detect a part then search randomly, or otherwise then stop moving.",
        "spoon_task": "if you are in the storage area then drop the part, or if you are holding a good part and if you detect a part then walk randomly, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part, pick it up, and move towards the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them off in the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the construction area and stop moving when reaching there.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts at the location and pick them up if found.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them back to the base area, moving freely in between without dropping them until you reach the base storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if not to pick up a part from the environment.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find and take them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, looking for good parts to pick up, and upon reaching the storage area, drop them off.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you detect a part then go to the base, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the base area, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if an obstacle is detected, change direction.",
        "technical_task": "if you detect a part then search randomly.",
        "spoon_task": "if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and if you find yourself in the base area while holding a good part, drop it in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the base and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the base area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if one is detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for good parts, pick them up, and then move to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the ground.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and bring them to the base storage area, while avoiding bad parts.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding bad parts, while picking up good parts and storing them in the storage area of the base.",
        "technical_task": "if you are in the source then go to the base, or if you are holding a good part then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are holding a good part then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and bring them to the storage area at the base, while avoiding picking up any bad parts.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly until you find a good part, then pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly within the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if the agent is in the construction area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and when you are in the storage area of the base, drop them.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then drop the part, or then go to the storage, or otherwise if you are in the base and if you are in the storage and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part, or then seek the storage area, or otherwise if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then drop the part, or then pick up the part, or otherwise if you are holding a good part and if you detect a part and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part, or then pick up the part, or otherwise if you are holding a good part and if you detect a part and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and pick up any part you find along the way. If you are not holding any part, continue to seek the base area.",
        "technical_task": "go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the environment and bring them to the source area.",
        "technical_task": "if you are in the source then go to the source, or then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the source area, or then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the environment and store them in the base storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts if the agent is not already holding a good part, otherwise seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for and pick up scrap parts around the base, but freeze movement when holding a scrap part.",
        "technical_task": "if you are in the base and if you detect a part then stop moving.",
        "spoon_task": "if you are in the base area and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and head towards the source area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then drop the part, or if you are in the base and if you are holding a good part then go to the source, or otherwise if you are in the base and if you are holding a good part and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part, or if you are in the base area and if you are holding a good part then seek the source area, or otherwise if you are in the base area and if you are holding a good part and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if you are currently not holding any part, seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment and stop moving when you reach the construction area.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area. If a good part is detected, pick it up and head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the base storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if the agent is not holding any parts, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, and if the agent is not holding any part, then move randomly.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if detected, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, drop any parts it may be holding, and then head towards the construction area.",
        "technical_task": "if you are in the storage then drop the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part whenever detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise randomly walk around.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you come across and then proceed to seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding one, head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and freeze movement when in the construction area.",
        "technical_task": "if you are in the construction then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you are in the construction area then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area. If you are in the storage area, start seeking the base area.",
        "technical_task": "if you are in the storage then go to the base.",
        "spoon_task": "if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up any part found.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the base area, pick up any good parts detected, and drop them in the storage area.",
        "technical_task": "go to the base, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in different areas of the environment and then head to the construction area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and drop them in the base storage area.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if you come across one, and head towards the source area.",
        "technical_task": "if you are in the base then go to the source, or otherwise if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area, or otherwise if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deliver them to the construction area.",
        "technical_task": "pick up the part, or then drop the part, or if you are in the source then go to the construction, or if you are in the waste then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then drop the part, or if you are in the source area then seek the construction area, or if you are in the waste area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if they are, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area at the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the source area.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base storage area, while avoiding bad parts.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the base, or if you detect a part then go to the waste, or then pick up the part and then go to the base, or otherwise then stop moving.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the base area, or if you detect a part then seek the waste area, or then pick up the part and then seek the base area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and drop them in the storage area.",
        "technical_task": "go to the base, or if you detect a part then go to the base, or if you are in the base and if you are holding a good part then go to the storage, or then drop the part, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then seek the base area, or if you are in the base area and if you are holding a good part then seek the storage area, or then drop the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and when approaching a good part, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for any good parts, and once detected, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base for further actions.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when you reach the construction area, pick up any parts you find there.",
        "technical_task": "go to the construction, or then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "seek the construction area, or then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and proceed to the base storage area when holding a good part, but stop moving if you are holding a scrap part.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part and then head towards the source area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the source.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol different areas of the environment and if you detect a good part, pick it up and bring it to the base for storage.",
        "technical_task": "if you are in the base then go to the construction, or if you detect a part then pick up the part, or if you are in the source then go to the base, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the construction area, or if you detect a part then pick up the part, or if you are in the source area then seek the base area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it is, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any parts you encounter.",
        "technical_task": "search randomly, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop when you reach there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and store them in the base's storage area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once you find one, go to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and perform an action when a good part is detected.",
        "technical_task": "if you are holding a good part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, seek the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards a part in the environment and pick it up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and store them in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and stop moving when a scrap part is detected.",
        "technical_task": "pick up the part and then stop moving.",
        "spoon_task": "pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, search for good parts, pick them up, and bring them back to the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a scrap part and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until a good part is detected, then pick it up.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base storage area while avoiding bad parts.",
        "technical_task": "pick up the part and then go to the base, or then go to the storage, or if you detect a part then drop the part, or then search randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or then seek the storage area, or if you detect a part then drop the part, or then walk randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly wander around the environment until a good part is detected, then pick it up.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area while holding a good part, then drop the good part if those conditions are met.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in a specific area, and if so, perform an actuator action and then change state.",
        "technical_task": "if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the storage area in the base.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part and then seek the waste area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the good parts source area, and once you arrive, start searching for good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and head towards the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, seek the waste area.",
        "technical_task": "if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts while avoiding bad parts, picking up any good parts found along the way.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or if you detect a part then pick up the part and then search randomly, or then drop the part, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or if you detect a part then pick up the part and then walk randomly, or then drop the part, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if you are holding a good part, otherwise keep searching for parts.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if there are no good parts detected; otherwise, freeze your movement.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if the agent is not currently holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if one is detected.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move in a random pattern within the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area, freezing movement when holding a scrap part.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part, otherwise, continue random walking.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head towards the base storage area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Roam around the environment randomly until a bad part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stay there.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up a good part, then proceed to move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and store them in the base storage area, ensuring to freeze movement upon holding a good part.",
        "technical_task": "if you are holding a good part then drop the part and then stop moving, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then freeze movement, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the base area for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are in the base then pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are in the base area then pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and once you have one, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the source area.",
        "technical_task": "if you are holding a good part then go to the source, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the source area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them back to the base for storage.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the base then drop the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the base area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if the agent is holding a good part, head towards the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, then pick up any part present in that area.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area to collect good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly and freeze when a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part and then seek the source area.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you detect one, pick it up.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move in a random pattern until you detect a part in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for bad parts, pick them up, and then bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part and drop it if you are.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part from the environment.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, drop it, otherwise seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, go to the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, and if found, pick it up and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate a good part in the environment, pick it up, and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, drop it if so, but if the agent is not holding a good part, then seek the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate and pick up any good parts in the environment, and once holding a good part, bring it to the base.",
        "technical_task": "if you are holding a good part then go to the base, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is currently not holding any part, seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once found, bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the base area without stopping.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the base area, and if an obstacle is detected, stop moving.",
        "technical_task": "if you are in the base and if you detect a part then stop moving.",
        "spoon_task": "if you are in the base area and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and move towards the storage area when holding a good part.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base for storage, while avoiding bad parts. If you detect a bad part, you should stop moving immediately.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or if you are holding a good part and if you are in the storage then drop the part and then go to the base, or otherwise then stop moving.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or if you are holding a good part and if you are in the storage area then drop the part and then seek the base area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "pick up the part, or otherwise if you detect a part then go to the source.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if you find one, bring it to the storage area.",
        "technical_task": "pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then stop moving.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and drop them in the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base, while avoiding bad parts.",
        "technical_task": "if you detect a part then go to the storage, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area, dropping them there. If you encounter a good part, pick it up and continue to the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part then go to the construction, or otherwise if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part then drop the part, or if you are holding a scrap part then seek the construction area, or otherwise if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is not currently there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly explore the environment until a good part is detected, and upon detection, freeze the agent's movement.",
        "technical_task": "search randomly, or otherwise if you detect a part then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then pick up the part, or if you are in the base and if you are in the storage then drop the part and then go to the storage, or otherwise if you are in the base and if you are in the storage then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part, or if you are in the base area and if you are in the storage area then drop the part and then seek the storage area, or otherwise if you are in the base area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area at the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are in the base then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once found, bring them to the base for storage.",
        "technical_task": "if you detect a part then go to the base, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and move randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, picking up any good parts you come across and dropping them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to roam around the environment randomly until a good part is detected, then pick it up.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and deliver them to the storage area in the base. If you detect a part and are holding a good part, drop it in the storage area.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely around the environment without any specific goal.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment, and when you are holding a good part, head towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find any good parts in the environment, pick them up, and bring them to the base.",
        "technical_task": "pick up the part and then go to the base, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "pick up the part and then seek the base area, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction> \n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then drop the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then drop the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if you are not holding any good parts.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the base area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scraps parts in the environment and then proceed to store them in the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is holding a good part, pick it up.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and drop them in the storage area of the base. If the agent is holding a good part, it should seek the base area.",
        "technical_task": "if you are holding a good part then go to the base, or then pick up the part, or otherwise if you detect a part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the base area, or then pick up the part, or otherwise if you detect a part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and if you find any, bring them to the source area.",
        "technical_task": "go to the source, or otherwise if you detect a part then go to the source.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, if not then seek the waste area and perform a state action.",
        "technical_task": "if you are in the waste and if you are in the waste then go to the waste.",
        "spoon_task": "if you are in the waste area and if you are in the waste area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment and pick up a good part when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to roam the environment randomly until you detect a part, then stop moving once a part is detected.",
        "technical_task": "search randomly, or if you detect a part then stop moving, or otherwise if you are in the source then go to the waste.",
        "spoon_task": "walk randomly, or if you detect a part then freeze movement, or otherwise if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment and pick up any detected part.",
        "technical_task": "if you are in the source then pick up the part, or otherwise then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when found, bring them to the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to collect good parts in the environment, and when holding a good part, move towards the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and freeze movement upon detecting a scrap part.",
        "technical_task": "if you are in the source then go to the base, or if you detect a part then pick up the part, or if you are holding a scrap part then stop moving, or then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or if you detect a part then pick up the part, or if you are holding a scrap part then freeze movement, or then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then initiate a random walk state action.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the storage area and pick them up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is not in the storage area, pick up a part. If the agent is in the storage area, move randomly.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the source area while avoiding stopping and gather good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part. If not, seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and navigate to the base storage area to drop them off.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part, and if it is, drop the part.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, and when you are holding a good part, head to the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and move to the base storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and if found, pick them up and bring them to the base for storage. If not holding a good part, keep searching.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base. If the agent is in the construction area, it should stop picking up any parts.",
        "technical_task": "if you detect a part then pick up the part, or if you are in the base then drop the part, or then go to the construction, or if you are in the source and if you are holding a good part then pick up the part, or otherwise if you are in the construction then stop moving.",
        "spoon_task": "if you detect a part then pick up the part, or if you are in the base area then drop the part, or then seek the construction area, or if you are in the source area and if you are holding a good part then pick up the part, or otherwise if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, storage area, and construction area in sequence, and then seek the waste area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any good parts found, and store them in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the source then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "pick up the part and then go to the construction, or then pick up the part and then go to the construction, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or then pick up the part and then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area, but if there are no scrap parts detected, you should continue moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then head towards the storage area.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then drop the part, or if you are in the base then pick up the part, or if you detect a part then pick up the part, or if you detect a part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then drop the part, or if you are in the base area then pick up the part, or if you detect a part then pick up the part, or if you detect a part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for good parts and pick them up.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wander randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, pick it up if available, and then seek the storage area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, seeking the source area and picking up any good parts found along the way.",
        "technical_task": "pick up the part and then go to the source, or then go to the source, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the source area, or then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, once found, move towards the base area.",
        "technical_task": "if you detect a part then go to the base, or if you are in the source then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or if you are in the source area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop when you reach there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, periodically checking for the presence of scrap parts, and when a scrap part is detected, stop moving and pick it up.",
        "technical_task": "if you detect a part and if you are in the source and if you are in the waste then stop moving.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are in the waste area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Roam around the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, but if you detect a part, pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the storage area, and if so, start moving towards the base area.",
        "technical_task": "if you are in the storage then go to the base.",
        "spoon_task": "if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and pick up a part if detected.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you encounter, then bring them to the base for storage.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the base, or then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, the agent should drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment to reach the source area. Once in the source area, pick up any detected parts and bring them back to the base for storage.",
        "technical_task": "if you are in the source then pick up the part, or if you are in the source and if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are in the source area and if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is not holding a good part, seek the source area to find one.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to investigate the source area for good parts and bring them to the base.",
        "technical_task": "if you are in the source then go to the base, or if you are in the source then pick up the part and then go to the base, or otherwise if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are in the source area then pick up the part and then seek the base area, or otherwise if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area while avoiding good parts and stopping when you are holding a scrap part.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then drop the part, or then go to the waste, or if you are in the base and if you are in the storage and if you are in the construction then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then drop the part, or then seek the waste area, or if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, then pick them up and move towards the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and then head towards the base area.",
        "technical_task": "go to the source, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "seek the source area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any scrap parts in the environment, and if you find one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for bad parts, pick them up, and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the source area and start picking up good parts when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area at the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it and then seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and once holding a good part, go to the base area and store it in the storage area.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or otherwise if you are holding a good part and if you detect a part and if you are in the source then go to the storage.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or otherwise if you are holding a good part and if you detect a part and if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base. If you detect a bad part, stop moving.",
        "technical_task": "drop the part, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "drop the part, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if it is holding one.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move randomly within the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any parts you find.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base's storage area, and freeze movement if all good parts are already collected.",
        "technical_task": "pick up the part and then go to the storage, or then stop moving, or then pick up the part and then go to the storage, or if you are holding a good part and if you detect a part and if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then freeze movement, or then pick up the part and then seek the storage area, or if you are holding a good part and if you detect a part and if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise move towards a random location.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the construction area, and if so, instruct the agent to seek the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part present in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then pick up a part.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any detected parts.",
        "technical_task": "if you are in the base then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up if detected, and then head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts when detected, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or if you are in the storage then drop the part, or then pick up the part and then search randomly, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then drop the part, or if you are in the storage area then drop the part, or then pick up the part and then walk randomly, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up when detected, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage, or otherwise if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area, or otherwise if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and when you detect a good part, proceed to the base area for storage.",
        "technical_task": "if you are in the base then go to the storage, or otherwise if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it in the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and when a scrap part is detected, pick it up.",
        "technical_task": "if you are in the base then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and when holding a good part, move towards the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part three times in a row, and if so, pick up the part.",
        "technical_task": "if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area; if so, start moving towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, picking them up when found, and if not holding a good part, move randomly.",
        "technical_task": "if you are holding a good part then search randomly, or if you detect a part then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then walk randomly, or if you detect a part then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and bring them to the storage area of the base.",
        "technical_task": "if you are in the source then pick up the part, or if you are in the base then pick up the part and then go to the storage, or if you detect a part then pick up the part, or otherwise if you are in the storage then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then pick up the part, or otherwise if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part from the source area.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the source area of the environment and pick them up, while avoiding moving around unnecessarily.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then stop moving, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then freeze movement, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row and, upon confirmation, pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if a good part is detected, pick it up and head towards the construction area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area unless an obstacle is detected, in which case you should stop moving and wait.",
        "technical_task": "go to the source, or otherwise if you detect a part then stop moving.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment and drop them in the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>       \n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the environment and bring them to the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if one is detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is not in the source area, pick up a part. If the agent is in the source area, stop moving.",
        "technical_task": "if you are in the source then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment, pick them up when detected, and bring them to the base construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or then pick up the part and then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or then pick up the part and then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area if the agent is not currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, and then seek the base area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for bad parts, pick them up, and then bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part, or if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part, or if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. If the agent is holding a good part, drop it in the storage area of the base. If the agent is not holding any parts, pick up any detected part.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, freezing movement once you are in the storage area.",
        "technical_task": "go to the base, or otherwise if you are holding a good part then drop the part and then stop moving.",
        "spoon_task": "seek the base area, or otherwise if you are holding a good part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there's a good part in the environment. If a good part is detected, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts whenever you detect them in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then pick up the part, or if you are holding a good part then pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are holding a good part then pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move aimlessly in the environment until a part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you encounter, and if you are holding a good part, head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to investigate the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part and if you are holding a good part then search randomly, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part and if you are holding a good part then walk randomly, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, search the source area.",
        "technical_task": "if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, checking for the presence of good parts. When you detect a good part, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts when detected, and if the agent is not in the storage area, seek the storage area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and stop there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and move towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the construction area. If you are, pick up a part, otherwise, continue moving randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and head towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a scrap part in the environment and pick it up.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for good parts and bring them back to the base for storage.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area within the base.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, start seeking the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when the agent is already holding a scrap part, drop it in the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area, pick up good parts, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then go to the storage, or if you are in the source then pick up the part and then go to the storage, or otherwise if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then seek the storage area, or if you are in the source area then pick up the part and then seek the storage area, or otherwise if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, and if you detect a part, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the waste area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and if holding a bad part, head towards the waste area to drop it off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up good parts whenever detected, and head towards the base area with them to drop them in the storage area.",
        "technical_task": "search randomly, or then pick up the part, or then go to the base, or then pick up the part and then go to the base, or then search randomly, or then go to the storage, or then drop the part, or then go to the base, or then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or then pick up the part, or then seek the base area, or then pick up the part and then seek the base area, or then walk randomly, or then seek the storage area, or then drop the part, or then seek the base area, or then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts scattered in the environment and stop moving if you are already holding one or when you cannot find any more scrap parts.",
        "technical_task": "if you are in the base and if you are in the construction and if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the construction area and if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If in the source area, then pick up a part, otherwise stop any movement.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, then perform an actuator action.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected. If not holding any part, seek a state where you can find a good part.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then move towards the source area.",
        "technical_task": "if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate and pick up any good parts you find in the environment.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, do nothing.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, bring it to the storage area. If a bad part is detected, bring it to the waste area.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part and if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part and if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then move to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or if you are in the base then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or if you are in the base area then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while you are in the base area, drop them in the storage area, and if you are not in the base area, pick up any detected part.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base. If you detect any bad parts, drop them at the waste area.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then go to the waste, or if you are holding a good part then go to the base, or then drop the part and then go to the waste, or then pick up the part, or if you are holding a good part and if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then seek the waste area, or if you are holding a good part then seek the base area, or then drop the part and then seek the waste area, or then pick up the part, or if you are holding a good part and if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to move towards the base area if the agent is not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to determine if there is a good part in the storage area, and if so, pick it up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is in the storage area, drop the part there.",
        "technical_task": "if you are in the storage then drop the part and then go to the base.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and perform an actuator action if the condition is met.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up any good parts you encounter, and drop them in the construction area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment seeking good parts, and once found, bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect any part in the environment, pick it up, and go to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, and when holding a scrap part, move towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the base area until you reach it.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then check if the agent is in the storage area, and finally, move towards the source area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then drop that part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if none are found, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up scrap parts if detected, if not holding any parts then stop moving.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected and drop it in the storage area if the agent is holding one.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment, pick it up, and then head towards the base for storage.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts, bring them to the base, and then go to the storage area.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts when detected, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part and if you are in the base and if you are in the storage then drop the part, or then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part, or then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop if you are currently in the construction area.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and perform a specific action when a certain condition is met.",
        "technical_task": "if you are in the construction then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the construction area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any part that is detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and then head towards the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source, or then pick up the part and then go to the source, or then pick up the part, or otherwise if you detect a part then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area, or then pick up the part and then seek the source area, or then pick up the part, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, pick them up when found, and if holding a part, head towards the source area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to direct the agent to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, scanning for any good parts. If a good part is detected, pick it up and move to the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If not, then pick up a part. If the agent is in the construction area, stop and freeze movement.",
        "technical_task": "if you are in the construction then pick up the part and then stop moving.",
        "spoon_task": "if you are in the construction area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and good parts in the environment and bring them to the construction area. If either a scrap part or a good part is detected, pick it up immediately.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or otherwise if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or otherwise if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly within the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, detect and pick up good parts, and then head towards the base storage area to drop them off.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or if you are in the storage then drop the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or if you are in the storage area then drop the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area twice in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for parts in the environment. If the agent is holding a good part, it should drop it, otherwise, pick up any detected part.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and deliver them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if one is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then seek the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or otherwise if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or otherwise if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, continue moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, randomly move around the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area but stop if the agent detects a part.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, and once found, pick them up.",
        "technical_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the source area and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, if found, pick it up and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If so, pick up any detected part; otherwise, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the construction area for any good parts and freeze movement upon detecting a scrap part.",
        "technical_task": "if you are in the construction then go to the storage.",
        "spoon_task": "if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part, pick it up, and head to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then in the storage area, and finally in the construction area before picking up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for scrap parts, pick them up, and head towards the waste area to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area at the base. If you detect a bad part, stop moving.",
        "technical_task": "if you detect a part then drop the part and then go to the storage, or otherwise if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then drop the part and then seek the storage area, or otherwise if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and bring them to the storage area in the base. If you find any bad parts, drop them immediately.",
        "technical_task": "if you detect a part then go to the source, or if you are holding a good part then go to the storage, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you detect a part then seek the source area, or if you are holding a good part then seek the storage area, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once holding one, head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up if found, otherwise continue searching until a good part is detected.",
        "technical_task": "if you are holding a good part and if you are in the source and if you detect a part then pick up the part and then search randomly, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the source area and if you detect a part then pick up the part and then walk randomly, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base. If you detect a bad part, drop it immediately and freeze your movement.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or then go to the base, or otherwise if you are holding a scrap part then drop the part and then stop moving.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or then seek the base area, or otherwise if you are holding a scrap part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, bring them to the base, and drop them in the storage area.",
        "technical_task": "if you detect a part then pick up the part, or then drop the part and then go to the base, or then pick up the part and then go to the base, or if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then drop the part and then seek the base area, or then pick up the part and then seek the base area, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part and then seek the waste area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part, or otherwise if you detect a part then search randomly.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and head towards the base area by avoiding the construction area. If you detect a bad part, stop moving.",
        "technical_task": "go to the source, or if you detect a part and if you are in the construction then search randomly, or otherwise if you detect a part then go to the base.",
        "spoon_task": "seek the source area, or if you detect a part and if you are in the construction area then walk randomly, or otherwise if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until you enter the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts to bring them back to the base while avoiding picking up bad parts.",
        "technical_task": "if you are in the base then go to the source, or if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the source area, or if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you come across and then proceed to the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, pick up any good parts found, and then seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly within the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any bad parts nearby, and if so, pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, and then move towards the base.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to investigate if the agent is in the storage area. If the agent is not in the storage area, check if it is in the base area. If it is not in the base area, check if it is in the construction area, and finally move towards the storage area.",
        "technical_task": "if you are in the storage and if you are in the base and if you are in the construction then go to the storage.",
        "spoon_task": "if you are in the storage area and if you are in the base area and if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, storage area, and construction area. If the agent is in any of these areas, actuate and pick up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is in the storage area.",
        "technical_task": "if you are in the storage and if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and start building when you arrive.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are in the source then pick up the part, or if you detect a part then go to the source, or otherwise if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are in the source area then pick up the part, or if you detect a part then seek the source area, or otherwise if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and pick up a good part if one is detected, otherwise, continue to move randomly.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, and if the agent is holding a good part, head towards the storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment and if you are holding a good part, head towards the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, then if you detect a part, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find any bad parts in the environment, pick them up and deliver them to the waste area, ensuring you stop moving if you are currently holding a bad part.",
        "technical_task": "if you are holding a scrap part then stop moving, or otherwise if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then freeze movement, or otherwise if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then stop all movement.",
        "technical_task": "if you are in the storage then stop moving.",
        "spoon_task": "if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you come across, and avoid moving when holding a good part.",
        "technical_task": "search randomly, or then pick up the part, or then stop moving, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or then pick up the part, or then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, then pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and drop them in the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and go to the waste area to dispose of them.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times, then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop if you detect any parts.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find, and if you are currently holding a scrap part, bring it to the waste area.",
        "technical_task": "go to the source, or then pick up the part and then go to the source, or if you are holding a scrap part then go to the waste, or then go to the source, or otherwise if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "seek the source area, or then pick up the part and then seek the source area, or if you are holding a scrap part then seek the waste area, or then seek the source area, or otherwise if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up a good part if detected, and head towards the source area",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up any good parts in the environment, and if none are detected, head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area one at a time.",
        "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area and if so, drop any part it is holding.",
        "technical_task": "if you are in the waste then drop the part and then search randomly.",
        "spoon_task": "if you are in the waste area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your objective is to navigate through the environment and when you detect a good part, pick it up immediately.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not then pick up a part, and finally move randomly in the environment.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the agent's vicinity, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up and go to the storage area in the base to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any good parts you detect. If you are not in the source area, keep seeking it until you find the good parts.",
        "technical_task": "pick up the part and then go to the source, or otherwise if you detect a part then go to the source.",
        "spoon_task": "pick up the part and then seek the source area, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby, and if so, pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up. If you are in the storage area, drop the part there.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment, picking up good parts when detected, and storing them in the storage area of the base. If you are already in the storage area, continue moving around until you find another good part.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n      \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if it is detected. If holding a part, head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area unless the agent is holding a good part.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the base area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area, stopping when the agent is no longer holding a scrap part.",
        "technical_task": "if you are holding a scrap part and if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are holding a scrap part and if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and move towards the source area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and constantly move randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to go to the base, pick up any part you find, and then seek the source area.",
        "technical_task": "if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if the agent is holding a good part, move towards the base area.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the different areas of the environment, pick up any good parts you find along the way, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part, or if you are in the source then pick up the part, or if you are in the storage then drop the part, or if you are in the construction then pick up the part, or otherwise if you are in the waste then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are in the source area then pick up the part, or if you are in the storage area then drop the part, or if you are in the construction area then pick up the part, or otherwise if you are in the waste area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the source area and start seeking the base area.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part, and finally aim to drop it off in the storage area of the base.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the base then drop the part, or then pick up the part and then go to the storage, or otherwise if you detect a part and if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the base area then drop the part, or then pick up the part and then seek the storage area, or otherwise if you detect a part and if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected and then pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times sequentially, then pick up a part, and finally seek the construction area.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts, and once a good part is detected, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up a good part only if detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deliver them to the base for storage.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wander around the environment freely unless a good part is detected, in which case, pick it up.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and head towards the source area.",
        "technical_task": "if you are in the base and if you are holding a scrap part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, then check if the agent is holding a good part and drop it if so.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up scrap parts when detected, and continue exploring, but if you detect three scrap parts in a row, return to base.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or then search randomly, or if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or then walk randomly, or if you are holding a scrap part and if you are holding a scrap part and if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area for disposal.",
        "technical_task": "if you are in the construction then pick up the part and then go to the waste, or if you are in the source and if you detect a part then search randomly, or then drop the part, or then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the waste area, or if you are in the source area and if you detect a part then walk randomly, or then drop the part, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not currently there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and stay there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts found in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base, while avoiding bad parts.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move in a random walk pattern in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Go to the source area, pick up a good part if available, and then move to the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment, pick them up, and bring them to the waste area.",
        "technical_task": "go to the source, or then pick up the part and then go to the waste, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or then pick up the part and then seek the waste area, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected good parts, and if holding a good part move to the base area.",
        "technical_task": "if you are in the base then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across in the environment and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, move towards the base.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area of the base, but only if you are not already in that area.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part. If the agent is not in the base area, then seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to find good parts, pick them up, and then move towards the base area.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part then search randomly.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up good parts when found, then move randomly.",
        "technical_task": "if you detect a part then search randomly, or otherwise if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then walk randomly, or otherwise if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any part you detect in the environment and then head to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise, continue moving in a random walk.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment, bring them to the base, and store them in the storage area. If you detect any parts while you are in the base area, do nothing.",
        "technical_task": "go to the waste, or then pick up the part, or if you are in the base and if you detect a part then stop moving, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the waste area, or then pick up the part, or if you are in the base area and if you detect a part then freeze movement, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to go to the construction area and pick up a part if one is detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up any good parts found and storing them in the base area.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts and bring them to the storage area in the base, but if you detect any bad parts, immediately stop and pick them up.",
        "technical_task": "drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "drop the part, or if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if not already there, and then stop moving.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the different areas in the environment, then move towards the construction area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the source then go to the construction, or otherwise then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the source area then seek the construction area, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the storage area in the base, and stop moving when no more good parts are available.",
        "technical_task": "if you are in the source and if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up if detected, and head towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If a good part is detected, pick it up, and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then drop it in the storage area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them in the waste area while avoiding moving when not necessary.",
        "technical_task": "if you are holding a scrap part then drop the part and then stop moving, or then pick up the part and then go to the waste, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement, or then pick up the part and then seek the waste area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the base area, pick it up, and then head to the storage area to drop it off.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the source area, and if a part is detected along the way, pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, change the state to seek the construction area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, holding a good part, and if a part is detected, pick it up and seek the source area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and bring it to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, freezing your movement when holding a good part.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are holding a good part then drop the part and then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a good part then drop the part and then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the base area, and when you detect a good part, pick it up.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row. If so, pick up a part. Otherwise, seek the source area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment, if holding a good part, move towards the construction area, otherwise pick up the good part if detected.",
        "technical_task": "if you are in the source and if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, remain idle.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is in the construction area and, if not, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the base for storage while avoiding bad parts.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then drop the part and then go to the base, or then go to the waste, or if you are in the storage and if you are holding a good part and if you are holding a scrap part then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then drop the part and then seek the base area, or then seek the waste area, or if you are in the storage area and if you are holding a good part and if you are holding a scrap part then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any parts detected, and if you are holding a good part, stop moving.",
        "technical_task": "if you are in the source then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then in the storage area, and finally in the construction area. After that, change the agent's state to seek the waste area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times, then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is in the source area, then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, if not, then attempt to pick up a part, and if successful, move towards the storage area.",
        "technical_task": "if you are in the construction and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the construction area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the source area of the environment.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area only if the agent is not holding any scrap part.",
        "technical_task": "if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if you are not currently holding a good part.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if found.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment until you reach the source area.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in different areas and then respond with the appropriate movement action based on the area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the source then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any scrap parts detected, and keep moving unless you are in the waste area.",
        "technical_task": "if you are in the source then stop moving, or then pick up the part and then search randomly, or then pick up the part and then go to the waste, or otherwise then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then freeze movement, or then pick up the part and then walk randomly, or then pick up the part and then seek the waste area, or otherwise then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base storage area.",
        "technical_task": "if you are in the source then go to the storage, or otherwise if you are in the source and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then seek the storage area, or otherwise if you are in the source area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, otherwise keep moving freely.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, move towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part and if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it is, start moving towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and perform an actuator action.",
        "technical_task": "if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base, and if the agent is not holding any good part, it should seek the source area.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "The agent needs to check if it is holding a good part. If it is, the agent should drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the base area, if there are any, pick them up and then head towards the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and if detected, pick them up and stop any further actions.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if it is, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and head towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate and pick up good parts in the environment.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected and then move to a random location.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the base and store any good parts found in the storage area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find and dropping them in the storage area at the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up whenever detected, and then head towards the source area.",
        "technical_task": "go to the storage, or if you detect a part then pick up the part and then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the storage area, or if you detect a part then pick up the part and then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then stop moving.",
        "technical_task": "if you are in the storage then stop moving.",
        "spoon_task": "if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and bring them back to the base storage area.",
        "technical_task": "if you are in the source then go to the base, or otherwise then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when holding one, bring it to the storage area of the base.",
        "technical_task": "go to the source, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and if the agent is not holding any good part, pick one up.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if holding a good part, then proceed to the construction area.",
        "technical_task": "if you are in the storage and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and, if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, then bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or otherwise if you are in the base and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or otherwise if you are in the base area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up good parts in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and move towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and deliver them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and pick them up.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the storage area and drop any good parts you are currently holding.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and then stop moving.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any good parts found, and stop moving once the agent is holding a good part.",
        "technical_task": "if you are in the source and if you detect a part then stop moving, or otherwise then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then freeze movement, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment for any good parts and drop them in the storage area at the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the base area and if you encounter a good part, pick it up.",
        "technical_task": "if you are in the base and if you detect a part then go to the base.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. If you are holding a good part, deliver it to the storage area in the base. Otherwise, continue seeking good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base without stopping.",
        "technical_task": "if you are in the base then pick up the part, or if you are in the source then pick up the part and then go to the base, or if you are in the storage then pick up the part, or then pick up the part, or if you are in the base then pick up the part and then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are in the source area then pick up the part and then seek the base area, or if you are in the storage area then pick up the part, or then pick up the part, or if you are in the base area then pick up the part and then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up, and head to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment until a good part is detected, at which point you should stop moving.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore different areas of the environment, pick up any good parts you find, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage, or if you are in the source and if you detect a part and if you are holding a good part then go to the storage, or otherwise if you are in the construction then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area, or otherwise if you are in the construction area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to head towards the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not, move randomly around the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if not, move towards the storage area.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, pick it up. Otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it's there, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base for storage. If you detect a part, pick it up immediately.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if not, move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, pick up a good part if available, and then drop it.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once you detect one, pick it up and head towards the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source of good parts in the environment, avoiding bad parts, and then bring any good parts found to the construction area.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part and if you are holding a good part and if you are in the construction then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part and if you are holding a good part and if you are in the construction area then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is already holding a good part, head towards the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area only if the agent is not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you reach it.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, but if you detect any part, stop and pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected good parts, and stop moving when you enter the storage area.",
        "technical_task": "if you detect a part then pick up the part and then stop moving, or otherwise if you are in the storage then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement, or otherwise if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base area, storing them in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage, or if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area, or if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and drop them in the waste area.",
        "technical_task": "if you are in the construction and if you are holding a scrap part and if you detect a part then drop the part.",
        "spoon_task": "if you are in the construction area and if you are holding a scrap part and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, or else seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area multiple times before proceeding to an actuator action or a state action.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and pick up a part if it's detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wander around the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start picking up parts once there.",
        "technical_task": "go to the source, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "seek the source area, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up any good parts found, and head towards the base area storing the parts in the storage area.",
        "technical_task": "pick up the part and then go to the base, or then go to the base, or then go to the base, or if you are holding a good part then go to the storage, or then go to the base, or then pick up the part and then go to the base, or then go to the base, or then go to the base, or if you are holding a good part then go to the storage, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or then seek the base area, or then seek the base area, or if you are holding a good part then seek the storage area, or then seek the base area, or then pick up the part and then seek the base area, or then seek the base area, or then seek the base area, or if you are holding a good part then seek the storage area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and when you are holding a good part, drop it.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good parts you find.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part. If you detect a good part, pick it up. If you don't find any good parts, seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area for good parts, pick them up, and bring them to the base storage area for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are in the source then pick up the part, or then go to the source, or then go to the storage, or otherwise then go to the waste.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are in the source area then pick up the part, or then seek the source area, or then seek the storage area, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_waste_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area when a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If it is, then pick up a part. If the agent is not in the construction area, then seek the construction area.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until located by another agent.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and once you have one, bring it to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are good parts in the storage area, and if so, pick them up.",
        "technical_task": "if you are in the storage and if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment and bring them to the waste area. If you find any bad part, stop moving.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or if you are holding a scrap part then stop moving, or otherwise if you detect a part then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area. If you detect a scrap part, pick it up immediately. If you are not carrying a scrap part and you are in the waste area, drop any part you are holding.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or then drop the part and then go to the waste, or if you are holding a scrap part then go to the waste, or otherwise then pick up the part and then go to the waste.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or then drop the part and then seek the waste area, or if you are holding a scrap part then seek the waste area, or otherwise then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, bring it to the storage area at the base. If you are already holding a part when you enter the storage area, drop it there.",
        "technical_task": "if you are in the storage then drop the part and then go to the base, or if you are holding a good part and if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the base area, or if you are holding a good part and if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area at the base.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise if you detect a part then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area for disposal, while stopping any movement if a scrap part is detected.",
        "technical_task": "if you are holding a scrap part then drop the part, or then go to the waste, or otherwise if you detect a part then drop the part and then stop moving.",
        "spoon_task": "if you are holding a scrap part then drop the part, or then seek the waste area, or otherwise if you detect a part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, then head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving in a random walk pattern until a good part is detected, then stop.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up a part, then move in a random direction.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts if detected, and if not, head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, pick them up, and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and if the agent detects a part, then stop moving.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts, pick them up, and then head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deposit them in the construction area if you are already holding one.",
        "technical_task": "if you are in the construction and if you are holding a scrap part then drop the part and then go to the storage, or if you are in the construction then pick up the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are in the construction area and if you are holding a scrap part then drop the part and then seek the storage area, or if you are in the construction area then pick up the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until a good part is detected. Once a good part is found, pick it up.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you detect a good part, pick it up.",
        "technical_task": "pick up the part and then search randomly, or otherwise if you detect a part then search randomly.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, then head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base storage area.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage, or if you detect a part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area, or if you detect a part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and if you find one, pick it up and bring it to the source area.",
        "technical_task": "if you are in the source and if you detect a part then go to the source, or then go to the base, or otherwise if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the source area, or then seek the base area, or otherwise if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, pick up a part if detected, and then move towards the waste area.",
        "technical_task": "if you are in the source and if you detect a part then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row and then pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if found.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then drop that part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and then move them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until you are holding a good part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up any good parts found.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then drop it if so.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up a good part if detected, and bring it to the base storage area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or then go to the storage, or otherwise if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or then seek the storage area, or otherwise if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, bring them to the storage area in the base, and stop when the storage area is reached.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then check if it is in the storage area, and finally head towards the construction area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts and if found, pick them up and drop them in the waste area.",
        "technical_task": "go to the waste, or otherwise if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "seek the waste area, or otherwise if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment unless a good part is detected, in which case you should stop moving.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and deliver them to the base area for storage, while avoiding holding more than one part at a time.",
        "technical_task": "if you are holding a good part and if you are in the base then go to the storage, or otherwise if you are holding a good part and if you are in the source then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the base area then seek the storage area, or otherwise if you are holding a good part and if you are in the source area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them at the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment to the construction area, and when you arrive, perform a specific state action.",
        "technical_task": "if you are in the base and if you are in the construction and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the base area and if you are in the construction area and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base for storage. If you find multiple good parts, pick them all up at once to be efficient.",
        "technical_task": "go to the source, or then pick up the part, or if you are holding a good part then pick up the part and then go to the base, or otherwise if you detect a part and if you detect a part and if you detect a part then pick up the part.",
        "spoon_task": "seek the source area, or then pick up the part, or if you are holding a good part then pick up the part and then seek the base area, or otherwise if you detect a part and if you detect a part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, react appropriately when detecting parts, and head towards the source area.",
        "technical_task": "search randomly, or if you detect a part then go to the source, or otherwise if you are in the base then go to the base.",
        "spoon_task": "walk randomly, or if you detect a part then seek the source area, or otherwise if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If it is, then initiate a random movement.",
        "technical_task": "if you are in the construction then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the construction area then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, while avoiding getting close to scrap parts.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, pick it up if found, and then proceed to move freely.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop if holding a good part, otherwise continuously pick up parts in the environment.",
        "technical_task": "go to the base, or if you are holding a good part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "seek the base area, or if you are holding a good part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the source area and bring them to the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment freely and randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the storage, or otherwise if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area, or otherwise if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for good parts, and when holding a good part, bring it to the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then if it holds a good part pick it up, otherwise seek the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a scrap part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment, and when you detect a part, pick it up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify any bad parts in the environment and pick them up while moving freely unless a bad part is detected.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and perform an actuator action.",
        "technical_task": "if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts whenever they are detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area. If you detect any part, pick it up and keep moving.",
        "technical_task": "if you are holding a scrap part and if you are in the construction then drop the part and then go to the construction, or if you detect a part then pick up the part and then search randomly, or otherwise if you are in the construction then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part and if you are in the construction area then drop the part and then seek the construction area, or if you detect a part then pick up the part and then walk randomly, or otherwise if you are in the construction area then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a certain area is reached.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect good parts from the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to ensure the agent is in the source area and pick up a part if detected, then pick up another part if detected again, and finally drop the parts.",
        "technical_task": "if you are in the source and if you detect a part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base's storage area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment to pick up good parts and drop them in the storage area, while avoiding scrap parts.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage, or then drop the part, or otherwise if you are holding a scrap part and if you are in the waste and if you are in the base then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area, or then drop the part, or otherwise if you are holding a scrap part and if you are in the waste area and if you are in the base area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if it is, then pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby. If no good parts are found, move randomly.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, if so, then pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up a part if detected, then head towards the base area.",
        "technical_task": "if you are in the base then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the source area and drop them in the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are in the source then drop the part and then go to the waste, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are in the source area then drop the part and then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area twice, and if it is, then stop moving.",
        "technical_task": "if you are in the source and if you are in the source then stop moving, or otherwise if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the source area and if you are in the source area then freeze movement, or otherwise if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times consecutively and then perform an actuator action.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a scrap part in the agent's vicinity, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, pick it up and head towards the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once you detect one, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you encounter.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate good parts in the environment, pick them up, and head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area unless the agent is already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and once you find one, go to the base for storage.",
        "technical_task": "if you are in the source then go to the base, or then go to the storage, or otherwise if you detect a part and if you are holding a good part and if you are in the base then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or then seek the storage area, or otherwise if you detect a part and if you are holding a good part and if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise continue to explore the environment.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then seek the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the source area and then move towards the base area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and if you are holding a good part, move towards the storage area in the base. If not, keep randomly walking.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and start building as soon as you arrive.",
        "technical_task": "if you are in the construction then go to the construction, or otherwise then search randomly.",
        "spoon_task": "if you are in the construction area then seek the construction area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if not, seek the storage area. If the agent is not holding a scrap part, then pick up a part.",
        "technical_task": "if you are in the storage then go to the storage, or if you are holding a scrap part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the storage area then seek the storage area, or if you are holding a scrap part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and pick up any part you encounter along the way.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to pick up a part if the agent detects one, then stop moving.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part that is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base. If you detect a scrap part, stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and keep moving randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to reach the source area while avoiding picking up any parts along the way.",
        "technical_task": "go to the source, or otherwise if you detect a part then drop the part and then go to the source.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, pick them up, and head towards the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area. If the agent is in the waste area, stop moving.",
        "technical_task": "if you are in the waste then stop moving.",
        "spoon_task": "if you are in the waste area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and when holding a good part, bring it to the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and start random movement when no specific conditions are met.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to roam the environment freely unless you detect a good part, in which case you should pick it up.",
        "technical_task": "search randomly, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "walk randomly, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part, and if not, navigate to the source area.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source, or if you are holding a good part then drop the part and then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area, or if you are holding a good part then drop the part and then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and deliver them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment to pick up any detected good part, and if holding a good part, go towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part and then search for the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all scrap parts in the environment and bring them to the waste area, avoiding any unnecessary movements.",
        "technical_task": "if you are in the source and if you detect a part then go to the waste, or if you are holding a scrap part then pick up the part and then go to the waste, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the waste area, or if you are holding a scrap part then pick up the part and then seek the waste area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if three specific conditions are met, then perform an actuator action. Otherwise, move to a specific state.",
        "technical_task": "if you detect a part and if you are in the storage and if you are holding a good part then pick up the part, or otherwise if you are in the source then go to the base.",
        "spoon_task": "if you detect a part and if you are in the storage area and if you are holding a good part then pick up the part, or otherwise if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then in the storage area, followed by the construction area, and finally pick up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts while avoiding bad parts.",
        "technical_task": "if you are holding a good part then go to the source, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the source area, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area in the environment, pick up any good parts found there, and head towards the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts in the environment and if found, pick them up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and head towards the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find scrap parts in the environment and pick them up.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the construction area and stop moving when you reach there.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base, or otherwise then go to the base.",
        "spoon_task": "seek the base area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to collect good parts in the environment, then bring them to the storage area in the base while avoiding bad parts.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are in the base then drop the part, or otherwise then go to the storage.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are in the base area then drop the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if you are currently holding a good part, drop it in the storage area.",
        "technical_task": "if you are holding a good part then go to the storage, or then drop the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then drop the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and if you detect a part, pick it up.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, drop it in the storage area, otherwise, move randomly.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part, if not, pick up a part and move towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the base then go to the storage, or otherwise if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area, or otherwise if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you arrive, start searching for good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, if it is holding a good part, and if a part is detected. Then, pick up a part and move towards the base storage area.",
        "technical_task": "if you are in the source and if you are holding a good part and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly in the environment until a scrap part is detected, then pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way, but if you are already holding a part, drop it.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to find good parts and deliver them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, then search for good parts in the environment.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts. When finding a good part, pick it up. If not holding any part, seek the source area.",
        "technical_task": "if you are holding a good part and if you are in the source then drop the part, or if you are holding a good part then pick up the part and then go to the source, or otherwise if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part and if you are in the source area then drop the part, or if you are holding a good part then pick up the part and then seek the source area, or otherwise if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if not, then move to the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, pick it up, and then continue moving randomly.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if not, pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and pick up a part if one is detected.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for parts in the environment, and when you detect a part, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up the part. If not, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and once you find one, head towards the storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts when detected and dropping them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base. If you are not holding a good part, continue searching for one.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, drop them off in the storage area at the base, and avoid picking up any scrap parts.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or then go to the storage, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then seek the storage area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base, pick up any good parts you find, and drop them in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is holding a good part, and if they are, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part, pick it up if detected, and head towards the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source, or then pick up the part and then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area, or then pick up the part and then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding one, bring it to the storage area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base. If you detect any bad parts, stop moving.",
        "technical_task": "pick up the part, or then go to the storage, or if you are holding a scrap part then stop moving, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or then seek the storage area, or if you are holding a scrap part then freeze movement, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek and move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the base area and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and drop them in the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "go to the base, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is not in the construction area, then pick up any part detected.",
        "technical_task": "if you are in the construction then search randomly, or otherwise if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then walk randomly, or otherwise if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then check if the agent is in the storage area, and finally, move towards the construction area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and proceed to the storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you find a good part, then immediately stop moving.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then head towards the construction area for further action.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area, while avoiding picking up scrap parts.",
        "technical_task": "if you are holding a good part then go to the storage, or if you detect a part then drop the part, or if you are holding a scrap part then search randomly, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you detect a part then drop the part, or if you are holding a scrap part then walk randomly, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any bad parts in the environment and then stop moving.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the construction area and instruct it to move towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the base area and perform an actuator action.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and continuously move randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, then pick them up and head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the storage area in the base while avoiding scrap parts.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, otherwise, freeze movement.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and drop them in the storage area of the base. If you encounter any scrap parts, stop picking up parts and head towards the waste area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the source and if you are holding a good part then go to the base, or otherwise if you are in the source and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the source area and if you are holding a good part then seek the base area, or otherwise if you are in the source area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, and when you find one, pick it up.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and bring them to the base, freezing movement only when holding a scrap part.",
        "technical_task": "if you are in the base and if you are holding a scrap part then drop the part and then go to the source, or otherwise if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then drop the part and then seek the source area, or otherwise if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, scan for any signs of a good part, and if detected, pick it up immediately. If a scrap part is detected, you should store it in the waste area.",
        "technical_task": "search randomly, or if you detect a part then pick up the part and then go to the waste, or if you detect a part then stop moving, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part and then seek the waste area, or if you detect a part then freeze movement, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and if holding any, seek the construction area.",
        "technical_task": "if you are holding a good part then go to the construction, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part then seek the construction area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Navigate through the environment until a scrap part is detected, then pick it up.",
        "technical_task": "if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, or move freely if no good parts are found.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move around randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base.",
        "technical_task": "if you are holding a good part then pick up the part, or then go to the base, or then go to the storage, or otherwise if you detect a part then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part, or then seek the base area, or then seek the storage area, or otherwise if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and pick up a part if one is detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part, otherwise move randomly.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up, while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then stop moving, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then freeze movement, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not currently holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if you are in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if the agent is not holding any part, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area only if you are not holding any parts.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the base area and stop moving once you reach there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the source area and collect any good parts you find.",
        "technical_task": "if you are in the source then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for a good part and bring it to the base storage area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part at the base, and if so, move towards the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "go to the source, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop moving when you reach there. If the agent is not in the base area, it should seek the base.",
        "technical_task": "go to the base, or otherwise if you are in the base then stop moving.",
        "spoon_task": "seek the base area, or otherwise if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part and then go to the base, or if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then go to the storage, or then search randomly, or otherwise then go to the storage.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part and then seek the base area, or if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then seek the storage area, or then walk randomly, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <StateAction>state_seek_storage_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to detect if a good part is nearby. If a good part is detected, pick it up, otherwise, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, then randomly move around the environment.",
        "technical_task": "if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and if found, bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a good part then go to the base, or if you are in the source then go to the source, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then seek the base area, or if you are in the source area then seek the source area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base area, then store them in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and when you detect a part, pick it up.",
        "technical_task": "if you detect a part then pick up the part, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and pick up a part if one is detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it in the storage area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Gather as many good parts as possible and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the source area. Once a scrap part is detected, stop moving.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and holding a scrap part, then pick up the scrap part.",
        "technical_task": "if you are in the base and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if it is, pick up any detected part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and when you detect a part, pick it up and head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding a good part, proceed towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, and if holding a good part, head towards the base storage area. If not holding a part, roam randomly.",
        "technical_task": "if you are in the source then go to the base, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving when you detect a part in the environment.",
        "technical_task": "if you detect a part then drop the part and then stop moving.",
        "spoon_task": "if you detect a part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then move to the base area.",
        "technical_task": "if you are holding a good part and if you are in the base then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the construction area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or otherwise if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or otherwise if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up a part if detected, and then head back to the base.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep exploring the environment until a scrap part is found and then pick it up.",
        "technical_task": "search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the source area in the environment and pick up any good parts you detect along the way.",
        "technical_task": "if you are in the source and if you detect a part then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts. If you find a good part, pick it up.",
        "technical_task": "if you detect a part then pick up the part, or if you detect a part then go to the source, or if you are in the source then pick up the part and then search randomly, or then pick up the part, or otherwise then go to the base.",
        "spoon_task": "if you detect a part then pick up the part, or if you detect a part then seek the source area, or if you are in the source area then pick up the part and then walk randomly, or then pick up the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, at which point you should pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts when detected, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are in the base and if you are holding a good part and if you are in the storage then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are in the base area and if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if one is detected, and if the agent is holding a good part, move freely while still checking for part detection.",
        "technical_task": "if you are in the base then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to collect good parts and bad parts, then bring them to the base area.",
        "technical_task": "pick up the part, or otherwise if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "pick up the part, or otherwise if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part, pick it up, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, prioritizing dropping them in the storage area.",
        "technical_task": "if you are holding a good part then go to the base, or then drop the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the base area, or then drop the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area and drop any bad parts that you are holding.",
        "technical_task": "if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any good parts found there, and then seek the construction area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and once you hold a scrap part, move towards the base area",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts from the source area.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the storage area, and when you have collected one, drop it.",
        "technical_task": "if you are in the storage and if you detect a part then go to the storage, or otherwise if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then seek the storage area, or otherwise if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts and picking them up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Navigate through the environment until you reach the source area but freeze movement if you are holding a good part.",
        "technical_task": "if you are in the source and if you are holding a good part then stop moving.",
        "spoon_task": "if you are in the source area and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when a good part is detected, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then head towards the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part. If a part is not detected, then move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment and bring it to the base, then start moving towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts along the way, and once you reach the storage area, drop them there.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, move towards the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, and if you detect any scrap parts, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or if you detect a part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or if you detect a part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding any, head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them in the waste area, while stopping completely if you are in the waste area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it's detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any detected parts, and bring them back to the base.",
        "technical_task": "if you are in the source then search randomly, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then walk randomly, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to efficiently explore the environment, pick up good parts, and avoid collisions with obstacles.",
        "technical_task": "search randomly, or then pick up the part and then search randomly, or if you are in the base and if you are in the storage and if you are holding a good part then go to the construction, or then pick up the part and then search randomly, or if you are in the source and if you are holding a good part and if you detect a part then go to the storage, or then pick up the part and then search randomly, or if you are in the waste and if you are holding a good part and if you are holding a scrap part then go to the waste, or then pick up the part and then search randomly, or if you are in the construction and if you are holding a good part and if you detect a part then go to the waste, or then pick up the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or then pick up the part and then walk randomly, or if you are in the base area and if you are in the storage area and if you are holding a good part then seek the construction area, or then pick up the part and then walk randomly, or if you are in the source area and if you are holding a good part and if you detect a part then seek the storage area, or then pick up the part and then walk randomly, or if you are in the waste area and if you are holding a good part and if you are holding a scrap part then seek the waste area, or then pick up the part and then walk randomly, or if you are in the construction area and if you are holding a good part and if you detect a part then seek the waste area, or then pick up the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect any good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you find but stopping immediately if you detect a bad part.",
        "technical_task": "pick up the part, or if you detect a part then drop the part and then stop moving, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "pick up the part, or if you detect a part then drop the part and then freeze movement, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, avoid obstacles, and reach the construction area in the most efficient way possible.",
        "technical_task": "if you are in the base then go to the construction, or if you are in the storage and if you are in the construction then go to the construction, or otherwise if you are in the source and if you are in the waste then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area, or if you are in the storage area and if you are in the construction area then seek the construction area, or otherwise if you are in the source area and if you are in the waste area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part, otherwise move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously explore the environment looking for good parts and bring them to the storage area of the base.",
        "technical_task": "go to the source, or then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts around the source area, pick them up, and drop them in the storage area of the base.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part, or if you are in the source then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are in the source area then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for a good part, pick it up when detected, and head towards the construction area.",
        "technical_task": "if you are in the source then stop moving, or otherwise then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area then freeze movement, or otherwise then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and if detecting any parts, pick them up.",
        "technical_task": "if you are in the source then go to the source, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base, while avoiding picking up any bad parts.",
        "technical_task": "if you are holding a good part then drop the part, or if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment until a good part is detected, then head towards the base area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, but if you encounter any bad part, stop moving.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the source then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the source area then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly until you detect a part.",
        "technical_task": "if you are in the source then search randomly, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that are detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area, then pick up any detected part.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any good parts along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area. If you detect any bad parts, drop them immediately.",
        "technical_task": "if you are holding a good part then go to the base, or if you are holding a good part and if you are in the storage then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is holding any good parts. If not, then pick up a part and move in a random direction.",
        "technical_task": "if you are holding a good part then drop the part and then stop moving.",
        "spoon_task": "if you are holding a good part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and drop them in the storage area.",
        "technical_task": "drop the part and then go to the storage.",
        "spoon_task": "drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, move towards the storage area.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and if you are already holding a good part, drop it.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or then drop the part and then search randomly, or then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or then drop the part and then walk randomly, or then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up a good part if detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment and when you detect one, move towards the waste area.",
        "technical_task": "pick up the part, or otherwise if you detect a part then go to the waste.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and store them in the base storage area. If you detect any bad parts, stop picking up parts and move freely.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then pick up the part and then go to the storage, or otherwise if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part and then seek the storage area, or otherwise if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not already holding any part. If the agent is holding a part, then the agent should seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and pick up a part if detected.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Check if the agent is in the source area, if yes then stop the movement. If not, seek the source area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas of the environment while searching for good parts. Upon finding a good part, pick it up.",
        "technical_task": "if you are in the base then go to the source, or if you are in the source then go to the storage, or if you are in the storage then go to the construction, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then seek the source area, or if you are in the source area then seek the storage area, or if you are in the storage area then seek the construction area, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base's storage area while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly search for good parts in the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the source area but if you detect a part, pick it up immediately.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and once you reach the source area, start looking for parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the different areas of the environment and, upon detecting a good part, bring it to the storage area in the base.",
        "technical_task": "if you are in the base then go to the construction, or if you are in the base and if you are in the construction and if you are in the storage then drop the part, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then seek the construction area, or if you are in the base area and if you are in the construction area and if you are in the storage area then drop the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up scrap parts if found, and stop moving upon holding a scrap part.",
        "technical_task": "if you are in the construction then pick up the part, or then go to the waste, or then drop the part, or otherwise if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are in the construction area then pick up the part, or then seek the waste area, or then drop the part, or otherwise if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up, and then head towards the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, then switch to searching for scrap parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for any good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when spotting a good part, head towards the storage area in the base.",
        "technical_task": "go to the base, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and store them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, then pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, move towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the storage area of the base without stopping.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part and then go to the storage, or if you are in the storage then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the storage area then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts when they are detected and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any good parts detected, storing them in the storage area. If you are holding a good part, move freely without picking up more parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source, or then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for good parts and bring them to the base, then seek the construction area.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deliver them to the waste area before performing a random movement.",
        "technical_task": "if you are holding a scrap part then go to the waste, or then pick up the part and then go to the waste, or then search randomly, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then seek the waste area, or then pick up the part and then seek the waste area, or then walk randomly, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts, pick them up, and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste, or if you detect a part then pick up the part, or otherwise if you detect a part then search randomly.",
        "spoon_task": "pick up the part and then seek the waste area, or if you detect a part then pick up the part, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when an obstacle is detected, change direction.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is, pick up a part, otherwise move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or if you are in the base then pick up the part, or then pick up the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the base area then pick up the part, or then pick up the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area or stop moving when a scrap part is detected.",
        "technical_task": "if you are in the source then pick up the part, or if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any detected parts, and seeking the source area.",
        "technical_task": "pick up the part and then go to the source, or otherwise then pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area, or otherwise then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is holding a good part, and if so, bring it to the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and stop moving when holding a good part.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and pick them up, then move to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, start moving towards the storage area.",
        "technical_task": "if you are in the construction then go to the storage.",
        "spoon_task": "if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and head towards the base area.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part, or then pick up the part and then go to the base, or then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and bring them to the storage area in the base, dropping them there.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if it is, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to find and pick up good parts. If you detect a bad part, stop moving. If you are holding a good part, head towards the base.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part, or if you detect a part then stop moving, or if you are holding a good part then drop the part and then go to the base, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part, or if you detect a part then freeze movement, or if you are holding a good part then drop the part and then seek the base area, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base construction area but stop if there is a scrap part detected on the way.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area to collect parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the storage area only when you are not holding any part.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area, then freeze your movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if true, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if it's holding a good part, then drop it.",
        "technical_task": "if you are in the construction and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the construction area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage, or if you are in the base and if you detect a part then pick up the part, or otherwise if you are in the storage and if you are holding a good part then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area, or if you are in the base area and if you detect a part then pick up the part, or otherwise if you are in the storage area and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base. If the agent is already in the storage area holding a good part, it should drop the part and freeze movement.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then stop moving, or otherwise then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then freeze movement, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not, move towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to inspect the environment areas and then move towards the waste area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up a good part if detected, otherwise halt all movement.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, drop it in the storage area if the agent is holding a good part, and seek the base area continuously.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and head towards the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, remain still.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, and if holding a good part, move to the base area.",
        "technical_task": "pick up the part and then go to the source, or then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the source area, or then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts detected in the environment, and if so, pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area three times in a row, and if so, perform an actuator action.",
        "technical_task": "if you are in the construction and if you are in the construction and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area and if you are in the construction area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if you come across any good parts, pick them up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect bad parts and bring them to the waste area, and if no parts are detected, move randomly.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding scrap parts, searching for good parts to pick up if found, and freezing movement upon detecting a scrap part.",
        "technical_task": "if you are holding a scrap part then search randomly, or then pick up the part and then search randomly, or then pick up the part and then go to the base, or if you are in the source and if you detect a part then stop moving, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly, or then pick up the part and then walk randomly, or then pick up the part and then seek the base area, or if you are in the source area and if you detect a part then freeze movement, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n       \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any scrap parts nearby. If a scrap part is detected, pick it up; otherwise, seek a random area.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when you detect one.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up any good parts you find and dropping them in the storage area, while also avoiding holding scrap parts.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base area, seeking the storage area to drop them off. If you encounter a bad part, stop moving.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part then pick up the part, or then pick up the part, or if you are holding a scrap part then stop moving, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part then pick up the part, or then pick up the part, or if you are holding a scrap part then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, searching for any parts along the way.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts and drop them off at the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for good parts. If you find a good part, pick it up and head towards the base.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base then go to the base.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part then pick up the part, or otherwise if you are holding a good part and if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up good parts whenever detected, and stopping only when holding a scrap part.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and if you detect one, pick it up and head towards the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and head towards the base if you are holding a good part.",
        "technical_task": "search randomly, or if you detect a part and if you are holding a good part then go to the base, or otherwise if you detect a part then search randomly.",
        "spoon_task": "walk randomly, or if you detect a part and if you are holding a good part then seek the base area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. Once you detect a good part, pick it up and head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and return them to the base while avoiding bad parts.",
        "technical_task": "if you are in the base then pick up the part, or then search randomly, or then pick up the part, or if you are holding a good part and if you are holding a scrap part and if you are holding a good part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or then walk randomly, or then pick up the part, or if you are holding a good part and if you are holding a scrap part and if you are holding a good part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment, and when holding a good part, go to the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a scrap part, and if so, drop it.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area of the base.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you detect a good part, pick it up. Once holding a good part, head towards the base.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "go to the source, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts nearby. If you detect a good part, pick it up; otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and pick up a part if detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not currently holding any part.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment and seek good parts in the source area, then drop them in the storage area at the base.",
        "technical_task": "if you are in the source then go to the base, or otherwise then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then navigate randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if a good part is detected; otherwise, freeze your movement.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the base area and freeze movement when arriving there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part; otherwise, move randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the source area to find good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a part is detected, and then stop moving.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the good parts in the environment and head towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and head towards the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then go to the source, or then search randomly, or otherwise then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then seek the source area, or then walk randomly, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only when the agent detects a part.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and transport them to the storage area of the base without stopping.",
        "technical_task": "if you detect a part and if you are in the source and if you are holding a good part then go to the storage, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and head towards the base upon finding one.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and pick them up if detected.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area of the environment and pick up good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for good parts, and if holding a good part, move towards the base area.",
        "technical_task": "if you are in the source and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise move freely.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment, pick them up, and then head to the construction area, freezing movement upon detection of bad parts.",
        "technical_task": "if you are in the source then go to the waste, or if you are holding a scrap part then go to the construction, or otherwise if you detect a part and if you are holding a good part then stop moving.",
        "spoon_task": "if you are in the source area then seek the waste area, or if you are holding a scrap part then seek the construction area, or otherwise if you detect a part and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them off in the storage area at the base. If the agent detects any part, it should pick it up.",
        "technical_task": "go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if the agent is holding a scrap part, but if it detects a good part, it should pick it up.",
        "technical_task": "if you are holding a scrap part and if you are holding a good part then search randomly.",
        "spoon_task": "if you are holding a scrap part and if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area while avoiding bad parts and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or if you detect a part and if you are holding a good part and if you are in the source then go to the source, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the base area, or if you detect a part and if you are holding a good part and if you are in the source area then seek the source area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them back to the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the base, or if you detect a part and if you are holding a good part then go to the base, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area, or if you detect a part and if you are holding a good part then seek the base area, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the base area. If it is not in the base area, pick up a part, otherwise, seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas in the environment and perform specific actions based on your location.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source, or otherwise if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or otherwise if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the closest good part and approach it cautiously.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way, dropping them once in the source area.",
        "technical_task": "go to the source, or if you detect a part then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and head towards the storage area in the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, periodically picking up any detected parts.",
        "technical_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not then move towards the base area.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part then go to the base.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "if you detect a part then go to the base, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, drop any part it is holding. If the agent is not in the storage area, then seek the source area.",
        "technical_task": "if you are in the storage then drop the part and then go to the source.",
        "spoon_task": "if you are in the storage area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once found, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to find good parts, then move to the base area and store them in the storage area. If you encounter any bad parts, stop moving.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are holding a good part and if you are in the storage then search randomly, or otherwise then stop moving.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are holding a good part and if you are in the storage area then walk randomly, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "pick up the part, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base construction area only if you are not holding a good part.",
        "technical_task": "if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and transport them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and drop them off in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, pick up a part if detected, and then drop it.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then perform an actuator action.",
        "technical_task": "if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if true, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good parts you find.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, pick it up if so, and then head towards the base.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base area. If you encounter a bad part, stop moving.",
        "technical_task": "go to the base, or if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then stop moving, or then pick up the part, or then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "seek the base area, or if you are holding a good part then drop the part, or if you detect a part and if you are holding a scrap part then freeze movement, or then pick up the part, or then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up any part available. If the agent is not in the source area, then move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to go to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up good parts when detected, and drop them in the storage area of the base, while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or then pick up the part, or otherwise if you are in the base and if you are holding a good part and if you detect a part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or then pick up the part, or otherwise if you are in the base area and if you are holding a good part and if you detect a part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area if a good part is detected, or else continue with your current state of action.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any parts you encounter.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously pick up good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the source area and pick it up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, picking up a good part if detected, and then proceed to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and pick them up.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area. If you are already in the construction area, drop the scrap part there.",
        "technical_task": "if you are in the construction then drop the part, or otherwise if you are in the construction and if you are holding a scrap part then stop moving.",
        "spoon_task": "if you are in the construction area then drop the part, or otherwise if you are in the construction area and if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, move towards the source area.",
        "technical_task": "if you are holding a good part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected or freeze your movement if already holding a good part.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are, then move towards the base storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then freeze its movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and store them in the construction area of the base. If you detect a good part, pick it up.",
        "technical_task": "pick up the part and then go to the construction, or if you are holding a scrap part and if you are in the base then go to the construction, or then go to the source, or if you detect a part then pick up the part and then search randomly, or otherwise then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area, or if you are holding a scrap part and if you are in the base area then seek the construction area, or then seek the source area, or if you detect a part then pick up the part and then walk randomly, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, picking up any good parts you encounter and freezing movement if you are in the construction area.",
        "technical_task": "search randomly, or if you detect a part then pick up the part and then stop moving, or otherwise if you are in the construction then search randomly.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part and then freeze movement, or otherwise if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts whenever you detect them.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, but if you encounter a bad part, stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage, or otherwise then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, pick up any scrap parts you find, and if you detect multiple scrap parts in a row, drop them at the waste area.",
        "technical_task": "if you are in the source then go to the source, or then pick up the part, or then pick up the part and then go to the waste, or otherwise if you detect a part and if you detect a part and if you detect a part then drop the part.",
        "spoon_task": "if you are in the source area then seek the source area, or then pick up the part, or then pick up the part and then seek the waste area, or otherwise if you detect a part and if you detect a part and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find all the good parts in the environment and once you pick one up, head towards the base area while avoiding moving randomly.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then stop moving, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any good parts in the environment, and if none are detected, perform a random movement.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times consecutively and if so, head towards the construction area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the construction.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts, bring them to the base, and drop them in the storage area. If you detect any bad parts, stop and freeze movement.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part, or if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a scrap part and if you are in the base and if you are in the storage then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part, or if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a scrap part and if you are in the base area and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the source then go to the storage.",
        "spoon_task": "if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in search of good parts, and when you detect a part, pick it up.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up, and then head towards the base to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the good parts source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment, and drop it in the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up a part, then proceed to the construction area without stopping, and finally drop the part there.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and pick them up, but if you encounter a bad part, halt all actions immediately.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are holding a scrap part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are holding a scrap part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for parts and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if you are holding a good part, drop it in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when reaching the source area, pick up any detected parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If holding a good part, head to the storage area at the base.",
        "technical_task": "go to the source, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "seek the source area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to search for good parts, then move to the storage area in the base when holding a good part, and finally drop the part there.",
        "technical_task": "pick up the part and then go to the storage, or then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, if so, pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you arrive, start searching for any parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once found, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, collecting good parts and dropping them in the storage area whenever you find one.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if holding a good part, go to the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts only if the agent is not currently holding a scrap part, and then seek the construction area.",
        "technical_task": "if you are holding a scrap part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a scrap part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts until you detect one, then move towards the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the construction and if you are holding a good part then go to the storage, or then search randomly, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the construction area and if you are holding a good part then seek the storage area, or then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding any, head towards the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment, and when you detect one, pick it up and move towards the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area three times in a row, and if so, perform the actuator action.",
        "technical_task": "if you are in the construction and if you are in the construction and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area and if you are in the construction area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area only if the agent is not currently holding any parts.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and if you encounter a bad part, stop moving.",
        "technical_task": "search randomly, or then pick up the part and then search randomly, or if you detect a part then stop moving, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or then pick up the part and then walk randomly, or if you detect a part then freeze movement, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the base for storage, freezing movement if you encounter any bad parts.",
        "technical_task": "go to the base, or otherwise if you are holding a good part and if you are in the storage and if you are in the construction then drop the part and then go to the source.",
        "spoon_task": "seek the base area, or otherwise if you are holding a good part and if you are in the storage area and if you are in the construction area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. If you are holding a good part, drop it in the storage area of the base. If you are not holding any part, keep searching for good parts.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or otherwise then go to the source.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts you find and bring them to the base, storing them in the storage area. If you detect any bad parts, drop them immediately.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part and if you detect a part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part and if you detect a part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate the base area and head towards it.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, pick up a good part.",
        "technical_task": "if you are holding a good part and if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for bad parts in the environment, and if two bad parts are detected, stop moving.",
        "technical_task": "if you are in the source then go to the waste, or if you are holding a scrap part then stop moving, or otherwise if you detect a part and if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area then seek the waste area, or if you are holding a scrap part then freeze movement, or otherwise if you detect a part and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any good part you find.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, if so, then freeze the movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts if they are detected, and if not, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment to detect any good parts and bring them to the base storage area while avoiding holding scrap parts.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then go to the base, or then drop the part, or then pick up the part, or then pick up the part, or then drop the part and then go to the source, or if you are holding a scrap part then search randomly, or then drop the part, or then pick up the part, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then seek the base area, or then drop the part, or then pick up the part, or then pick up the part, or then drop the part and then seek the source area, or if you are holding a scrap part then walk randomly, or then drop the part, or then pick up the part, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment while constantly moving.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then search randomly, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then walk randomly, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up good parts if found, and upon detecting a good part, bring it to the base area.",
        "technical_task": "if you are in the base then drop the part, or then search randomly, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then drop the part, or then walk randomly, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stay in the base area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the base and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment freely and pick up any good parts you come across, dropping them in the storage area when holding one.",
        "technical_task": "search randomly, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "walk randomly, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and stop moving once you reach there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are, pick up a part and then randomly walk.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area. If you are not in the source area, seek the source area.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not, seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any good part you encounter along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or otherwise if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or otherwise if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, and if so, pick up any part found.",
        "technical_task": "if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if no specific condition is met.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the nearest good part in the environment, pick it up, and then head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to wait until a good part is detected, then go to the storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and pick them up if detected, otherwise, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good part detected, and head towards the construction area.",
        "technical_task": "if you are in the base then pick up the part, or if you detect a part and if you are holding a good part and if you are in the construction then go to the construction, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part, or if you detect a part and if you are holding a good part and if you are in the construction area then seek the construction area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, go towards the construction area.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them back to the base for storage, while avoiding scrap parts.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while patrolling the environment, and when you encounter a scrap part, pick it up.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up any part detected; otherwise, seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area. If the agent is in the base area, stop moving.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and when you detect a good part, pick it up. However, if you are in the construction area, you should hold onto it until you reach the base area to drop it.",
        "technical_task": "if you are in the base then drop the part, or if you are in the construction then pick up the part, or if you are in the source and if you detect a part then pick up the part, or if you are in the storage then drop the part, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then drop the part, or if you are in the construction area then pick up the part, or if you are in the source area and if you detect a part then pick up the part, or if you are in the storage area then drop the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if it is, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up if found, and stop moving if holding a good part or if a bad part is detected.",
        "technical_task": "if you are in the base and if you are in the storage then drop the part, or if you are in the source and if you detect a part then search randomly, or otherwise if you are holding a good part and if you detect a part then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area then drop the part, or if you are in the source area and if you detect a part then walk randomly, or otherwise if you are holding a good part and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source then go to the base, or if you are in the source and if you are holding a good part then drop the part and then go to the base, or then pick up the part, or then pick up the part and then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are in the source area and if you are holding a good part then drop the part and then seek the base area, or then pick up the part, or then pick up the part and then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until a good part is detected, then pick it up.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment seeking out good parts while constantly moving forward.",
        "technical_task": "pick up the part and then go to the source, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the construction area to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base while avoiding scrap parts. If you encounter a scrap part, stop picking up parts temporarily.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the storage, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when a good part is detected, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and once you find one, pick it up.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part, or if you are in the base and if you are holding a good part and if you are in the storage then drop the part, or otherwise then go to the source.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part, or if you are in the base area and if you are holding a good part and if you are in the storage area then drop the part, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <StateAction>state_seek_source_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if an agent is holding a good part, move towards the source area.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until a part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected. If a good part is not detected, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them off in the waste area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and deliver them to the storage area in the base. If you encounter any bad parts on your way, leave them untouched.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are in the source then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are in the source area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect while constantly moving randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if not, move freely.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then change its state to seek the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore different areas in the environment, checking for specific conditions in each area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected part along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment, searching for good parts. When you detect a good part, pick it up and head towards the base.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the base then pick up the part and then go to the base, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the base area then pick up the part and then seek the base area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base for storage, but if you detect a bad part, stop and drop it immediately.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then drop the part and then go to the base, or then pick up the part and then search randomly, or then pick up the part and then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then drop the part and then seek the base area, or then pick up the part and then walk randomly, or then pick up the part and then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and store them in the storage area of the base.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part and then go to the storage, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is not in the base area, then seek the base area.",
        "technical_task": "if you are in the base and if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part; otherwise, move randomly.",
        "technical_task": "if you are in the base then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, then head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not currently holding any part, otherwise stop moving.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, randomly move around the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you detect any parts, pick them up.",
        "technical_task": "search randomly, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it and then seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if the agent detects a part, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the source area until you reach it.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are holding a scrap part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are holding a scrap part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part, or if you are in the source and if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part, or if you are in the source area and if you detect a part and if you are holding a scrap part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>       \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area and drop any bad parts you are carrying. If there are no bad parts detected, move freely while searching for good parts.",
        "technical_task": "if you are in the base then go to the waste, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you are in the base area then seek the waste area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part; otherwise, seek the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts and if you are holding a scrap part, drop it in the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, drop it in the storage area if in the base area, and if holding a scrap part, head to the waste area and drop it there.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage, or then search randomly, or otherwise then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or then walk randomly, or otherwise then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Look for good parts in the environment, and when you find one, head to the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment, drop them in the storage area of the base, and freeze movement if any scrap parts are picked up.",
        "technical_task": "go to the source, or if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then stop moving, or otherwise if you are in the base and if you detect a part and if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "seek the source area, or if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then freeze movement, or otherwise if you are in the base area and if you detect a part and if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment and head towards the source area once found.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move aimlessly around the environment until a good part is detected, then pick it up.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the source area while holding the part.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any detected parts, and if you are holding a good part, stop moving.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts, pick them up, and drop them off in the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction, or if you detect a part then pick up the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area, or if you detect a part then pick up the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if it is holding a good part, then drop the part.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage, while also avoiding bad parts.",
        "technical_task": "if you are in the source then pick up the part, or then go to the base, or otherwise then drop the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part, or then seek the base area, or otherwise then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base. If you are not holding any part, then seek the source area.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or then pick up the part, or otherwise if you are holding a good part and if you are in the storage then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or then pick up the part, or otherwise if you are holding a good part and if you are in the storage area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition> \n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is holding a good part, move towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the source area and drop them in the base storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up a good part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if no parts are detected then randomly move around.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you come across while avoiding bad parts. Once you have a good part, bring it to the base.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and deliver them to the base's storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts while avoiding bad parts.",
        "technical_task": "if you detect a part then drop the part.",
        "spoon_task": "if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather scrap parts in the environment and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any good parts that are detected. When holding a good part, you should move to the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the storage area in the base. If the agent is holding a good part and is in the storage area, it should drop the part. If the agent finds a good part, it should stop moving.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then stop moving.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area. If you are, pick up a part, if not then move randomly.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, then pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and drop it in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts whenever they are detected and drop them in the waste area.",
        "technical_task": "go to the waste, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the waste area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area in the environment and start searching for parts there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise randomly move around.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if you are not holding any part, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, and drop them if the agent is in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part, pick it up, and then head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part, otherwise seek the construction area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "if you are in the base then go to the storage, or if you are holding a good part and if you detect a part then drop the part and then stop moving, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you are holding a good part and if you detect a part then drop the part and then freeze movement, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area and pick up any parts detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts found in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the source area for good parts, pick them up, and then head to the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a scrap part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and drop them in the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "if you are in the base then pick up the part, or if you are holding a good part and if you are in the storage then go to the storage, or otherwise if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are holding a good part and if you are in the storage area then seek the storage area, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, stopping at predetermined locations for inspection and picking up any detected parts.",
        "technical_task": "if you are in the base then go to the construction, or if you detect a part then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then seek the construction area, or if you detect a part then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area, pick up any good part detected, and then move towards the storage area to drop it off.",
        "technical_task": "go to the construction, or otherwise if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "seek the construction area, or otherwise if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and freeze movement when holding a scrap part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head towards the base area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts and if you find any, pick them up and head towards the base area. Once in the base area, store the good parts in the storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are holding a good part and if you are in the base and if you are in the storage then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are holding a good part and if you are in the base area and if you are in the storage area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you detect a part, pick it up and continue searching for more good parts.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you are in the base and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you are in the base area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up any good parts you find, and bring them to the base for storage, avoiding freezing in place if you encounter any scrap parts.",
        "technical_task": "go to the base, or if you are holding a good part and if you are holding a scrap part then search randomly, or then go to the base, or if you are in the storage then drop the part and then go to the base, or if you are in the storage then pick up the part, or otherwise then search randomly.",
        "spoon_task": "seek the base area, or if you are holding a good part and if you are holding a scrap part then walk randomly, or then seek the base area, or if you are in the storage area then drop the part and then seek the base area, or if you are in the storage area then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part and seek the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if the agent is not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you detect any good parts, pick them up without stopping.",
        "technical_task": "if you detect a part then pick up the part, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts from the source area and bring them to the base storage area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you are holding a good part then drop the part, or then pick up the part, or then drop the part, or if you are in the source then go to the base, or if you are in the source then pick up the part and then go to the base, or if you are in the source then pick up the part, or then drop the part, or then pick up the part, or if you are in the source then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you are holding a good part then drop the part, or then pick up the part, or then drop the part, or if you are in the source area then seek the base area, or if you are in the source area then pick up the part and then seek the base area, or if you are in the source area then pick up the part, or then drop the part, or then pick up the part, or if you are in the source area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then bring them to the base for storage.",
        "technical_task": "go to the source, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, pick up any good parts present, and then seek the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part only if the agent is not currently holding anything.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, or randomly move around the environment if no part is detected.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and start performing construction tasks.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up if detected, and head towards the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up if found, and head towards the base area with them.",
        "technical_task": "pick up the part and then go to the base, or if you are in the base then pick up the part, or then search randomly, or then pick up the part and then go to the base, or then pick up the part, or then pick up the part and then go to the base, or if you detect a part then pick up the part, or then search randomly, or then pick up the part and then go to the base, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are in the base area then pick up the part, or then walk randomly, or then pick up the part and then seek the base area, or then pick up the part, or then pick up the part and then seek the base area, or if you detect a part then pick up the part, or then walk randomly, or then pick up the part and then seek the base area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "pick up the part, or then go to the base, or then drop the part, or then pick up the part, or then go to the base, or then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then seek the base area, or then drop the part, or then pick up the part, or then seek the base area, or then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area, pick up any good parts you find, and drop them in the storage area.",
        "technical_task": "go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up parts if detected, otherwise seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the base for storage.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base, or if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area, or if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and drop them in the storage area of the base.",
        "technical_task": "if you are in the source then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and stop moving when encountering a good part.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area, and if so, pick up a part. If not in the base area, move towards the base.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, otherwise keep searching for a good part.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area. If you are, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a scrap part in the environment and drop it there.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts if found, bring them to the base storage area, and stop moving if you encounter a bad part.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or then pick up the part and then go to the storage, or if you are holding a scrap part then stop moving, or then search randomly, or if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or then pick up the part and then seek the storage area, or if you are holding a scrap part then freeze movement, or then walk randomly, or if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part, and if not, pick up a part and then move randomly.",
        "technical_task": "if you are holding a scrap part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, then pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and keep moving until one is found.",
        "technical_task": "if you detect a part then search randomly.",
        "spoon_task": "if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If in the source area, pick up a part, otherwise, move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and when holding a good part, move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not holding a scrap part.",
        "technical_task": "if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the construction area. If you detect a bad part, stop moving.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area only when holding a good part.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts found, and bring them to the base for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or then search randomly, or if you detect a part then pick up the part, or then search randomly, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or then walk randomly, or if you detect a part then pick up the part, or then walk randomly, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment as an agent, checking for any signs of danger. If you detect danger, you should stop moving immediately.",
        "technical_task": "if you are in the base then go to the waste, or if you are in the source and if you detect a part then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the waste area, or if you are in the source area and if you detect a part then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and if the agent is already holding a good part, move towards the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment, bring them to the base, and store them in the storage area.",
        "technical_task": "if you detect a part and if you are in the base then drop the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are in the base area then drop the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if the agent is not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if you detect a good part, pick it up and head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or if you are in the base then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or if you are in the base area then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and pick up any detected parts, then move to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are in the base then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and proceed to move towards the construction area.",
        "technical_task": "if you are in the storage then go to the construction.",
        "spoon_task": "if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and when holding a good part, move towards the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up parts from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect the presence of good parts in the environment, pick them up, and then seek the source area for more good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base. If you are not holding any good parts, you should pick them up when detected.",
        "technical_task": "if you are holding a good part and if you are in the base then drop the part, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the base area then drop the part, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, or freeze movement otherwise.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and stop moving when in the source area.",
        "technical_task": "if you are in the base and if you are in the waste and if you are in the source then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the waste area and if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect scrap parts, pick them up, and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up if detected.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and then seek the construction area.",
        "technical_task": "if you are in the storage then go to the construction.",
        "spoon_task": "if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts and pick them up when detected.",
        "technical_task": "if you are in the base and if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts while avoiding any good parts, and when encountering a scrap part, pick it up.",
        "technical_task": "if you are in the source then drop the part, or if you are holding a good part and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then drop the part, or if you are holding a good part and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and if not, continue moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are in the source then pick up the part, or otherwise if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part and if you are in the source area then pick up the part, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that are detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a scrap part if it is detected, then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area.",
        "technical_task": "if you are in the source and if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area and drop any parts you are carrying there.",
        "technical_task": "go to the base, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "seek the base area, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if it is, pick up a part.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area in the base. If you find any bad parts, stop moving.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then go to the base, or then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then seek the base area, or then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and pick up any good parts you encounter, dropping them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, then seek the construction area.",
        "technical_task": "if you are in the storage then go to the construction.",
        "spoon_task": "if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up, then move towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, move towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if any good parts are nearby, and if not, start moving randomly.",
        "technical_task": "if you detect a part then search randomly.",
        "spoon_task": "if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and take them to the storage area in the base, but if you find any bad parts, you should stop moving.",
        "technical_task": "go to the base, or if you are holding a good part and if you are in the source then go to the storage, or otherwise then search randomly.",
        "spoon_task": "seek the base area, or if you are holding a good part and if you are in the source area then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then freeze its movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, if so, pick up a part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment, otherwise randomly walk around.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area, and if you are, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the storage area in the base if you are not already there. If you detect a part, pick it up. Otherwise, stop moving.",
        "technical_task": "go to the storage, or if you are in the storage then search randomly, or otherwise then drop the part.",
        "spoon_task": "seek the storage area, or if you are in the storage area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area and start building something.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and if holding a good part, head towards the base area.",
        "technical_task": "pick up the part and then go to the source, or then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the source area, or then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and if the agent is not holding any good part, then move towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly explore the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are already holding a good part, go to the base and drop it there.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts and head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts if you are not already holding one, and then move towards the base area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is in a specific area, and if it is, perform an actuator action, otherwise, perform a state action.",
        "technical_task": "if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then move to the base area to drop them off in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once found, bring them to the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage, or if you are in the storage then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the storage area, or if you are in the storage area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect a part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "go to the construction, or then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "seek the construction area, or then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment and pick up a good part when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move to the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is any good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, pick it up.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, checking for good parts and picking them up, then delivering them to the storage area at the base. If you detect any bad parts, immediately head to the waste area.",
        "technical_task": "search randomly, or if you detect a part then go to the storage, or then go to the waste, or then pick up the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "walk randomly, or if you detect a part then seek the storage area, or then seek the waste area, or then pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if holding a good part, then drop it in the storage area.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up when found, and bring them to the base area for storage.",
        "technical_task": "if you are in the base then drop the part, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then drop the part, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base area for storage.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area, stopping if you encounter a bad part.",
        "technical_task": "go to the waste, or if you detect a part then pick up the part, or then drop the part, or then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "seek the waste area, or if you detect a part then pick up the part, or then drop the part, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and drop them in the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or if you are in the source then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or if you are in the source area then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and head towards the base area.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to find good parts and bring them to the base, freezing movement when holding a good part.",
        "technical_task": "if you are holding a good part then search randomly, or otherwise then pick up the part and then stop moving.",
        "spoon_task": "if you are holding a good part then walk randomly, or otherwise then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, bring them to the base, and drop them off in the storage area.",
        "technical_task": "pick up the part, or then drop the part and then go to the base, or if you detect a part then pick up the part and then go to the storage, or if you are in the source then go to the source, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "pick up the part, or then drop the part and then seek the base area, or if you detect a part then pick up the part and then seek the storage area, or if you are in the source area then seek the source area, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts whenever they are detected in the environment and then bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part, or then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If they are, perform an actuator action.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, and if so, drop any held part.",
        "technical_task": "if you are in the waste then drop the part.",
        "spoon_task": "if you are in the waste area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area, pick up good parts, and bring them to the construction area. If the agent is holding a good part, they should drop it.",
        "technical_task": "if you are in the source then go to the source, or if you are holding a good part then drop the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or if you are holding a good part then drop the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, pick them up when detected, and head towards the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is holding a good part, head towards the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area but stop if you detect any part along the way.",
        "technical_task": "if you detect a part then stop moving.",
        "spoon_task": "if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and then head to the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and if you are holding a bad part, go to the waste area.",
        "technical_task": "if you are in the waste and if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are in the waste area and if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts in the environment, pick them up, and then head towards the storage area.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and drop any parts found.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the storage area and bring them to the base.",
        "technical_task": "if you are in the storage then pick up the part and then go to the base, or otherwise if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the base area, or otherwise if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then move towards the base area, storing them in the storage section.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and drop them off in the storage area if you are currently holding a good part.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop when you arrive there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment until you reach the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if you are currently in the source area.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for parts in the environment, pick them up, and store them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you come across, stop moving if you are holding a scrap part, and seek the source area if not carrying anything.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part, or then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Wander around the environment randomly until a good part is found.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and head towards the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for parts when you arrive. If you are holding a good part, then seek the base area.",
        "technical_task": "go to the source, or otherwise if you are in the source then search randomly.",
        "spoon_task": "seek the source area, or otherwise if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts, pick them up, and then head towards the construction area.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, bring them to the waste area, and stop moving when holding a scrap part.",
        "technical_task": "if you are in the construction then pick up the part and then go to the waste, or then pick up the part and then go to the waste, or then drop the part and then search randomly, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the waste area, or then pick up the part and then seek the waste area, or then drop the part and then walk randomly, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and go to the storage area in the base to drop them off.",
        "technical_task": "if you are in the base then go to the source, or if you are in the source and if you detect a part then go to the base, or otherwise if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area then seek the source area, or if you are in the source area and if you detect a part then seek the base area, or otherwise if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area to dispose of them.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, move towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect, and if no good part is detected, then move freely.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather scrap parts in the environment, then bring them to the waste area and drop them there.",
        "technical_task": "if you are in the source then pick up the part and then go to the waste, or if you are in the source then go to the waste, or if you detect a part then pick up the part, or if you detect a part then drop the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the waste area, or if you are in the source area then seek the waste area, or if you detect a part then pick up the part, or if you detect a part then drop the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a part, then pick it up.",
        "technical_task": "search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not, pick up a part and then seek the construction area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly around the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up, and deliver it to the storage area in the base.",
        "technical_task": "if you are in the storage then search randomly, or if you detect a part and if you are holding a good part and if you are in the base then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the storage area then walk randomly, or if you detect a part and if you are holding a good part and if you are in the base area then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base. If you detect a part and are already in the storage area, drop it there.",
        "technical_task": "if you detect a part and if you are in the storage then drop the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are in the storage area then drop the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "You need to pick up a good part if it is detected, otherwise, stay still.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and bring them to the base for storage.",
        "technical_task": "if you detect a part then go to the base, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area, but if you are already in the construction area, stop.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate any good parts in the environment, pick them up, and head towards the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any good parts you find there, and then head towards the base.",
        "technical_task": "go to the source, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and, upon detection, bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then go to the base, or then search randomly, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area, or then walk randomly, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and bring them to the waste area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the waste, or then drop the part and then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the waste area, or then drop the part and then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base, or if you detect a part then go to the base, or then pick up the part, or then drop the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the base area, or if you detect a part then seek the base area, or then pick up the part, or then drop the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and then head towards the storage area in the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if not, move towards the storage area.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate between different areas in the environment searching for good parts and storing them in the base area.",
        "technical_task": "if you are in the base then drop the part and then go to the storage, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then drop the part and then seek the storage area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and move freely unless you are in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then search randomly, or otherwise if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly, or otherwise if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and randomly move around.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect scrap parts when detected in the environment and head towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts found, and drop them off in the storage area of the base. If you detect a bad part or reach the construction area, stop moving.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part and if you are holding a good part then go to the storage, or if you detect a part then pick up the part and then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part and if you are holding a good part then seek the storage area, or if you detect a part then pick up the part and then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if you are in the source area. If you are in the source area, pick up a part; if not, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good part you find, and drop it off in the storage area of the base. If you detect bad parts, stop moving.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then drop the part and then go to the storage, or if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you are in the source and if you are in the base then drop the part and then go to the storage.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then drop the part and then seek the storage area, or if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you are in the source area and if you are in the base area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continually seek the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and search for good parts. Once you detect a good part, pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore different areas of the environment, pick up any good parts you find, and freeze movement when holding a scrap part.",
        "technical_task": "if you are in the base then pick up the part and then search randomly, or if you are in the source and if you are holding a good part and if you detect a part then pick up the part, or otherwise if you are in the waste then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area then pick up the part and then walk randomly, or if you are in the source area and if you are holding a good part and if you detect a part then pick up the part, or otherwise if you are in the waste area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then move to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if holding a good part, go to the base area, and drop it in the storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area at the base.",
        "technical_task": "if you are in the source then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to visit all areas of the environment in a specific order: base, source, waste, and finally return to the base.",
        "technical_task": "if you are in the base and if you are in the source and if you are in the waste then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are in the waste area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is currently not there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, and when you detect one, pick it up.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and bring it to the storage area of the base.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas of the environment and pick up a good part if detected, dropping it when reaching the storage area. If an agent is holding a scrap part, it should stop moving.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source, or then go to the waste, or if you are in the base and if you are in the storage and if you are in the construction then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or then seek the waste area, or if you are in the base area and if you are in the storage area and if you are in the construction area then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and bring them to the base storage area.",
        "technical_task": "go to the base, or if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any detected part, and then seek the construction area.",
        "technical_task": "if you are in the source and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are in the source then pick up the part, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, initiate movement towards the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If not in the storage area, then pick up a part.",
        "technical_task": "if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times consecutively, and then move towards the waste area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts if detected in the environment, and if the agent is not holding a part, seek the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, detect and pick up good parts, and drop them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part, or if you are in the source then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are in the source area then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are not, start seeking the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the base, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and start working there.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if any good parts are detected, and if so, move towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, picking up any good parts you find while avoiding bad parts, and storing them in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a scrap part then stop moving.",
        "spoon_task": "pick up the part and then seek the storage area, or if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a scrap part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop moving if the agent is already in the base area.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, pick up a part; if the agent is holding a good part, move randomly.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then proceed to the construction area.",
        "technical_task": "if you are holding a good part and if you are in the construction then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part nearby. If there is, pick it up, and if not, continue moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and bring them to the storage area of the base, while avoiding the construction area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or if you are in the base then drop the part and then go to the storage, or otherwise if you are in the base and if you are in the construction and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or if you are in the base area then drop the part and then seek the storage area, or otherwise if you are in the base area and if you are in the construction area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or then pick up the part and then go to the base, or then drop the part, or otherwise if you are holding a good part and if you are in the storage and if you are in the base then drop the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then pick up the part and then seek the base area, or then drop the part, or otherwise if you are holding a good part and if you are in the storage area and if you are in the base area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area, pick up good parts if detected, and seek the storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part from the environment.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them back to the base for storage.",
        "technical_task": "pick up the part and then go to the source, or if you are holding a good part then drop the part, or then pick up the part and then go to the base, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "pick up the part and then seek the source area, or if you are holding a good part then drop the part, or then pick up the part and then seek the base area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then seek the storage area in the base to drop them off.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once you spot one, head towards the source area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when an agent detects a good part, it should stop moving. If an agent detects a bad part, it should pick it up.",
        "technical_task": "if you detect a part then stop moving, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then freeze movement, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, pick them up when detected, and then move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the base for storage.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or then drop the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or then drop the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until a good part is detected. Once you detect a good part, pick it up and then head towards the storage area.",
        "technical_task": "search randomly, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "walk randomly, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected and then head towards the base area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and halt your movement once you reach there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the construction area.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part, or if you are holding a good part then drop the part, or then pick up the part, or otherwise then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part, or if you are holding a good part then drop the part, or then pick up the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if there is one.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up scrap parts whenever you detect one, and then head towards the construction area.",
        "technical_task": "if you are in the source then pick up the part and then go to the construction, or if you are in the waste then search randomly, or then pick up the part, or if you detect a part then pick up the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the construction area, or if you are in the waste area then walk randomly, or then pick up the part, or if you detect a part then pick up the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment to the storage area in the base, and if you detect a good part, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, then drop the part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part and then drop it if it is.",
        "technical_task": "if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area while avoiding holding on to the scrap parts for too long.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste, or otherwise if you are holding a scrap part then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area, or otherwise if you are holding a scrap part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base. If you are not in the storage area, head towards it.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the storage then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding a good part, head towards the source area.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is not already holding a good part.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment looking for good parts, and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if you are in the waste area or holding a good part, and if so, drop the part.",
        "technical_task": "if you are in the waste and if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are in the waste area and if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, pick up a part. If not, randomly move around the environment.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, pick it up, and then head to the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part and then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If so, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore for good parts in the environment and drop them in the storage area of the base, while also stopping if you happen to have a good part with you.",
        "technical_task": "if you are holding a good part then drop the part, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, and if it is, pick up a part.",
        "technical_task": "if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and head towards the base area once found.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts, and when you detect one, pick it up.",
        "technical_task": "if you detect a part then search randomly, or if you detect a part then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or if you detect a part then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If it is, pick up a part, otherwise, seek the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base. If you're not holding any good parts and you detect a part, pick it up. Lastly, move randomly in the environment.",
        "technical_task": "pick up the part and then go to the storage, or if you are holding a good part then search randomly, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the storage area, or if you are holding a good part then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoiding the construction area, and when reaching the source area, pick up any detected parts.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the source then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times consecutively, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up if detected, and proceed to drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if your location is close to a good part, and if so, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to inspect whether the agent is in the storage area. If it is, then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and stop moving if you detect any part.",
        "technical_task": "search randomly, or otherwise if you detect a part then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it's detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and freeze movement upon encountering a scrap part. If you find multiple good parts simultaneously, you should pick them up all at once.",
        "technical_task": "pick up the part and then search randomly, or if you are holding a good part then pick up the part and then stop moving, or if you detect a part then pick up the part, or then pick up the part, or otherwise if you are holding a good part and if you are holding a good part then pick up the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you are holding a good part then pick up the part and then freeze movement, or if you detect a part then pick up the part, or then pick up the part, or otherwise if you are holding a good part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move between different areas of the environment and picking up any good parts you find along the way.",
        "technical_task": "if you are in the base and if you are in the construction then pick up the part, or if you are in the source then go to the base, or if you are in the storage then pick up the part and then go to the source, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the construction area then pick up the part, or if you are in the source area then seek the base area, or if you are in the storage area then pick up the part and then seek the source area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them off at the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for any good parts, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, perform an actuator action.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, heading towards the storage area.",
        "technical_task": "if you detect a part then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and freeze movement when holding a bad part.",
        "technical_task": "go to the source, or then pick up the part and then search randomly, or then pick up the part and then stop moving, or if you detect a part then pick up the part, or if you are holding a good part then go to the source, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part and then walk randomly, or then pick up the part and then freeze movement, or if you detect a part then pick up the part, or if you are holding a good part then seek the source area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts in the environment and head towards the base construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts from the source area and bring them to the base storage area.",
        "technical_task": "pick up the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any bad parts nearby, and if so, pick them up immediately.",
        "technical_task": "go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the storage area. Once you find a good part, pick it up and move towards the storage area.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a good part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the construction area. If you are already in the construction area, drop the part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then seek the source area.",
        "technical_task": "if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and bring them to the storage area in the base. If you are holding a good part and inside the storage area, drop it there. If you are not holding a part but detect one, pick it up and continue searching.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up any good parts in the environment and then bring them to the construction area.",
        "technical_task": "go to the construction, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "seek the construction area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are in the storage then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are in the storage area then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find and pick up scrap parts in the environment, and when you are holding a scrap part, move towards the waste area.",
        "technical_task": "if you are in the base and if you detect a part then go to the waste.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment while avoiding the waste area and pick up good parts whenever detected.",
        "technical_task": "if you are in the waste and if you are in the waste and if you are in the waste then search randomly, or if you detect a part and if you are holding a good part and if you are in the storage then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the waste area and if you are in the waste area and if you are in the waste area then walk randomly, or if you detect a part and if you are holding a good part and if you are in the storage area then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is holding a good part. If it is holding a good part, drop it in the storage area; if not, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts and pick them up.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If not, pick up a part, otherwise move to the base area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the base.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts when detected and immediately freeze your movement once you are holding one.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area, dropping them there.",
        "technical_task": "if you are in the base and if you are holding a scrap part then drop the part and then go to the waste, or if you are in the source then go to the waste, or otherwise if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are holding a scrap part then drop the part and then seek the waste area, or if you are in the source area then seek the waste area, or otherwise if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts. Once you spot one, pick it up and head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and if a good part is detected, pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and head towards the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it's detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan for bad parts in the environment and if detected, pick them up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base, stopping when holding a good part.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the source then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scan the environment for good parts, and if you are currently holding a good part, drop it at the storage area of the base.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop a part if so.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect good parts in the environment, and once detected, pick them up and head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you detect and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment seeking good parts and avoid moving when holding a good part.",
        "technical_task": "if you are holding a good part then go to the source, or otherwise if you are in the storage then stop moving.",
        "spoon_task": "if you are holding a good part then seek the source area, or otherwise if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and drop them in the storage area of the base, while avoiding any bad parts.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base area. If you detect a bad part, stop collecting.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and store them in the storage area of the base if you are already holding a scrap part. Otherwise, pick up any scrap part you find in the environment.",
        "technical_task": "if you are holding a scrap part and if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are holding a scrap part and if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area in the environment.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously navigate the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, and once you find one, head towards the storage area in the base.",
        "technical_task": "go to the storage.",
        "spoon_task": "seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to collect scrap parts in the environment and then head towards the waste area to discard them.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If so, pick up a part, otherwise, continue moving randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment until you are holding one, then head towards the waste area.",
        "technical_task": "pick up the part, or then go to the waste, or then drop the part, or then pick up the part, or if you are holding a scrap part then go to the waste, or otherwise then search randomly.",
        "spoon_task": "pick up the part, or then seek the waste area, or then drop the part, or then pick up the part, or if you are holding a scrap part then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence> \n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you encounter, and bring them to the storage area in the base. If you detect a bad part, stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part, or if you detect a part then drop the part and then stop moving, or if you are holding a good part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part, or if you detect a part then drop the part and then freeze movement, or if you are holding a good part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, then pick up a part if detected.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, start searching for good parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent is in the source area, then start searching for parts there.",
        "technical_task": "if you are in the source then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the source area and bring them back to the base, dropping them in the construction area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, detect any parts, pick them up, and freeze movement if holding a good part.",
        "technical_task": "go to the source, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part if detected, and if not, keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is not holding a good part, then seek the source area.",
        "technical_task": "if you are holding a good part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part that is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you detect a good part, go to the base for storage.",
        "technical_task": "if you detect a part and if you are in the base then go to the storage.",
        "spoon_task": "if you detect a part and if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, then pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, pick it up. Otherwise, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for any good parts, and if one is detected, pick it up.",
        "technical_task": "if you are holding a good part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if holding one, store it in the storage area, otherwise keep moving randomly.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment until you detect a good part, then pick it up.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, perform a random walk.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and store them in the storage area. If you detect a bad part, immediately head towards the waste area to drop it.",
        "technical_task": "if you are in the source then go to the base, or if you detect a part and if you are holding a good part and if you are in the storage then go to the base, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you detect a part and if you are holding a good part and if you are in the storage area then seek the base area, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if holding a good part, head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or if you are holding a good part and if you are in the base and if you are in the storage then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment until a good part is detected, then seek the construction area.",
        "technical_task": "if you are in the construction and if you detect a part then go to the construction.",
        "spoon_task": "if you are in the construction area and if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, periodically picking up any good parts found and dropping them at the storage area of the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate and pick up any good parts in the environment, then move towards the source area.",
        "technical_task": "if you detect a part and if you are in the storage and if you are holding a good part then go to the source.",
        "spoon_task": "if you detect a part and if you are in the storage area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if not, seek the base area. If the agent is in the base area, pick up any part present.",
        "technical_task": "if you are in the base then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, but if none is detected, move freely in the environment.",
        "technical_task": "if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area only if you are not holding any parts.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and when you are holding a good part, move towards the storage area and drop it there.",
        "technical_task": "if you detect a part and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base for storage.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and when holding a good part, seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts if detected, and if the agent is not already holding one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good part you detect in the environment and immediately drop it.",
        "technical_task": "if you detect a part then drop the part and then search randomly.",
        "spoon_task": "if you detect a part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part that you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Patrol the environment and pick up any good parts found along the way.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and head to the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "go to the source, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and start picking up parts.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and stop moving when in the waste area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the waste, or if you are in the base then go to the waste, or otherwise then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the waste area, or if you are in the base area then seek the waste area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the storage area if the agent is holding a good part, otherwise continue exploring the environment.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and head towards the waste area if you detect any.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the waste.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area of the base. If you are not in the base area, continue to move towards the base.",
        "technical_task": "if you detect a part and if you are holding a scrap part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part and if you are holding a scrap part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment and bring it to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up good parts when detected, and if holding a good part, bring it to the base area for storage.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then go to the base, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly and if the agent detects a part, pick it up and stop moving.",
        "technical_task": "search randomly, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, and once holding a good part, move towards the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the base area and, if you detect a good part, pick it up.",
        "technical_task": "if you are in the base and if you detect a part then go to the base.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for parts in the environment, pick them up, and bring them to the construction area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or then drop the part and then go to the construction, or if you are holding a good part then go to the construction, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or if you detect a part then pick up the part, or then drop the part and then seek the construction area, or if you are holding a good part then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to only pick up a good part if it is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then check if it is in the storage area and finally move towards the waste area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the waste.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three consecutive times before moving to the waste area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you are holding a good part, drop it in the storage area of the base. If not, continue seeking for good parts.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the source then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the source area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base storage area while avoiding bad parts.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the storage, or then pick up the part, or otherwise if you are in the waste and if you are holding a scrap part and if you detect a part then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise if you are in the waste area and if you are holding a scrap part and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area and then move towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and randomly explore the environment.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment, bring them to the construction area, and stop moving if you detect any good parts.",
        "technical_task": "pick up the part, or then drop the part and then go to the construction, or if you are holding a scrap part and if you are holding a good part then stop moving, or otherwise if you are holding a scrap part then search randomly.",
        "spoon_task": "pick up the part, or then drop the part and then seek the construction area, or if you are holding a scrap part and if you are holding a good part then freeze movement, or otherwise if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once holding a good part, head towards the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, moving randomly, but stop if you detect any part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n    <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, then seek the source area, and if a part is detected, pick it up.",
        "technical_task": "if you are in the storage and if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when you reach the waste area, drop any scrap parts you may be carrying.",
        "technical_task": "drop the part and then go to the waste, or otherwise then search randomly.",
        "spoon_task": "drop the part and then seek the waste area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoid the construction area, pick up good parts if detected, and drop them in the storage area.",
        "technical_task": "if you are in the base and if you are in the source and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts along the way, and if you encounter a scrap part, stop moving.",
        "technical_task": "if you are holding a good part then search randomly, or if you are holding a good part then search randomly, or if you are holding a scrap part then stop moving, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then walk randomly, or if you are holding a good part then walk randomly, or if you are holding a scrap part then freeze movement, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, stop moving when you detect a bad part, and bring the collected scrap parts to the waste area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the waste, or otherwise if you detect a part then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the waste area, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and bring them to the base, ensuring they are stored in the storage area.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, and when you detect a part, pick it up.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If not, then pick up a part. If the agent is holding a good part, seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, seek the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area if the agent is holding a good part, otherwise, continue the previously planned movement.",
        "technical_task": "if you are holding a good part then go to the base.",
        "spoon_task": "if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected, then pick it up.",
        "technical_task": "pick up the part, or otherwise then search randomly.",
        "spoon_task": "pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base for storage.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and when you detect a good part, pick it up.",
        "technical_task": "if you detect a part then search randomly, or if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts in the storage area, and if so, move towards them.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start searching for any parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the construction area. When you find a good part, pick it up and move towards the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, then pick up a part. If the agent is not in the source area, then seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards a specific area in the environment.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, drop it in the storage area at the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until you are in the waste area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base area.",
        "technical_task": "if you are in the base then go to the source, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then seek the source area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part three times in a row before changing its movement state.",
        "technical_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when holding a good part, go to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, searching for good parts while avoiding holding any scrap parts.",
        "technical_task": "if you are holding a scrap part then go to the source.",
        "spoon_task": "if you are holding a scrap part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, check if a part is detected and then seek the source area.",
        "technical_task": "if you are holding a good part and if you detect a part then go to the source.",
        "spoon_task": "if you are holding a good part and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up, and then move freely until another good part is detected.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area only if the agent is not currently holding a scrap part.",
        "technical_task": "if you are holding a scrap part then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, bring them to the base, and drop them off in the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the base, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the base area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, move to the storage area.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for any parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around randomly and pick up any part detected in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, and once you detect one, pick it up.",
        "technical_task": "if you are in the source and if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up a good part if detected, and seek the base area.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times consecutively before picking up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if you are not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, go to the base area.",
        "technical_task": "if you detect a part then go to the base, or then stop moving, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or then freeze movement, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area, and if so, start heading towards the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "go to the source, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "seek the source area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up any good parts you find, and drop them in the storage area of the base. However, if you detect any bad parts, you should immediately stop moving.",
        "technical_task": "if you are in the base then drop the part, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then drop the part, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until you reach the base area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to sense if a good part is detected, and if so, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and if holding a good part, bring it to the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base. If you encounter a scrap part, stop moving.",
        "technical_task": "pick up the part and then go to the storage, or otherwise if you are holding a good part and if you are in the base then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise if you are holding a good part and if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if a good part is detected, otherwise stay still.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is holding a good part, go to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base, while avoiding any scrap parts along the way.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or if you are holding a good part then drop the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part, otherwise seek the construction area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up any detected part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, move towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, seek the base area.",
        "technical_task": "if you are holding a good part and if you are holding a scrap part then go to the base.",
        "spoon_task": "if you are holding a good part and if you are holding a scrap part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "pick up the part, or then pick up the part and then go to the base, or if you detect a part and if you are holding a good part then go to the storage, or otherwise if you are in the source then go to the source.",
        "spoon_task": "pick up the part, or then pick up the part and then seek the base area, or if you detect a part and if you are holding a good part then seek the storage area, or otherwise if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if there are no parts detected, then move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, pick them up, and then proceed to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if not, move to the storage area.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment for good parts, and if the agent enters the storage area, drop them off. If not, continue exploring for more good parts.",
        "technical_task": "if you are in the storage then drop the part, or then go to the base, or if you are holding a good part and if you are in the storage then drop the part, or otherwise then go to the base.",
        "spoon_task": "if you are in the storage area then drop the part, or then seek the base area, or if you are holding a good part and if you are in the storage area then drop the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part. If the agent is not in the source area, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts from the source area and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek and go to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the source and if you are holding a good part and if you detect a part then pick up the part and then go to the base, or otherwise if you are in the storage then drop the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the source area and if you are holding a good part and if you detect a part then pick up the part and then seek the base area, or otherwise if you are in the storage area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row, then pick up a part if detected, or move randomly if not.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if it is, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to drop any good part that the agent is holding and then seek the base area.",
        "technical_task": "drop the part and then go to the base.",
        "spoon_task": "drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is carrying one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up scrap parts in the environment and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in a specific area and perform an action accordingly.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and when detected, pick them up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your objective is to check if the agent is in various areas and perform an actuator action or a state action based on the conditions.",
        "technical_task": "if you are in the base and if you are in the source and if you are in the waste then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you are in the waste area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until a good part is detected, then pick it up.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, you should head to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base, stopping only if you are holding a good part.",
        "technical_task": "if you are in the source then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to prioritize finding good parts over bad parts and bring them to the storage area in the base, while avoiding getting distracted by the construction area.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the base, or if you are holding a good part and if you are in the construction then drop the part and then go to the storage, or otherwise if you are holding a scrap part and if you detect a part then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the base area, or if you are holding a good part and if you are in the construction area then drop the part and then seek the storage area, or otherwise if you are holding a scrap part and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek the source area and pick up any part detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, collect them and bring them to the base for storage.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part, or then go to the base, or if you are in the base then go to the storage, or then pick up the part, or then drop the part, or if you detect a part then pick up the part, or then go to the base, or if you are in the base then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part, or then seek the base area, or if you are in the base area then seek the storage area, or then pick up the part, or then drop the part, or if you detect a part then pick up the part, or then seek the base area, or if you are in the base area then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the source area, and if you detect a part, pick it up.",
        "technical_task": "drop the part and then go to the source, or otherwise if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "drop the part and then seek the source area, or otherwise if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area of the base if the agent is not already there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you detect a good part, immediately go to the storage area in the base.",
        "technical_task": "if you are holding a scrap part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a scrap part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts in the environment and drop them off at the storage area in the base.",
        "technical_task": "if you detect a part then go to the base, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is in the storage area, drop the part.",
        "technical_task": "if you are in the storage then drop the part, or then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the storage area then drop the part, or then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Collect scrap parts in the environment and once holding one, head towards the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts and proceed to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to scavenge for good parts in the environment and deliver them to the storage area in the base. If the agent is holding good parts, drop them in the storage area.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then go to the base, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then seek the base area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you find in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area looking for good parts and if you detect a part, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, pick up a part if one is detected, and then seek the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up scrap parts and then move towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise, seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if not, move towards the base area.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, otherwise move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area only when a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, detect parts, and move towards the source area.",
        "technical_task": "if you detect a part and if you are in the source and if you are in the source then go to the source, or if you detect a part and if you are in the source and if you are in the source then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are in the source area then seek the source area, or if you detect a part and if you are in the source area and if you are in the source area then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up, and then head towards the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate a good part, pick it up, and bring it to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "You are required to pick up a good part only when you are in the source area.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Retrieve the good parts and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and randomly move around.",
        "technical_task": "pick up the part and then search randomly, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly until a scrap part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, drop them in the storage area, and if you detect a bad part, stop moving.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then drop the part and then stop moving, or if you are holding a good part then drop the part and then go to the storage, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then drop the part and then freeze movement, or if you are holding a good part then drop the part and then seek the storage area, or if you are holding a scrap part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, pick them up, and head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you arrive, start seeking for any parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, collecting any good parts you encounter and bringing them to the storage area in the base. If at any point you detect a bad part, stop moving.",
        "technical_task": "if you are in the source then go to the base, or if you detect a part and if you are holding a good part and if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then seek the base area, or if you detect a part and if you are holding a good part and if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part. If not, seek the storage area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part and pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area. If the agent is in the waste area, pick up a part.",
        "technical_task": "if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts, pick them up, and then head towards the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or then drop the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or then drop the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment until a good part is detected, then stop moving.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the base area, drop any good parts you are holding, and if you are not holding any good parts, pick up a part in the environment.",
        "technical_task": "if you are in the base then drop the part, or then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then drop the part, or then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if a good part is nearby, pick it up if available, and seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If it is not in the construction area, pick up a part and then move randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment, then head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, pick up any detected parts along the way, and take them to the base.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part, and if not, seek the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, and if you find any, bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, move towards the storage area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "go to the source, or otherwise if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "seek the source area, or otherwise if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and if the agent is in the storage area, drop the parts there.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, pick up any good parts found, avoid scrap parts, and head towards the base area.",
        "technical_task": "if you are in the source then go to the base, or if you are holding a good part then go to the base, or then drop the part and then go to the base, or otherwise if you detect a part and if you are holding a scrap part and if you are in the construction then stop moving.",
        "spoon_task": "if you are in the source area then seek the base area, or if you are holding a good part then seek the base area, or then drop the part and then seek the base area, or otherwise if you detect a part and if you are holding a scrap part and if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area of the environment and bring them to the base for storage.",
        "technical_task": "go to the source, or otherwise if you detect a part then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if an obstacle is detected, pick it up and then freeze movement.",
        "technical_task": "if you are in the construction then pick up the part and then stop moving.",
        "spoon_task": "if you are in the construction area then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times, then pick up a part and head towards the source area.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to approach the base area and drop a good part if you are in the storage area, otherwise pick up any detected part.",
        "technical_task": "if you are in the base and if you are in the storage then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and once you have a good part, bring it to the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the base, or if you are in the source then pick up the part, or if you are in the base and if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you are in the source area then pick up the part, or if you are in the base area and if you are holding a good part then drop the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts found in the environment, and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you detect a good part, pick it up and head to the storage area in the base. If you detect a scrap part, pick it up and freeze your movement.",
        "technical_task": "if you are in the base and if you are in the storage then search randomly, or if you are in the base then search randomly, or if you detect a part then pick up the part and then go to the storage, or then pick up the part and then stop moving, or if you are in the storage then drop the part, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area then walk randomly, or if you are in the base area then walk randomly, or if you detect a part then pick up the part and then seek the storage area, or then pick up the part and then freeze movement, or if you are in the storage area then drop the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part. Otherwise, move towards the source area.",
        "technical_task": "if you are in the base then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and head towards the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the storage area in the base, storing them there. If you are not in the storage area, keep searching for good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base, storing them in the storage area.",
        "technical_task": "pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment and if holding a scrap part, drop it in the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoid collisions, and transport good parts to the storage area in the base.",
        "technical_task": "if you are holding a good part then drop the part, or if you are in the base and if you detect a part then pick up the part and then go to the storage, or otherwise if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or otherwise if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part. If it is, drop the part in the waste area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment until you reach the source area, then stop moving.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment and then seek the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if it is in the construction area, then move to the storage area.",
        "technical_task": "if you are holding a good part and if you are in the construction then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and if you are holding a good part, drop it in the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base.",
        "technical_task": "if you are holding a good part then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the base area. If you detect any bad parts, pick them up, and drop them in the waste area.",
        "technical_task": "if you are in the source then go to the base, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are in the source area then seek the base area, or if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start picking up parts when you arrive.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and then head towards the source area.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop the agent from moving if it is holding a scrap part, and if no scrap part is held, randomly walk around.",
        "technical_task": "if you are holding a scrap part then drop the part and then stop moving.",
        "spoon_task": "if you are holding a scrap part then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up when detected.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it's detected, or else search randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that are detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for scrap parts, collect them, and deliver them to the waste area.",
        "technical_task": "if you are in the construction and if you are in the source and if you detect a part then pick up the part and then go to the waste, or if you are in the base and if you are holding a scrap part then drop the part and then go to the waste, or if you are in the storage then pick up the part and then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are in the construction area and if you are in the source area and if you detect a part then pick up the part and then seek the waste area, or if you are in the base area and if you are holding a scrap part then drop the part and then seek the waste area, or if you are in the storage area then pick up the part and then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find and bring them to the base for storage, but if the base area is fully occupied, stop picking up new parts.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the base, or otherwise if you are in the base then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the base area, or otherwise if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment and stop moving when a scrap part is detected.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, move to the construction area and perform an actuator action.",
        "technical_task": "if you are in the construction and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and go to the source area when detecting a part.",
        "technical_task": "go to the source, or otherwise if you detect a part then go to the source.",
        "spoon_task": "seek the source area, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, and if you are holding a good part, head towards the base and drop it there.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to identify if the agent is in the storage area. If the agent is in the storage area, pick up a part; else, seek the source area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the source.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if not, then pick up any good parts detected.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the construction area. If you are already holding a good part, drop it at the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction, or otherwise if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area, or otherwise if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the base for storage. If you encounter a bad part, freeze in place.",
        "technical_task": "go to the source, or if you are holding a good part then drop the part, or if you are in the base and if you are holding a scrap part then stop moving, or then pick up the part, or otherwise if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "seek the source area, or if you are holding a good part then drop the part, or if you are in the base area and if you are holding a scrap part then freeze movement, or then pick up the part, or otherwise if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then drop the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "The goal is to detect good parts in the environment, pick them up, and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment searching for good parts. If the agent is holding a good part, it should drop it. If the agent is not holding a good part, it should pick up any detected part.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly, or if you are holding a good part then drop the part and then go to the source, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly, or if you are holding a good part then drop the part and then seek the source area, or if you are holding a good part then pick up the part, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not currently holding a good part.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If in the construction area, pick up a part, if not, roam randomly.",
        "technical_task": "if you are in the construction then pick up the part and then search randomly.",
        "spoon_task": "if you are in the construction area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, head towards the base area.",
        "technical_task": "if you are in the base then drop the part and then go to the base.",
        "spoon_task": "if you are in the base area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Go to the construction area if a scrap part is detected, otherwise remain in the base area.",
        "technical_task": "if you detect a part then go to the construction.",
        "spoon_task": "if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base. If you are in the storage area, drop the part.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if not, continue moving randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate towards the source area and pick up any parts you detect along the way.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, perform an actuator action.",
        "technical_task": "if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the base for storage, while avoiding any bad parts. If you encounter a bad part, stop moving.",
        "technical_task": "pick up the part, or then pick up the part and then go to the base, or then pick up the part and then go to the waste, or if you are holding a good part then drop the part and then go to the base, or then search randomly, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or then pick up the part and then seek the base area, or then pick up the part and then seek the waste area, or if you are holding a good part then drop the part and then seek the base area, or then walk randomly, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment, bring them to the base area, and drop them off in the storage.",
        "technical_task": "if you are in the base then go to the source, or if you are in the source and if you are holding a good part then drop the part and then go to the storage, or otherwise if you are in the storage then stop moving.",
        "spoon_task": "if you are in the base area then seek the source area, or if you are in the source area and if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are in the storage area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area while looking for any parts to pick up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage, while avoiding any bad parts.",
        "technical_task": "pick up the part and then go to the base, or if you are holding a good part then pick up the part, or if you detect a part then go to the source, or otherwise if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or if you are holding a good part then pick up the part, or if you detect a part then seek the source area, or otherwise if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts, bring them to the storage area, and freeze your movement if you detect a bad part.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage and if you are holding a good part then go to the waste.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are in the storage area and if you are holding a good part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up a good part if detected, and then head towards the construction area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the construction, or then pick up the part and then go to the construction, or otherwise then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the construction area, or then pick up the part and then seek the construction area, or otherwise then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it if it is.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected parts, and move freely.",
        "technical_task": "search randomly, or then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area, if not, move to the storage area and drop any part you are holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if you are in the base area and holding a good part, drop it off in the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not, search for the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see and head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any good parts nearby and start moving towards the source area if so.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, if it's holding a good part, and if a part is detected. If all conditions are met, pick up the part, otherwise seek the construction area.",
        "technical_task": "if you are in the construction and if you are holding a good part and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area and if you are holding a good part and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts found in the environment and bring them to the base for storage. If you are not holding any parts, move freely until you detect a part.",
        "technical_task": "go to the base, or if you are holding a good part then drop the part and then go to the base, or then search randomly, or then pick up the part and then go to the base, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "seek the base area, or if you are holding a good part then drop the part and then seek the base area, or then walk randomly, or then pick up the part and then seek the base area, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, move towards the storage area.",
        "technical_task": "if you are in the construction then go to the storage.",
        "spoon_task": "if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise stay still.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and when you detect a good part, pick it up.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area as the primary objective.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and bring them to the storage area in the base. If you detect a bad part, stop moving.",
        "technical_task": "if you are in the base then go to the storage, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and pick them up, prioritizing staying in the construction area whenever possible.",
        "technical_task": "if you are in the construction then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the base area and if not, pick up any part that you detect.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if there are any good parts in the environment, pick them up if found, and then head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and pick them up when found.",
        "technical_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part and then search randomly, or if you detect a part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you detect a part then pick up the part and then walk randomly, or if you detect a part then pick up the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check three specific conditions before executing an actuator action.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if you are holding a good part, move towards the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, and if holding a good part, move towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect and pick up good parts in the environment, bringing them to the construction area, and only moving when necessary.",
        "technical_task": "if you are holding a good part and if you are in the source and if you are in the source then go to the construction, or if you are in the storage then pick up the part and then search randomly, or otherwise if you are holding a good part and if you are holding a good part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the source area and if you are in the source area then seek the construction area, or if you are in the storage area then pick up the part and then walk randomly, or otherwise if you are holding a good part and if you are holding a good part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area and if so, pick up a part. If not in the source area, seek the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and when detecting a part, pick it up immediately.",
        "technical_task": "if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "if you are in the source then stop moving.",
        "spoon_task": "if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area if the agent is not already there.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop any part it might be holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if any good parts are detected in the environment, and if so, proceed to the storage area.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and stop moving if you are already holding a good part.",
        "technical_task": "if you are holding a good part and if you are in the storage and if you detect a part then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the storage area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and then head towards the source area.",
        "technical_task": "if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you detect, and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you reach it.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area if an agent is holding a scrap part and stop moving if a condition is met.",
        "technical_task": "if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the storage area in the base to drop them off.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you are in the construction and if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you are in the construction area and if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate and pick up a good part only if the agent is not holding any part, then proceed.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment, and once you have a good part, go to the construction area.",
        "technical_task": "if you are in the base then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment, otherwise, continue searching.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, otherwise, seek the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to find good parts, pick them up, and store them in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage, or then pick up the part and then go to the storage, or otherwise if you are in the base and if you are in the storage and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or then pick up the part and then seek the storage area, or otherwise if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you see a good part, pick it up.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and start searching for any parts available.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, if so then drop any part it might be holding, otherwise, proceed with random movement.",
        "technical_task": "if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the source area and freeze movement when a scrap part is detected.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area and pick up any detected part.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n       <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up if detected. If holding a good part, drop it in the storage area.",
        "technical_task": "pick up the part, or otherwise if you detect a part and if you are holding a good part then drop the part.",
        "spoon_task": "pick up the part, or otherwise if you detect a part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, pick up a part if detected, and then seek the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, storing them in the storage area. If you detect any part while moving towards the base, pick it up.",
        "technical_task": "pick up the part and then go to the base, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and once you detect a part, stop and pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep searching for good parts in the environment until you find one.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and bring them to the base for storage. If you are not holding a good part, keep searching in the source area.",
        "technical_task": "pick up the part, or otherwise if you are in the source and if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "pick up the part, or otherwise if you are in the source area and if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move freely in the environment until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and drop them off when you find them.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If it's not in the storage area, then pick up a part. If the agent is in the storage area, move randomly.",
        "technical_task": "if you are in the storage then pick up the part and then search randomly.",
        "spoon_task": "if you are in the storage area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part, or then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part, or then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part, otherwise, move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the storage area, and if found, pick them up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly in the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, bring them to the base, and store them in the storage area. If you are not carrying a good part, keep seeking them.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up when found, and head towards the base area for storage.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you are in the source then search randomly, or then drop the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you are in the source area then walk randomly, or then drop the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is holding a good part, then move towards the base area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the base.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if a specific condition is met, perform a certain action.",
        "technical_task": "if you are in the source then pick up the part and then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in a straight line until you reach there.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and holding a scrap part. If both conditions are met, then drop the scrap part.",
        "technical_task": "if you are in the storage and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the storage area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and drop them in the storage area of the base. If you detect any bad parts, drop them in the waste area and continue seeking good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or then pick up the part, or then drop the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or then pick up the part, or then drop the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if any good parts are nearby, and if not, seek the source area for more parts.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the source then go to the source.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part whenever it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to seek out the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, if not then pick up any part detected, and finally move randomly.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the waste then drop the part, or otherwise then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the waste area then drop the part, or otherwise then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "if you are holding a good part then go to the base, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and pick them up one by one while ensuring you are in the storage area.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if a good part is detected, pick it up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if so, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part, pick it up, and then head to the storage area in the base to drop it off.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then drop the part.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts, and when agent is holding a good part, drop it.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once you are holding a good part, head towards the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, start seeking the source area.",
        "technical_task": "if you are in the base then go to the source.",
        "spoon_task": "if you are in the base area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, picking up good parts when detected, and dropping them in the storage area of the base.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you find one, pick it up and head towards the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If it is, it should pick up a part; otherwise, it should move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for scrap parts, pick them up, and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then go to the waste, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a scrap part then drop the part and then seek the waste area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and freeze movement when holding one.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is near a good part and pick it up if found.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you detect a part, pick it up and move towards the construction area.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, stop moving.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, perform an actuator action.",
        "technical_task": "if you are in the construction then drop the part.",
        "spoon_task": "if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all good parts in the environment and bring them to the storage area of the base. If you detect any bad parts, stop moving.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part and then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part and then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area, and once you reach the base area, start seeking the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find any good parts in the environment and navigate to the base area.",
        "technical_task": "if you detect a part and if you are in the base then go to the base.",
        "spoon_task": "if you detect a part and if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area but stop if you arrive at the storage area.",
        "technical_task": "if you are in the base then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. If the agent is already holding a good part, drop it in the storage area, otherwise pick up any detected good parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part, or otherwise then pick up the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part, or otherwise then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up when detected, and then drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts if detected, and if the agent is not holding any good part, then seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you are in the source and if you detect a part then pick up the part, or then pick up the part, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the source area and if you detect a part then pick up the part, or then pick up the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and when you find one, pick it up. If you are already holding a part, bring it to the storage area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and pick up a part if one is detected.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and stop moving if you are already holding a good part.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then go to the waste, or otherwise if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then seek the waste area, or otherwise if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is in the source area.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is holding a good part, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and deliver them to the storage area in the base.",
        "technical_task": "if you are in the base then go to the source, or if you detect a part then pick up the part and then go to the storage, or if you are in the storage then drop the part and then go to the source, or then go to the waste, or then search randomly, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then seek the source area, or if you detect a part then pick up the part and then seek the storage area, or if you are in the storage area then drop the part and then seek the source area, or then seek the waste area, or then walk randomly, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area. If the agent is in the waste area, pick up a part.",
        "technical_task": "if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and when holding a good part, move towards the storage area in the base to drop it.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and if holding a good part, head to the base area.",
        "technical_task": "if you are in the source and if you detect a part then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the storage area, and if so, pick it up.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the agent's vicinity, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for bad parts in the environment and if found, pick them up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and seek the waste area if not.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If the agent is in the construction area, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the construction area while holding the good part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find as many good parts as possible and bring them to the base, storing them in the storage area of the base.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when you detect a good part, pick it up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If so, then trigger a state action to move towards the source area.",
        "technical_task": "if you are in the storage then go to the source.",
        "spoon_task": "if you are in the storage area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them to the base area for storage. If the agent is already holding a good part, it should drop it in the storage area.",
        "technical_task": "if you are holding a good part then drop the part, or if you are in the base then go to the storage, or if you detect a part then search randomly, or then pick up the part, or otherwise then go to the waste.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are in the base area then seek the storage area, or if you detect a part then walk randomly, or then pick up the part, or otherwise then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it in the storage area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area. If not, continuously search for and pick up good parts in the environment.",
        "technical_task": "if you are in the waste and if you are in the waste then pick up the part.",
        "spoon_task": "if you are in the waste area and if you are in the waste area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area, then if you are already there, pick up a part.",
        "technical_task": "if you are in the construction then go to the construction, or if you are in the construction then go to the construction, or otherwise if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then seek the construction area, or if you are in the construction area then seek the construction area, or otherwise if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the base area only if you are not already there.",
        "technical_task": "if you are in the base then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment, but only if you are not already in the source area.",
        "technical_task": "if you are in the source then search randomly.",
        "spoon_task": "if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is near any good parts, and if so, pick them up.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area until you reach it",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once found, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment randomly until you reach the source area.",
        "technical_task": "search randomly, or otherwise then go to the source.",
        "spoon_task": "walk randomly, or otherwise then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if no good parts are found, seek the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any part you find along the way.",
        "technical_task": "pick up the part, or otherwise if you detect a part then go to the source.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area continuously.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up any parts you detect.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and once you have one, head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts, pick them up, and once you are in the storage area, drop them off.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not currently holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and if not, move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you come across in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the environment and bring them to the base, avoiding construction areas.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are in the base then go to the storage, or if you are in the base then drop the part, or otherwise then go to the construction.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are in the base area then seek the storage area, or if you are in the base area then drop the part, or otherwise then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and when holding a good part, head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the source area, pick up any good parts found, and then bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the source, or otherwise if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the source area, or otherwise if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area, making sure to pick up any parts you detect along the way.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction, or otherwise if you are holding a scrap part and if you are in the construction then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area, or otherwise if you are holding a scrap part and if you are in the construction area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start searching for parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good part you come across.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, and if it is, drop any part it is holding.",
        "technical_task": "if you are in the waste then drop the part.",
        "spoon_task": "if you are in the waste area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and freeze movement when holding a scrap part.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are holding a scrap part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are holding a scrap part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the construction area while picking up good parts on the way and dropping them once in the construction area.",
        "technical_task": "go to the construction, or if you detect a part and if you are holding a good part then drop the part and then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "seek the construction area, or if you detect a part and if you are holding a good part then drop the part and then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and pick up a part if detected.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if found, bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then go to the storage, or if you are in the base then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the storage area, or if you are in the base area then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the storage area. If not, move towards the storage area and pick up any part you detect.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and drop them off in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find good parts in the environment and bring them to the storage area in the base. If you detect a bad part, stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise if you are holding a good part and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise if you are holding a good part and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base for storage while avoiding bad parts.",
        "technical_task": "pick up the part and then go to the base, or if you detect a part then go to the base, or then pick up the part and then go to the base, or if you are holding a good part and if you are holding a scrap part then drop the part, or otherwise then stop moving.",
        "spoon_task": "pick up the part and then seek the base area, or if you detect a part then seek the base area, or then pick up the part and then seek the base area, or if you are holding a good part and if you are holding a scrap part then drop the part, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to locate the base area and stop when you arrive there.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area, and once you reach there, start searching for any parts.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if so, stop all movement.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment and when you detect one, head towards the base.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent is in the base area, start seeking the source area. If the agent is not in the base area but in the construction area, start moving towards the waste area.",
        "technical_task": "if you are in the base then go to the source, or otherwise if you are in the construction then go to the waste.",
        "spoon_task": "if you are in the base area then seek the source area, or otherwise if you are in the construction area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area if the agent is not currently there.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, picking up any good parts you find along the way and dropping them in the storage area of the base.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to randomly move around the environment until you reach the construction area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for bad parts. If found, pick them up and then freeze your movement.",
        "technical_task": "if you detect a part then pick up the part and then stop moving, or otherwise if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement, or otherwise if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find the base area and stay there.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop any part it might be holding there.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the source area in the environment and drop them in the waste area.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when it is detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts, pick them up, and then head towards the base area for storage.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the base.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment randomly until a good part is detected, then pick it up.",
        "technical_task": "search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment and deliver it to the storage area in the base. If the agent is not holding a good part, it should pick one up. Once a good part is obtained and in possession, the agent should move towards the storage area in the base.",
        "technical_task": "if you are holding a good part and if you are in the storage and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area and if you detect a part then pick up the part, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts detected, and finally head towards the base area for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or if you are in the storage then drop the part and then go to the base, or if you are in the base then drop the part and then stop moving, or if you are holding a good part then drop the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or if you are in the storage area then drop the part and then seek the base area, or if you are in the base area then drop the part and then freeze movement, or if you are holding a good part then drop the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected part and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in a random manner.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area. If a good part is detected, pick it up. Otherwise, move randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and bring them to the base for storage.",
        "technical_task": "if you are holding a good part then go to the base, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the base area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and when a good part is detected, stop moving.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the construction area for good parts and pick them up.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, only stopping when you are holding a good part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and then towards the base area.",
        "technical_task": "go to the source, or otherwise then go to the base.",
        "spoon_task": "seek the source area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts and pick them up when detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if it is detected, and if the agent is not holding a good part, seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is holding a good part. If the agent is holding a good part, then drop it, otherwise seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then drop the part.",
        "spoon_task": "if you are in the base area and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start seeking good parts once you reach there.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if it is, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is in the storage area, otherwise do nothing.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part then pick up the part and then go to the storage, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part then pick up the part and then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence> \n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment while scanning for any scrap parts, picking them up when detected.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part when it is detected.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, and if the agent detects a good part, it should pick it up.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then pick up the part, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part and bring it to the construction area.",
        "technical_task": "if you detect a part then go to the construction.",
        "spoon_task": "if you detect a part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area and pick them up.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base without stopping.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a part is detected, then pick up the part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area, dropping them there.",
        "technical_task": "pick up the part and then go to the waste, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the waste area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you see in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts and bring them to the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area of the base, ensuring you are not holding any bad parts.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and when you detect a part, pick it up and move freely unless you are holding a scrap part.",
        "technical_task": "if you detect a part then pick up the part and then stop moving, or otherwise if you are holding a scrap part then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement, or otherwise if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and then deliver them to the base area for storage.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, pick up any good parts you find, and stop moving if you are already holding a good part.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the source, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the source area, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if holding a good part, head towards the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area while avoiding any good parts.",
        "technical_task": "if you are in the base then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or otherwise if you are holding a good part and if you are in the base then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or otherwise if you are holding a good part and if you are in the base area then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area and stop when you reach there.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment, checking for any good parts along the way. If a good part is found, pick it up.",
        "technical_task": "if you are in the base and if you are in the storage and if you are holding a good part then pick up the part and then go to the source, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are holding a good part then pick up the part and then seek the source area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if found, pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a good part, then pick it up.",
        "technical_task": "search randomly, or then pick up the part and then search randomly, or if you detect a part then pick up the part, or if you detect a part and if you detect a part then search randomly, or then pick up the part, or otherwise then search randomly.",
        "spoon_task": "walk randomly, or then pick up the part and then walk randomly, or if you detect a part then pick up the part, or if you detect a part and if you detect a part then walk randomly, or then pick up the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then the storage area, and finally the construction area. If all conditions are met, pick up a part.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected good parts, avoid being in the construction area at all times, and finally bring the collected good parts to the storage area in the base.",
        "technical_task": "go to the source, or then pick up the part and then stop moving, or if you are in the construction then go to the base, or then go to the storage, or then go to the base, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or then pick up the part and then freeze movement, or if you are in the construction area then seek the base area, or then seek the storage area, or then seek the base area, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part three times consecutively before moving towards the source area.",
        "technical_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part and if you are holding a good part and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, then check if the agent is in the storage area and proceed to store the part there.",
        "technical_task": "if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts and bring them to the storage area of the base.",
        "technical_task": "go to the source, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up any good parts you detect.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part. Otherwise, seek the waste area.",
        "technical_task": "if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find out if the agent is in the source area, if not, seek the source area. Then pick up a part.",
        "technical_task": "if you are in the source and if you are holding a good part and if you are holding a scrap part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area and if you are holding a good part and if you are holding a scrap part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the storage area of the base. If you are not in the storage area, seek that area.",
        "technical_task": "if you are in the storage and if you are holding a good part then drop the part, or then pick up the part, or otherwise then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the storage area and if you are holding a good part then drop the part, or then pick up the part, or otherwise then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up scrap parts in the environment and bring them to the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected parts along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the source area, pick them up, and then bring them to the base.",
        "technical_task": "if you are in the source then go to the source, or then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then seek the source area, or then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the source area and bring them to the waste area.",
        "technical_task": "if you detect a part and if you are in the source then pick up the part, or otherwise if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you detect a part and if you are in the source area then pick up the part, or otherwise if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment randomly unless a good part is detected, then pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is in the storage area, drop the part.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected, otherwise, stop moving.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is not holding any part, seek the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect any part in the environment and if the agent is holding a good part, bring it to the base area, otherwise pick up the detected part.",
        "technical_task": "if you are holding a good part and if you detect a part then drop the part, or otherwise if you detect a part then go to the base.",
        "spoon_task": "if you are holding a good part and if you detect a part then drop the part, or otherwise if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and then pick up a part if detected.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and stop when holding a scrap part.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore for good parts in the environment, and when you find one, pick it up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or if you are holding a good part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or if you are holding a good part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area indefinitely until instructed otherwise.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and start looking for parts as soon as you arrive.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts found along the way, freeze movement upon finding scrap parts, and drop any good parts when in the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage, or if you detect a part then pick up the part and then stop moving, or then drop the part and then go to the base, or otherwise if you are holding a good part and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area, or if you detect a part then pick up the part and then freeze movement, or then drop the part and then seek the base area, or otherwise if you are holding a good part and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, move randomly.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment randomly until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you reach the source area.",
        "technical_task": "if you are in the source then search randomly, or then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you are in the source area then walk randomly, or then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n      \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then head to the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, pick them up, and then move to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is currently holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect whether the agent is in the waste area. If so, pick up a part, or else move randomly.",
        "technical_task": "if you are in the waste then pick up the part and then search randomly.",
        "spoon_task": "if you are in the waste area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and pick up a part if detected.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and if you encounter any good parts, pick them up. If you find a scrap part, stop moving immediately.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are in the construction and if you detect a part then stop moving, or otherwise if you are in the base and if you detect a part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are in the construction area and if you detect a part then freeze movement, or otherwise if you are in the base area and if you detect a part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if yes, then drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the construction area and perform an actuator action.",
        "technical_task": "if you are in the construction then go to the construction, or otherwise then pick up the part.",
        "spoon_task": "if you are in the construction area then seek the construction area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area and pick up any detected good parts along the way.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and stop moving if the agent is in the source area.",
        "technical_task": "search randomly, or otherwise if you are in the source then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through different areas in search of good parts, and once you find one, pick it up and head towards the base area.",
        "technical_task": "if you are in the source and if you are holding a scrap part then drop the part and then go to the base, or if you are in the waste and if you are holding a good part and if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part then drop the part and then seek the base area, or if you are in the waste area and if you are holding a good part and if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if found, bring them to the base.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and pick up any part found there.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected or else randomly move around.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and head towards the base area for storage.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, avoid scrap parts, pick up good parts, and head towards the base area.",
        "technical_task": "pick up the part, or if you are holding a scrap part then drop the part and then go to the source, or then pick up the part, or if you detect a part then pick up the part, or then go to the base, or otherwise then search randomly.",
        "spoon_task": "pick up the part, or if you are holding a scrap part then drop the part and then seek the source area, or then pick up the part, or if you detect a part then pick up the part, or then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "go to the source, or if you detect a part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "seek the source area, or if you detect a part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if not, seek the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then seek the source area for more parts.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment and perform a specific action when conditions are met.",
        "technical_task": "pick up the part and then go to the construction, or if you detect a part and if you are in the source and if you are holding a good part then go to the waste, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the construction area, or if you detect a part and if you are in the source area and if you are holding a good part then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base, while avoiding picking up bad parts.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the storage area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when you detect a part, pick it up.",
        "technical_task": "if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all the good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the storage.",
        "spoon_task": "if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, dropping them in the storage area.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when holding a good part, move to the storage area.",
        "technical_task": "if you detect a part then pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any good parts and if you find one, bring it to the construction area.",
        "technical_task": "pick up the part and then go to the construction, or otherwise then pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area, or otherwise then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area in the environment.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area and if it is holding a good part, then drop the part.",
        "technical_task": "if you are in the construction and if you are holding a good part then drop the part.",
        "spoon_task": "if you are in the construction area and if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the source area until a part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you are currently holding a good part, head towards the storage area.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and then pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving randomly in the environment until you reach the source area.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if found, head towards the construction area.",
        "technical_task": "pick up the part, or if you detect a part then go to the construction, or otherwise then drop the part.",
        "spoon_task": "pick up the part, or if you detect a part then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a scrap part and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts from the environment and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and if so, pick up a part.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect a good part and drop it in the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and pick them up.",
        "technical_task": "pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment and drop any good parts found in the storage area while avoiding the construction area. If you detect any bad parts, pick them up and head towards the waste area to drop them.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then go to the source, or otherwise if you are in the source then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then seek the source area, or otherwise if you are in the source area then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and if the agent is in the construction area holding a good part, drop it.",
        "technical_task": "if you detect a part and if you are in the construction then drop the part and then search randomly.",
        "spoon_task": "if you detect a part and if you are in the construction area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area only if the agent is not already inside the base area.",
        "technical_task": "if you are in the base then go to the base.",
        "spoon_task": "if you are in the base area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and drop any part it is currently holding.",
        "technical_task": "if you are in the storage then drop the part.",
        "spoon_task": "if you are in the storage area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the construction area only if the agent is not already there.",
        "technical_task": "if you are in the construction then search randomly.",
        "spoon_task": "if you are in the construction area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any detected parts along the way, but if you find a bad part, stop moving.",
        "technical_task": "pick up the part, or then pick up the part, or if you detect a part then pick up the part and then stop moving, or then pick up the part and then search randomly, or then pick up the part, or then pick up the part, or then pick up the part, or if you are holding a scrap part then pick up the part and then stop moving, or then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then pick up the part, or if you detect a part then pick up the part and then freeze movement, or then pick up the part and then walk randomly, or then pick up the part, or then pick up the part, or then pick up the part, or if you are holding a scrap part then pick up the part and then freeze movement, or then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area. If the agent is in the source area, start seeking the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part, and if not, then move randomly.",
        "technical_task": "if you are holding a scrap part then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, while actively looking for any part along the way.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then stop moving.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area to find good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment, seek the source area, and pick up a part when detected.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the storage area if the agent is holding a good part, or freeze movement if not.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and, if it is, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Investigate the environment for good parts, and once you detect one, head towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base until you are holding a good part.",
        "technical_task": "if you are holding a good part then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Investigate the environment and randomly explore different areas.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for any good parts. If found, pick them up.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and once found, move to the base area.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to constantly move towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the storage area. If the agent is in the storage area, pick up a part.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and drop them in the waste area.",
        "technical_task": "if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment until you detect a good part, then head towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. When you find a good part, pick it up and head towards the storage area in the base. If you are already in the storage area, drop the part there.",
        "technical_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part and if you are in the storage then go to the storage.",
        "spoon_task": "if you are holding a good part then drop the part, or otherwise if you are holding a good part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and when a good part is detected, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part and then search randomly.",
        "spoon_task": "if you are holding a good part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the source area, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are currently holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part in the environment and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment. When you find a good part, pick it up and head towards the base area.",
        "technical_task": "go to the source, or if you detect a part then pick up the part and then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up and bring them to the base's storage area.",
        "technical_task": "pick up the part and then go to the storage, or then pick up the part, or if you detect a part and if you are holding a good part then search randomly, or then search randomly, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or if you detect a part and if you are holding a good part then walk randomly, or then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and when holding a good part, head towards the base construction area.",
        "technical_task": "if you detect a part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you detect a part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for any bad parts and drop them in the waste area.",
        "technical_task": "drop the part, or otherwise then pick up the part and then go to the waste.",
        "spoon_task": "drop the part, or otherwise then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to keep moving in a random pattern until you detect a part.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, pick up a part.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if the agent is holding a good part, drop it in the storage area. If the agent is not holding any good parts, seek the source area.",
        "technical_task": "search randomly, or if you are holding a good part then drop the part and then go to the storage, or otherwise if you are holding a good part then go to the source.",
        "spoon_task": "walk randomly, or if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts if the agent is not holding any, then proceed to the storage area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, if holding a good part go to the base area, otherwise pick up any detected good parts.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and if a good part is detected, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the source area and pick up good parts, then drop them in the storage area at the base.",
        "technical_task": "if you are in the source then pick up the part and then go to the storage, or if you detect a part then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the storage area, or if you detect a part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for a good part and pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the storage area in the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, if not then pick up a part, and finally seek the source area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all good parts in the environment and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for any scrap parts and pick them up.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part nearby. If so, pick it up; otherwise, move randomly.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the source area and drop them in the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are holding a good part then go to the storage, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part then seek the storage area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop the agent's movement if it is holding a good part, otherwise continue as usual.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and stop moving when you reach there.",
        "technical_task": "if you are in the construction then stop moving.",
        "spoon_task": "if you are in the construction area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until you detect a part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding any part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if an agent is in the source area. If the agent is in the source area, pick up a part, otherwise move towards the source area.",
        "technical_task": "if you are in the source then pick up the part and then go to the source.",
        "spoon_task": "if you are in the source area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and then head towards the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, drop them off at the base storage area, and if the agent is not holding any part, search for more parts.",
        "technical_task": "go to the source, or otherwise if you are holding a good part and if you are in the base and if you are in the storage then drop the part and then go to the base.",
        "spoon_task": "seek the source area, or otherwise if you are holding a good part and if you are in the base area and if you are in the storage area then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a part and then pick it up if found.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and stop moving when you detect one.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the construction area but only if there are no scrap parts detected in the environment.",
        "technical_task": "if you are holding a scrap part then search randomly.",
        "spoon_task": "if you are holding a scrap part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base for storage. If you detect any bad parts, stop immediately.",
        "technical_task": "if you are in the source then go to the base, or if you detect a part then pick up the part, or otherwise then drop the part and then search randomly.",
        "spoon_task": "if you are in the source area then seek the base area, or if you detect a part then pick up the part, or otherwise then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment looking for any suspicious activity, and when identified, investigate it.",
        "technical_task": "if you are in the construction then go to the source, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the construction area then seek the source area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for scrap parts in the environment, pick them up, and bring them to the storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or otherwise if you are holding a scrap part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and drop them in the storage area of the base. If a bad part is detected, stop moving immediately.",
        "technical_task": "if you are in the base and if you are in the storage then drop the part and then search randomly, or otherwise if you detect a part then pick up the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are in the storage area then drop the part and then walk randomly, or otherwise if you detect a part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the source area, then bring them to the base area and store them in the storage area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. When a good part is detected, pick it up.",
        "technical_task": "if you detect a part then pick up the part, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you detect a part then pick up the part, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected good parts, and if you are in the construction area, drop the part there.",
        "technical_task": "if you detect a part then pick up the part and then stop moving, or if you are in the construction then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then freeze movement, or if you are in the construction area then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area and then pick up a part if one is detected.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row before performing an actuator action.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if the agent is holding a good part, seek the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any detected parts in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the waste area, and if so, drop any part it is holding.",
        "technical_task": "if you are in the waste then drop the part.",
        "spoon_task": "if you are in the waste area then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_waste_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the construction area and drop them in the base area.",
        "technical_task": "if you are in the construction then pick up the part and then go to the base.",
        "spoon_task": "if you are in the construction area then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base area, storing them in the storage area.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part, or if you detect a part then go to the storage, or if you detect a part then drop the part, or if you are holding a good part then go to the base, or if you are holding a good part then drop the part, or if you are holding a good part then go to the storage, or if you are holding a good part then pick up the part, or if you are holding a good part then go to the base, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or if you detect a part then seek the storage area, or if you detect a part then drop the part, or if you are holding a good part then seek the base area, or if you are holding a good part then drop the part, or if you are holding a good part then seek the storage area, or if you are holding a good part then pick up the part, or if you are holding a good part then seek the base area, or if you are holding a good part then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up good parts when detected and move towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if you detect a good part, pick it up and head towards the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the construction then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the construction area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if one is detected, and then move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and stop moving if you detect a part.",
        "technical_task": "search randomly, or otherwise if you detect a part then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected, and if no part is detected, move randomly in the environment.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts around the source area and bring them to the base storage area for safekeeping.",
        "technical_task": "if you are in the source then pick up the part, or otherwise if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area then pick up the part, or otherwise if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them in the storage area of the base. If the agent detects a part, it should pick it up.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If it is, drop any part it is holding, otherwise, pick up a part.",
        "technical_task": "if you are in the storage then drop the part and then search randomly.",
        "spoon_task": "if you are in the storage area then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, and if you are already holding a good part, drop it in the storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any part you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected; otherwise, seek the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part, otherwise, seek the storage area.",
        "technical_task": "if you are in the base then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and when you reach there, start searching for good parts.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and drop them in the waste area.",
        "technical_task": "if you are in the source then drop the part, or otherwise if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then drop the part, or otherwise if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part and then move randomly.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area of the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are, drop it in the storage area, otherwise seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area and freeze movement when holding a good part.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area three times in a row and then pick up a part.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the source area, and if so, pick up a part, otherwise, continue moving randomly.",
        "technical_task": "if you are in the source then pick up the part and then search randomly.",
        "spoon_task": "if you are in the source area then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, then in the storage area, and finally to seek the source area.",
        "technical_task": "if you are in the base and if you are in the storage and if you are in the source then go to the source.",
        "spoon_task": "if you are in the base area and if you are in the storage area and if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good parts you find in the environment, and when you are holding a good part, stop searching.",
        "technical_task": "if you are holding a good part then pick up the part and then stop moving.",
        "spoon_task": "if you are holding a good part then pick up the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area and pick up parts when detected, but stop moving if you are already holding a part.",
        "technical_task": "if you are in the source and if you detect a part then search randomly.",
        "spoon_task": "if you are in the source area and if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts, pick them up, and bring them to the base while avoiding holding scrap parts.",
        "technical_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part, or then pick up the part, or then pick up the part, or otherwise then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part, or if you are holding a good part then pick up the part, or then pick up the part, or then pick up the part, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, instruct it to seek the source area.",
        "technical_task": "if you are in the construction then go to the source.",
        "spoon_task": "if you are in the construction area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts and bring them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area, and if it is, then pick up a part.",
        "technical_task": "if you are in the storage and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the storage area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once you find one, bring it to the storage area in the base.",
        "technical_task": "if you are in the base then go to the storage, or if you detect a part then go to the storage, or otherwise if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area then seek the storage area, or if you detect a part then seek the storage area, or otherwise if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a good part and then move to the storage area of the base.",
        "technical_task": "if you are holding a good part then go to the storage.",
        "spoon_task": "if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "if you are holding a good part then go to the base, or otherwise if you are in the base then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then seek the base area, or otherwise if you are in the base area then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area twice and pick up a part if detected.",
        "technical_task": "if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you find, and bring them to the base's storage area.",
        "technical_task": "if you are holding a good part then drop the part, or then search randomly, or if you are in the storage then pick up the part and then go to the base, or if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part, or then walk randomly, or if you are in the storage area then pick up the part and then seek the base area, or if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <StateAction>state_random_walk</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected, otherwise, stay still.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area if you are holding a scrap part, otherwise, keep seeking the waste area.",
        "technical_task": "if you are holding a scrap part then go to the waste.",
        "spoon_task": "if you are holding a scrap part then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if one is detected in the environment.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are in the construction area. If you are not, move towards the construction area.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part from the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part and then head towards the base area.",
        "technical_task": "pick up the part and then go to the base.",
        "spoon_task": "pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and pick up any encountered good parts.",
        "technical_task": "go to the source, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part and if you are in the storage then go to the storage.",
        "spoon_task": "if you detect a part and if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and deliver them to the construction area while avoiding picking up any good parts.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that the agent detects in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts and bring them to the waste area while avoiding picking up any good parts along the way.",
        "technical_task": "if you are holding a scrap part then drop the part and then go to the waste.",
        "spoon_task": "if you are holding a scrap part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and drop them off in the storage area of the base. If you detect a scrap part, freeze movement immediately.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part, or if you are holding a good part then go to the base, or otherwise then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part, or if you are holding a good part then seek the base area, or otherwise then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if it is, pick it up.",
        "technical_task": "if you are holding a good part then pick up the part.",
        "spoon_task": "if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts while ensuring you are not already holding a good part. If you detect a part, pick it up; otherwise, continue exploring the environment.",
        "technical_task": "if you are holding a good part then drop the part, or then search randomly, or if you detect a part then pick up the part and then search randomly, or if you are in the construction and if you are in the source then go to the waste, or otherwise then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part, or then walk randomly, or if you detect a part then pick up the part and then walk randomly, or if you are in the construction area and if you are in the source area then seek the waste area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find the closest scrap part in the environment and pick it up.",
        "technical_task": "pick up the part, or then pick up the part, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then pick up the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, move towards the source area.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to alternate between picking up parts and moving to a different location in the environment.",
        "technical_task": "if you are in the base then pick up the part, or otherwise if you are in the source then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area then pick up the part, or otherwise if you are in the source area then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your goal is to check if the agent is in the storage area three times in a row, then pick up a part and move towards the construction area.",
        "technical_task": "if you are in the storage and if you are in the storage and if you are in the storage then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are in the storage area and if you are in the storage area then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding a good part, head to the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area and then drop any part you are holding.",
        "technical_task": "if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, and once found, bring them to the construction area.",
        "technical_task": "if you detect a part then go to the construction, or if you are in the construction then go to the construction, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then seek the construction area, or if you are in the construction area then seek the construction area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_construction_area</Condition>\n            <StateAction>state_seek_construction_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment looking for good parts, and when you find one, pick it up.",
        "technical_task": "pick up the part, or then pick up the part and then search randomly, or otherwise then pick up the part.",
        "spoon_task": "pick up the part, or then pick up the part and then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts in the environment and stop once a bad part is detected.",
        "technical_task": "go to the source, or then pick up the part, or if you detect a part then stop moving, or then search randomly, or otherwise if you are holding a good part and if you are in the waste and if you are in the source then search randomly.",
        "spoon_task": "seek the source area, or then pick up the part, or if you detect a part then freeze movement, or then walk randomly, or otherwise if you are holding a good part and if you are in the waste area and if you are in the source area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and drop them off in the base storage area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the base, or if you are in the base then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the base area, or if you are in the base area then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and bring them back to the base for storage.",
        "technical_task": "if you detect a part then go to the base, or otherwise if you are in the base then go to the storage.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise if you are in the base area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and head towards the source area, seeking more parts.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times, and then seek the construction area.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then go to the construction.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and head towards the construction area.",
        "technical_task": "go to the construction.",
        "spoon_task": "seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all the good parts found in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part and then go to the storage, or then go to the base, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base, storing them in the storage area.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you encounter in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and seek the base area. Once in the base area, stop moving.",
        "technical_task": "if you are in the base then stop moving, or otherwise then go to the base.",
        "spoon_task": "if you are in the base area then freeze movement, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the source area, and once there, start scanning for any parts.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, pick up a part.",
        "technical_task": "if you are in the construction then pick up the part.",
        "spoon_task": "if you are in the construction area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously seek the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to stop moving if the agent is holding a good part or seek the construction area if no conditions apply.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area only when a good part is detected.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, pick up a part.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if not, move towards the source area and pick up any parts found there.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts found in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base.",
        "technical_task": "pick up the part and then go to the base, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the base area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        \n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and continually move randomly until you detect a part.",
        "technical_task": "if you are in the base then search randomly, or otherwise then search randomly.",
        "spoon_task": "if you are in the base area then walk randomly, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and then head towards the base area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find a bad part, pick it up, and move towards the waste area.",
        "technical_task": "if you are in the base and if you detect a part and if you are holding a scrap part then pick up the part and then go to the waste.",
        "spoon_task": "if you are in the base area and if you detect a part and if you are holding a scrap part then pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up, and bring them to the base for storage.",
        "technical_task": "go to the base, or otherwise if you are in the source and if you detect a part and if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "seek the base area, or otherwise if you are in the source area and if you detect a part and if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search the environment for good parts, pick them up, and bring them to the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage, or then pick up the part and then go to the storage, or if you are holding a good part then drop the part and then go to the storage, or if you are in the storage then drop the part, or otherwise then pick up the part.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area, or then pick up the part and then seek the storage area, or if you are holding a good part then drop the part and then seek the storage area, or if you are in the storage area then drop the part, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area while holding a good part.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather all the good parts in the source area and bring them to the base construction area.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather good parts if the agent is not currently holding any, pick up a part if detected, and otherwise move randomly.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area once found.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is in the storage area, then seek the construction area.",
        "technical_task": "if you are in the storage then go to the construction.",
        "spoon_task": "if you are in the storage area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move around the environment randomly until you detect a good part, then pick it up.",
        "technical_task": "search randomly, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "walk randomly, or otherwise if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area and if not, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, pick them up, and bring them to the base storage area.",
        "technical_task": "pick up the part and then go to the storage, or then pick up the part, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then seek the storage area, or then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and deposit them in the storage area of the base, but if you encounter any scrap parts, stop moving.",
        "technical_task": "if you are in the base and if you are holding a good part then go to the storage, or then pick up the part, or otherwise then drop the part and then stop moving.",
        "spoon_task": "if you are in the base area and if you are holding a good part then seek the storage area, or then pick up the part, or otherwise then drop the part and then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, pick up any good parts detected, and head towards the source area.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then pick up the part.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, then drop the part, otherwise go towards the base in a random path.",
        "technical_task": "if you are holding a good part then drop the part and then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if it is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are good parts nearby, and if there are, pick them up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to detect if the agent is in the storage area, and if not, seek the storage area.",
        "technical_task": "if you are in the storage then go to the storage.",
        "spoon_task": "if you are in the storage area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is currently not holding anything.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the storage area. If the agent is not in the storage area, pick up a part. If the agent is in the storage area, head towards the source area.",
        "technical_task": "if you are in the storage then pick up the part and then go to the source.",
        "spoon_task": "if you are in the storage area then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to look for good parts in the environment, and if you are holding a good part, head towards the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and bring them to the base, freezing movement if the agent is holding a scrap part.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the base.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment and bring them to the waste area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part, or if you are holding a scrap part then drop the part, or otherwise if you are in the waste and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part, or if you are holding a scrap part then drop the part, or otherwise if you are in the waste area and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the base area, pick them up, and then head towards the storage area.",
        "technical_task": "if you are in the base and if you are holding a good part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the source area for any good parts, avoid bad parts, and store the good parts in the base's storage area.",
        "technical_task": "if you are in the source then go to the source, or if you detect a part then go to the base, or otherwise if you detect a part and if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the source area then seek the source area, or if you detect a part then seek the base area, or otherwise if you detect a part and if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a scrap part and then move towards the construction area.",
        "technical_task": "pick up the part and then go to the construction.",
        "spoon_task": "pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, and when you detect a scrap part, freeze the movement.",
        "technical_task": "if you are in the source and if you are holding a scrap part and if you detect a part then stop moving.",
        "spoon_task": "if you are in the source area and if you are holding a scrap part and if you detect a part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part and then head towards the waste area.",
        "technical_task": "pick up the part and then go to the waste.",
        "spoon_task": "pick up the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, and if you detect any part, pick it up.",
        "technical_task": "if you are in the source and if you are in the base then go to the construction.",
        "spoon_task": "if you are in the source area and if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area.",
        "technical_task": "go to the base.",
        "spoon_task": "seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, and then pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area. If the agent is in the base area, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area in the environment.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head to the source area once you have a good part.",
        "technical_task": "if you are in the source and if you are holding a good part then go to the source.",
        "spoon_task": "if you are in the source area and if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area, pick them up, and head to the base storage area to drop them off.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and pick up any good parts you come across, but if an agent is in the source area, stop exploring.",
        "technical_task": "search randomly, or otherwise if you are in the source then stop moving.",
        "spoon_task": "walk randomly, or otherwise if you are in the source area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to continuously search for good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "pick up the part, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "pick up the part, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, picking up any good parts you come across and bringing them to the base storage area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise, seek the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise keep searching.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a scrap part twice in a row before performing an actuator action.",
        "technical_task": "if you are holding a scrap part and if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are holding a scrap part and if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area, and if so, start moving towards the storage area.",
        "technical_task": "if you are in the construction then go to the storage.",
        "spoon_task": "if you are in the construction area then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If it is, drop the part; if not, seek the source area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts and drop them in the storage area of the base if in the base area, otherwise, pick up any part detected.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, otherwise head towards the construction area.",
        "technical_task": "if you are holding a good part then pick up the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the construction area only if you are not already in the base area.",
        "technical_task": "if you are in the base then go to the construction.",
        "spoon_task": "if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment while avoiding any bad parts and picking up any good parts you encounter.",
        "technical_task": "if you detect a part and if you are holding a good part and if you are in the storage then go to the storage, or then search randomly, or if you detect a part and if you are holding a good part and if you are in the source then go to the source, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part and if you are in the storage area then seek the storage area, or then walk randomly, or if you detect a part and if you are holding a good part and if you are in the source area then seek the source area, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part as soon as you detect it.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, pick them up when detected, and head towards the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area three times in a row, and if so, pick up a part.",
        "technical_task": "if you are in the base and if you are in the base and if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area and if you are in the base area and if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and drop them off in the storage area of the base when the agent is in the base area. If the agent is not in the base area, it should continue moving randomly.",
        "technical_task": "pick up the part, or if you are in the base and if you are holding a good part then drop the part and then go to the storage, or otherwise if you are in the base then pick up the part.",
        "spoon_task": "pick up the part, or if you are in the base area and if you are holding a good part then drop the part and then seek the storage area, or otherwise if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any detected part, and if you are holding a good part, head towards the storage area of the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then search randomly, or otherwise if you are holding a good part then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then walk randomly, or otherwise if you are holding a good part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part twice in a row and then proceed to the next construction area.",
        "technical_task": "if you are holding a good part and if you are holding a good part then go to the construction.",
        "spoon_task": "if you are holding a good part and if you are holding a good part then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate to the waste area and drop any bad parts you are holding. If you are not holding any bad parts, seek and pick up any bad parts you detect in the environment.",
        "technical_task": "go to the waste, or otherwise if you are holding a scrap part and if you detect a part then drop the part and then go to the waste.",
        "spoon_task": "seek the waste area, or otherwise if you are holding a scrap part and if you detect a part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to roam around the environment and if the agent detects a part, pick it up. If the agent is holding a part, drop it.",
        "technical_task": "search randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "spoon_task": "walk randomly, or if you detect a part then pick up the part, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment for good parts and pick them up. If you are already holding a part, drop it.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you are holding a good part then drop the part.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area.",
        "technical_task": "go to the source.",
        "spoon_task": "seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area, and if a part is detected, pick it up.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area and then seek the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if you are holding a good part. If you are, drop it in the storage area; otherwise, seek the construction area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the construction.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the base then pick up the part, or if you are holding a good part then go to the storage, or otherwise then drop the part.",
        "spoon_task": "if you are in the base area then pick up the part, or if you are holding a good part then seek the storage area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment and then head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, pick it up if so, and then proceed to the storage area.",
        "technical_task": "if you are holding a good part and if you are in the storage then pick up the part.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for scrap parts in the environment, pick them up, and if the agent is in the storage area, drop them there.",
        "technical_task": "if you are in the storage and if you are holding a scrap part then drop the part and then go to the source.",
        "spoon_task": "if you are in the storage area and if you are holding a scrap part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part when detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there are any scrap parts nearby. If so, pick up the part.",
        "technical_task": "if you detect a part and if you are in the source and if you are holding a scrap part then pick up the part.",
        "spoon_task": "if you detect a part and if you are in the source area and if you are holding a scrap part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_holding_scrap_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the base area when holding a good part.",
        "technical_task": "if you are in the source then go to the base, or otherwise if you are holding a good part then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area, or otherwise if you are holding a good part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to only pick up a good part if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect all good parts in the environment and bring them to the storage area in the base.",
        "technical_task": "if you are in the source and if you detect a part then go to the storage, or otherwise if you are holding a good part then pick up the part.",
        "spoon_task": "if you are in the source area and if you detect a part then seek the storage area, or otherwise if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if so, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect scrap parts in the environment, and once holding a scrap part, head towards the source area.",
        "technical_task": "if you detect a part then pick up the part and then go to the source.",
        "spoon_task": "if you detect a part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part in the storage area and pick it up if found.",
        "technical_task": "if you are in the storage then pick up the part.",
        "spoon_task": "if you are in the storage area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment, and once holding a good part, move towards the storage area in the base.",
        "technical_task": "if you are in the base and if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts you detect and then head towards the source area.",
        "technical_task": "pick up the part and then go to the source.",
        "spoon_task": "pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if any good part is detected in the environment and then move towards the base area.",
        "technical_task": "if you detect a part then go to the base.",
        "spoon_task": "if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if so, start seeking the waste area.",
        "technical_task": "if you are in the source then go to the waste.",
        "spoon_task": "if you are in the source area then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment randomly and when a good part is detected, pick it up.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a part if detected in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find all good parts in the environment and bring them to the source area.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the source.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If agent holds a good part, move towards the storage area and drop it there. If agent does not have a good part, pick up any detected good part.",
        "technical_task": "if you are holding a good part and if you are in the storage then drop the part and then go to the storage, or otherwise if you are holding a good part then pick up the part and then go to the source.",
        "spoon_task": "if you are holding a good part and if you are in the storage area then drop the part and then seek the storage area, or otherwise if you are holding a good part then pick up the part and then seek the source area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the source area, pick it up, and then drop it in the storage area at the base.",
        "technical_task": "if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if none is detected, roam around freely.",
        "technical_task": "pick up the part and then search randomly.",
        "spoon_task": "pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the construction area. If not, seek the construction area.",
        "technical_task": "if you are in the construction and if you are in the construction and if you are in the construction then go to the construction.",
        "spoon_task": "if you are in the construction area and if you are in the construction area and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate through the environment, pick up a good part if detected, and head towards the base area.",
        "technical_task": "if you are in the base and if you are holding a good part and if you detect a part then go to the base.",
        "spoon_task": "if you are in the base area and if you are holding a good part and if you detect a part then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to find a good part in the environment, pick it up, and then seek the construction area.",
        "technical_task": "if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the base area, and if so, pick up a part.",
        "technical_task": "if you are in the base then pick up the part.",
        "spoon_task": "if you are in the base area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards a specific area in the environment when a certain condition is met.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and bring them to the base for storage.",
        "technical_task": "go to the source, or otherwise then go to the base.",
        "spoon_task": "seek the source area, or otherwise then seek the base area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for a good part in the environment, pick it up, and then head towards the storage area.",
        "technical_task": "pick up the part and then go to the storage.",
        "spoon_task": "pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to navigate the environment to the waste area, picking up any bad parts along the way and dropping them off.",
        "technical_task": "if you are in the waste then stop moving, or if you detect a part then pick up the part, or then go to the waste, or otherwise if you are holding a scrap part then drop the part.",
        "spoon_task": "if you are in the waste area then freeze movement, or if you detect a part then pick up the part, or then seek the waste area, or otherwise if you are holding a scrap part then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_waste_area</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and continuously move in a random pattern.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base area as long as you are not already in the base area.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and pick them up, ensuring to only do so if the agent is in the source area.",
        "technical_task": "if you are in the source then pick up the part, or if you are in the source then pick up the part, or otherwise if you are in the source and if you detect a part then pick up the part.",
        "spoon_task": "if you are in the source area then pick up the part, or if you are in the source area then pick up the part, or otherwise if you are in the source area and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, pick up any good parts you come across, and freeze movement if you detect bad parts.",
        "technical_task": "pick up the part and then search randomly, or if you detect a part then stop moving, or if you are holding a good part then search randomly, or if you are holding a scrap part and if you are holding a scrap part then search randomly, or otherwise then drop the part.",
        "spoon_task": "pick up the part and then walk randomly, or if you detect a part then freeze movement, or if you are holding a good part then walk randomly, or if you are holding a scrap part and if you are holding a scrap part then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        \n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the source area of the environment, pick them up, and then head towards the construction area.",
        "technical_task": "if you are in the source and if you detect a part then pick up the part and then go to the construction.",
        "spoon_task": "if you are in the source area and if you detect a part then pick up the part and then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if the agent is in the storage area, drop the part there.",
        "technical_task": "go to the base, or otherwise if you detect a part then go to the storage.",
        "spoon_task": "seek the base area, or otherwise if you detect a part then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and if the agent detects a part, pick it up and continue moving randomly.",
        "technical_task": "if you detect a part then pick up the part, or then search randomly, or otherwise then drop the part.",
        "spoon_task": "if you detect a part then pick up the part, or then walk randomly, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment, then head towards the base area to store them in the storage area. If you detect any bad parts, stop moving immediately.",
        "technical_task": "go to the source, or if you are in the base and if you are holding a good part and if you are in the storage then go to the base, or otherwise then stop moving.",
        "spoon_task": "seek the source area, or if you are in the base area and if you are holding a good part and if you are in the storage area then seek the base area, or otherwise then freeze movement.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_in_storage_area</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <StateAction>state_movement_freeze</StateAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment and when a good part is detected, move towards the source area.",
        "technical_task": "if you detect a part then go to the source, or otherwise if you are in the base then search randomly.",
        "spoon_task": "if you detect a part then seek the source area, or otherwise if you are in the base area then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and head towards the source area.",
        "technical_task": "if you detect a part then go to the source.",
        "spoon_task": "if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good parts that the agent detects in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area three times in a row and then pick up a part.",
        "technical_task": "if you are in the source and if you are in the source and if you are in the source then pick up the part.",
        "spoon_task": "if you are in the source area and if you are in the source area and if you are in the source area then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <Condition>is_agent_in_source_area</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part and if not, pick up a part.",
        "technical_task": "if you are holding a good part and if you detect a part then pick up the part.",
        "spoon_task": "if you are holding a good part and if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment and only pick up good parts if detected.",
        "technical_task": "if you detect a part then search randomly, or otherwise then pick up the part.",
        "spoon_task": "if you detect a part then walk randomly, or otherwise then pick up the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment and if holding a good part, head to the storage area to drop it off.",
        "technical_task": "if you are holding a good part then drop the part and then go to the storage, or otherwise if you detect a part then search randomly.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the storage area, or otherwise if you detect a part then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part. If the agent is holding a good part, drop it.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, then start searching for good parts.",
        "technical_task": "if you are holding a good part then go to the source.",
        "spoon_task": "if you are holding a good part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to patrol the environment and drop any scrap parts that you find in the waste area.",
        "technical_task": "if you are in the base then go to the source, or otherwise if you detect a part then drop the part and then go to the waste.",
        "spoon_task": "if you are in the base area then seek the source area, or otherwise if you detect a part then drop the part and then seek the waste area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_base_area</Condition>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment and if you are holding any, head towards the storage area in the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the storage area of the base.",
        "technical_task": "go to the storage.",
        "spoon_task": "seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to gather scrap parts in the source area and bring them to the base for storage.",
        "technical_task": "if you are in the source and if you detect a part and if you are holding a scrap part then go to the base, or if you are in the source then pick up the part and then go to the base, or if you are in the source and if you detect a part and if you are holding a scrap part then go to the base, or otherwise then drop the part.",
        "spoon_task": "if you are in the source area and if you detect a part and if you are holding a scrap part then seek the base area, or if you are in the source area then pick up the part and then seek the base area, or if you are in the source area and if you detect a part and if you are holding a scrap part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_source_area</Condition>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the base, or otherwise then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area, or otherwise then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if there is a good part nearby. If there is, pick it up.",
        "technical_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "spoon_task": "if you detect a part and if you are holding a good part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Find and pick up a good part only when the agent is not already holding one.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move the agent randomly in the environment.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts from the source area and bring them to the base storage area, while avoiding any bad parts. If a bad part is detected, stop moving.",
        "technical_task": "go to the source, or if you detect a part then drop the part and then stop moving, or if you detect a part then pick up the part, or then go to the storage, or if you are holding a good part then drop the part, or otherwise then search randomly.",
        "spoon_task": "seek the source area, or if you detect a part then drop the part and then freeze movement, or if you detect a part then pick up the part, or then seek the storage area, or if you are holding a good part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if a good part is detected, and if so, pick it up.",
        "technical_task": "if you detect a part then pick up the part.",
        "spoon_task": "if you detect a part then pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. If you find a good part, pick it up and then continue to explore for more parts.",
        "technical_task": "if you detect a part then pick up the part and then search randomly, or otherwise if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly, or otherwise if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the source area until a good part is detected, then stop moving.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up any good part you detect in the environment.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for good parts and bring them to the storage area in the base. If the agent detects a bad part or is holding a scrap part, it should stop moving.",
        "technical_task": "go to the source, or if you detect a part and if you are holding a good part and if you are holding a scrap part then go to the base, or otherwise then drop the part.",
        "spoon_task": "seek the source area, or if you detect a part and if you are holding a good part and if you are holding a scrap part then seek the base area, or otherwise then drop the part.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <StateAction>state_seek_source_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <Condition>is_agent_holding_scrap_part</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is in the source area, and if true, seek the base area.",
        "technical_task": "if you are in the source then go to the base.",
        "spoon_task": "if you are in the source area then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move randomly within the environment until a good part is detected.",
        "technical_task": "search randomly.",
        "spoon_task": "walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the base and stop moving when you arrive.",
        "technical_task": "if you are in the base then stop moving.",
        "spoon_task": "if you are in the base area then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to check if the agent is in the storage area. If not, then check if the agent is in the base area. If neither of these conditions is met, seek the construction area.",
        "technical_task": "if you are in the storage and if you are in the base then go to the construction.",
        "spoon_task": "if you are in the storage area and if you are in the base area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_storage_area</Condition>\n        <Condition>is_agent_in_base_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to search for good parts in the environment, then bring them to the storage area in the base.",
        "technical_task": "if you detect a part then go to the base, or otherwise if you are in the storage and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you detect a part then seek the base area, or otherwise if you are in the storage area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <StateAction>state_seek_base_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_agent_in_storage_area</Condition>\n            <Condition>is_agent_holding_good_part</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move to the source area and start seeking for parts once you arrive there.",
        "technical_task": "if you are in the source then go to the source.",
        "spoon_task": "if you are in the source area then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_source_area</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part if detected, and if not holding a good part, seek the base area.",
        "technical_task": "if you are holding a good part then drop the part and then go to the base.",
        "spoon_task": "if you are holding a good part then drop the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect good parts in the environment and bring them to the base's storage area, stopping only if the agent detects a scrap part.",
        "technical_task": "pick up the part and then go to the storage, or then search randomly, or if you detect a part then drop the part, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the storage area, or then walk randomly, or if you detect a part then drop the part, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n        <Sequence>\n            <Condition>is_part_detected</Condition>\n            <ActuatorAction>drop_part</ActuatorAction>\n        </Sequence>\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence>\n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Locate a good part in the environment and head towards the construction area.",
        "technical_task": "if you detect a part and if you are in the construction then go to the construction.",
        "spoon_task": "if you detect a part and if you are in the construction area then seek the construction area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <Condition>is_agent_in_construction_area</Condition>\n        <StateAction>state_seek_construction_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search the environment for any good parts, and if the agent is holding a good part, store it in the storage area of the base.",
        "technical_task": "if you are in the base and if you are holding a good part then drop the part and then go to the storage.",
        "spoon_task": "if you are in the base area and if you are holding a good part then drop the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to move towards the waste area.",
        "technical_task": "go to the waste.",
        "spoon_task": "seek the waste area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <StateAction>state_seek_waste_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if the agent is not already holding a part.",
        "technical_task": "if you are holding a good part then drop the part.",
        "spoon_task": "if you are holding a good part then drop the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <ActuatorAction>drop_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to pick up a good part only if one is detected.",
        "technical_task": "pick up the part.",
        "spoon_task": "pick up the part.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to check if the agent is holding a good part, and if not, stop moving.",
        "technical_task": "if you are holding a good part then stop moving.",
        "spoon_task": "if you are holding a good part then freeze movement.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_holding_good_part</Condition>\n        <StateAction>state_movement_freeze</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to explore the environment, avoid the waste area, and freeze movement if a good part is detected.",
        "technical_task": "pick up the part and then go to the storage, or then go to the waste, or then stop moving, or otherwise then search randomly.",
        "spoon_task": "pick up the part and then seek the storage area, or then seek the waste area, or then freeze movement, or otherwise then walk randomly.",
        "tree": "<BehaviorTree>\n    <Selector>\n        <Sequence>\n            <ActuatorAction>pick_up_part</ActuatorAction>\n            <StateAction>state_seek_storage_area</StateAction>\n        </Sequence>\n\n        <Sequence>\n            <StateAction>state_seek_waste_area</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_movement_freeze</StateAction>\n        </Sequence> \n\n        <Sequence>\n            <StateAction>state_random_walk</StateAction>\n        </Sequence> \n    </Selector>\n</BehaviorTree>"
    },
    {
        "layman_task": "Explore the environment, and upon detecting a good part, move towards the source area.",
        "technical_task": "if you are in the base and if you detect a part then go to the source.",
        "spoon_task": "if you are in the base area and if you detect a part then seek the source area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_agent_in_base_area</Condition>\n        <Condition>is_part_detected</Condition>\n        <StateAction>state_seek_source_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Search for good parts in the environment. When a good part is detected, pick it up and head towards the base area.",
        "technical_task": "if you detect a part then pick up the part and then go to the base.",
        "spoon_task": "if you detect a part then pick up the part and then seek the base area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_base_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "Your task is to collect any good part you see and bring it to the storage area of the base.",
        "technical_task": "if you detect a part then pick up the part and then go to the storage.",
        "spoon_task": "if you detect a part then pick up the part and then seek the storage area.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_seek_storage_area</StateAction>\n    </Sequence>\n</BehaviorTree>"
    },
    {
        "layman_task": "The task is to pick up a part if one is detected or move freely if no part is detected.",
        "technical_task": "if you detect a part then pick up the part and then search randomly.",
        "spoon_task": "if you detect a part then pick up the part and then walk randomly.",
        "tree": "<BehaviorTree>\n    <Sequence>\n        <Condition>is_part_detected</Condition>\n        <ActuatorAction>pick_up_part</ActuatorAction>\n        <StateAction>state_random_walk</StateAction>\n    </Sequence>\n</BehaviorTree>"
    }
]